#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ MENTOR
–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
"""

import asyncio
import json
import logging
import time
import uuid
import threading
import queue
from datetime import datetime
from typing import Dict, List, Any, Optional, Callable
from dataclasses import dataclass
from concurrent.futures import ThreadPoolExecutor, as_completed
import multiprocessing as mp

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/workspace/parallel_mentor_agents.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

@dataclass
class ParallelTask:
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    id: str
    task_type: str
    description: str
    agent_type: str
    priority: int
    parameters: Dict[str, Any]
    created_at: str
    status: str = "pending"
    result: Optional[Dict[str, Any]] = None
    error: Optional[str] = None

class ParallelAgentCoordinator:
    """–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.agents = {}
        self.task_queue = queue.PriorityQueue()
        self.results_queue = queue.Queue()
        self.running = False
        self.worker_threads = []
        self.max_workers = 4  # –ú–∞–∫—Å–∏–º—É–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
        self.completed_tasks = []
        self.active_tasks = {}
        
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤
        self._create_parallel_agents()
        
        logger.info("üöÄ –°–∏—Å—Ç–µ–º–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ MENTOR –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def _create_parallel_agents(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        self.agents = {
            "code_developer": {
                "name": "–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
                "skills": ["code_generation", "debugging", "optimization", "testing"],
                "worker": self._code_developer_worker,
                "active": False
            },
            "data_analyst": {
                "name": "–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ê–Ω–∞–ª–∏—Ç–∏–∫",
                "skills": ["data_analysis", "visualization", "reporting", "insights"],
                "worker": self._data_analyst_worker,
                "active": False
            },
            "project_manager": {
                "name": "–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ú–µ–Ω–µ–¥–∂–µ—Ä",
                "skills": ["planning", "coordination", "resource_management", "tracking"],
                "worker": self._project_manager_worker,
                "active": False
            },
            "designer": {
                "name": "–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –î–∏–∑–∞–π–Ω–µ—Ä",
                "skills": ["ui_design", "ux_design", "prototyping", "visual_identity"],
                "worker": self._designer_worker,
                "active": False
            },
            "qa_tester": {
                "name": "–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫",
                "skills": ["functional_testing", "performance_testing", "security_testing", "automation"],
                "worker": self._qa_tester_worker,
                "active": False
            },
            "system_optimizer": {
                "name": "–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä",
                "skills": ["performance_optimization", "resource_management", "monitoring", "scaling"],
                "worker": self._system_optimizer_worker,
                "active": False
            }
        }
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(self.agents)} –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤")
    
    async def add_parallel_task(self, task_type: str, description: str, agent_type: str, 
                              priority: int = 1, parameters: Dict[str, Any] = None) -> str:
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        task_id = str(uuid.uuid4())
        task = ParallelTask(
            id=task_id,
            task_type=task_type,
            description=description,
            agent_type=agent_type,
            priority=priority,
            parameters=parameters or {},
            created_at=datetime.now().isoformat()
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º (–º–µ–Ω—å—à–µ–µ —á–∏—Å–ª–æ = –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        self.task_queue.put((priority, task))
        self.active_tasks[task_id] = task
        
        logger.info(f"üìã –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞: {description[:50]}... (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority})")
        return task_id
    
    async def execute_parallel_tasks(self, max_concurrent: int = None) -> List[Dict[str, Any]]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"""
        if max_concurrent is None:
            max_concurrent = self.max_workers
        
        results = []
        tasks_to_execute = []
        
        # –°–æ–±–∏—Ä–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        while not self.task_queue.empty() and len(tasks_to_execute) < max_concurrent:
            try:
                priority, task = self.task_queue.get_nowait()
                tasks_to_execute.append(task)
            except queue.Empty:
                break
        
        if not tasks_to_execute:
            logger.info("üì≠ –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
            return results
        
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é {len(tasks_to_execute)} –∑–∞–¥–∞—á –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        with ThreadPoolExecutor(max_workers=max_concurrent) as executor:
            # –°–æ–∑–¥–∞–µ–º futures –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
            future_to_task = {}
            
            for task in tasks_to_execute:
                if task.agent_type in self.agents:
                    agent = self.agents[task.agent_type]
                    future = executor.submit(agent["worker"], task)
                    future_to_task[future] = task
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–≥–µ–Ω—Ç–∞: {task.agent_type}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–µ—Ä–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            for future in as_completed(future_to_task):
                task = future_to_task[future]
                try:
                    result = future.result()
                    task.status = "completed"
                    task.result = result
                    results.append({
                        "task_id": task.id,
                        "status": "completed",
                        "result": result,
                        "agent": self.agents[task.agent_type]["name"]
                    })
                    logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ {task.id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≥–µ–Ω—Ç–æ–º {self.agents[task.agent_type]['name']}")
                    
                except Exception as e:
                    task.status = "failed"
                    task.error = str(e)
                    results.append({
                        "task_id": task.id,
                        "status": "failed",
                        "error": str(e),
                        "agent": self.agents[task.agent_type]["name"]
                    })
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task.id}: {e}")
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
                if task.id in self.active_tasks:
                    del self.active_tasks[task.id]
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
                self.completed_tasks.append(task)
        
        return results
    
    def _code_developer_worker(self, task: ParallelTask) -> Dict[str, Any]:
        """–†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –∞–≥–µ–Ω—Ç–∞-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        logger.info(f"üíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç: {task.description}")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
        time.sleep(2)  # –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        
        return {
            "agent": "code_developer",
            "task_type": task.task_type,
            "result": f"–ö–æ–¥ —Å–æ–∑–¥–∞–Ω –¥–ª—è: {task.description}",
            "code_quality": "high",
            "performance_score": 95,
            "suggestions": [
                "–î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫",
                "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
                "–ù–∞–ø–∏—Å–∞—Ç—å unit —Ç–µ—Å—Ç—ã"
            ],
            "execution_time": 2.0
        }
    
    def _data_analyst_worker(self, task: ParallelTask) -> Dict[str, Any]:
        """–†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –∞–≥–µ–Ω—Ç–∞-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞"""
        logger.info(f"üìä –ê–Ω–∞–ª–∏—Ç–∏–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç: {task.description}")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        time.sleep(3)
        
        return {
            "agent": "data_analyst",
            "task_type": task.task_type,
            "result": f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {task.description}",
            "insights": [
                "–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç—Ä–µ–Ω–¥ —Ä–æ—Å—Ç–∞ –Ω–∞ 15%",
                "–í—ã—è–≤–ª–µ–Ω–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏",
                "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
            ],
            "confidence_score": 87,
            "visualization_created": True,
            "execution_time": 3.0
        }
    
    def _project_manager_worker(self, task: ParallelTask) -> Dict[str, Any]:
        """–†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –∞–≥–µ–Ω—Ç–∞-–º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        logger.info(f"üìã –ú–µ–Ω–µ–¥–∂–µ—Ä –≤—ã–ø–æ–ª–Ω—è–µ—Ç: {task.description}")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        time.sleep(1.5)
        
        return {
            "agent": "project_manager",
            "task_type": task.task_type,
            "result": f"–ü–ª–∞–Ω —Å–æ–∑–¥–∞–Ω: {task.description}",
            "timeline": "2 –Ω–µ–¥–µ–ª–∏",
            "resources_allocated": ["–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "–î–∏–∑–∞–π–Ω–µ—Ä", "–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫"],
            "risks_identified": ["–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤"],
            "success_probability": 85,
            "execution_time": 1.5
        }
    
    def _designer_worker(self, task: ParallelTask) -> Dict[str, Any]:
        """–†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –∞–≥–µ–Ω—Ç–∞-–¥–∏–∑–∞–π–Ω–µ—Ä–∞"""
        logger.info(f"üé® –î–∏–∑–∞–π–Ω–µ—Ä –≤—ã–ø–æ–ª–Ω—è–µ—Ç: {task.description}")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –¥–∏–∑–∞–π–Ω–µ—Ä–∞
        time.sleep(2.5)
        
        return {
            "agent": "designer",
            "task_type": task.task_type,
            "result": f"–î–∏–∑–∞–π–Ω —Å–æ–∑–¥–∞–Ω: {task.description}",
            "design_quality": "excellent",
            "user_experience_score": 92,
            "deliverables": [
                "Wireframes",
                "Visual mockups",
                "Interactive prototype"
            ],
            "execution_time": 2.5
        }
    
    def _qa_tester_worker(self, task: ParallelTask) -> Dict[str, Any]:
        """–†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –∞–≥–µ–Ω—Ç–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞"""
        logger.info(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç: {task.description}")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞
        time.sleep(2.2)
        
        return {
            "agent": "qa_tester",
            "task_type": task.task_type,
            "result": f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {task.description}",
            "test_coverage": 95,
            "bugs_found": 3,
            "critical_issues": 0,
            "performance_score": 88,
            "execution_time": 2.2
        }
    
    def _system_optimizer_worker(self, task: ParallelTask) -> Dict[str, Any]:
        """–†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –∞–≥–µ–Ω—Ç–∞-–æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞"""
        logger.info(f"‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –≤—ã–ø–æ–ª–Ω—è–µ—Ç: {task.description}")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
        time.sleep(1.8)
        
        return {
            "agent": "system_optimizer",
            "task_type": task.task_type,
            "result": f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {task.description}",
            "performance_improvement": "25%",
            "resource_optimization": "30%",
            "recommendations": [
                "–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö",
                "–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
                "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"
            ],
            "execution_time": 1.8
        }
    
    def get_system_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        return {
            "system_name": "Parallel MENTOR Agents",
            "total_agents": len(self.agents),
            "active_agents": len([a for a in self.agents.values() if a["active"]]),
            "pending_tasks": self.task_queue.qsize(),
            "active_tasks": len(self.active_tasks),
            "completed_tasks": len(self.completed_tasks),
            "max_workers": self.max_workers,
            "system_status": "running" if self.running else "stopped",
            "timestamp": datetime.now().isoformat()
        }
    
    def get_agent_status(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        return [
            {
                "agent_type": agent_type,
                "name": agent["name"],
                "skills": agent["skills"],
                "active": agent["active"],
                "status": "working" if agent["active"] else "idle"
            }
            for agent_type, agent in self.agents.items()
        ]

# –°–∏—Å—Ç–µ–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
class ParallelTaskManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á"""
    
    def __init__(self):
        self.coordinator = ParallelAgentCoordinator()
        self.running = False
        self.task_scheduler = None
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        self.running = True
        self.coordinator.running = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
        self.task_scheduler = asyncio.create_task(self._task_scheduler())
        
        logger.info("üöÄ –°–∏—Å—Ç–µ–º–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ MENTOR –∑–∞–ø—É—â–µ–Ω–∞")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        self.running = False
        self.coordinator.running = False
        
        if self.task_scheduler:
            self.task_scheduler.cancel()
        
        logger.info("üõë –°–∏—Å—Ç–µ–º–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ MENTOR –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    async def _task_scheduler(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á"""
        while self.running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                if not self.coordinator.task_queue.empty():
                    results = await self.coordinator.execute_parallel_tasks()
                    if results:
                        logger.info(f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ {len(results)} –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á")
                
                await asyncio.sleep(5)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –∑–∞–¥–∞—á: {e}")
                await asyncio.sleep(10)
    
    async def create_parallel_workflow(self, workflow_tasks: List[Dict[str, Any]]) -> List[str]:
        """–°–æ–∑–¥–∞—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π workflow –∏–∑ –∑–∞–¥–∞—á"""
        task_ids = []
        
        for task_data in workflow_tasks:
            task_id = await self.coordinator.add_parallel_task(
                task_type=task_data.get("task_type", "general"),
                description=task_data.get("description", ""),
                agent_type=task_data.get("agent_type", "general_assistant"),
                priority=task_data.get("priority", 1),
                parameters=task_data.get("parameters", {})
            )
            task_ids.append(task_id)
        
        logger.info(f"üîÑ –°–æ–∑–¥–∞–Ω –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π workflow —Å {len(task_ids)} –∑–∞–¥–∞—á–∞–º–∏")
        return task_ids
    
    async def execute_workflow(self, task_ids: List[str]) -> List[Dict[str, Any]]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å workflow –∑–∞–¥–∞—á"""
        results = []
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        workflow_results = await self.coordinator.execute_parallel_tasks()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –Ω–∞—à–∏–º task_ids
        for result in workflow_results:
            if result["task_id"] in task_ids:
                results.append(result)
        
        return results

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
_parallel_manager = None

def get_parallel_manager() -> ParallelTaskManager:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    global _parallel_manager
    if _parallel_manager is None:
        _parallel_manager = ParallelTaskManager()
    return _parallel_manager

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def demo_parallel_workflow():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ workflow"""
    manager = get_parallel_manager()
    await manager.start()
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
    workflow_tasks = [
        {
            "task_type": "code_development",
            "description": "–°–æ–∑–¥–∞—Ç—å API –¥–ª—è —Å–∏—Å—Ç–µ–º—ã MENTOR",
            "agent_type": "code_developer",
            "priority": 1
        },
        {
            "task_type": "data_analysis",
            "description": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
            "agent_type": "data_analyst",
            "priority": 2
        },
        {
            "task_type": "project_planning",
            "description": "–°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è —Å–∏—Å—Ç–µ–º—ã",
            "agent_type": "project_manager",
            "priority": 1
        },
        {
            "task_type": "ui_design",
            "description": "–°–æ–∑–¥–∞—Ç—å –¥–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
            "agent_type": "designer",
            "priority": 3
        },
        {
            "task_type": "testing",
            "description": "–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã",
            "agent_type": "qa_tester",
            "priority": 2
        },
        {
            "task_type": "optimization",
            "description": "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
            "agent_type": "system_optimizer",
            "priority": 1
        }
    ]
    
    # –°–æ–∑–¥–∞–µ–º workflow
    task_ids = await manager.create_parallel_workflow(workflow_tasks)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º workflow
    results = await manager.execute_workflow(task_ids)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logger.info("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ workflow:")
    for result in results:
        logger.info(f"‚úÖ {result['agent']}: {result['status']}")
    
    await manager.stop()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    asyncio.run(demo_parallel_workflow())