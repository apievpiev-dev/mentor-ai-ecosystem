#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Ä–∞–±–æ—á–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≥–µ–Ω—Ç–æ–≤
–ü—Ä–æ—Å—Ç–∞—è, –Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å —Ä–µ–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å—é
"""

import asyncio
import json
import logging
import time
import signal
import sys
import uuid
from datetime import datetime
from typing import Dict, List, Any, Optional
from pathlib import Path

import uvicorn
from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/home/mentor/autonomous_system.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
system_running = False
agents = {}
active_agents = set()
task_counter = 0
startup_time = time.time()
autonomous_tasks = []

class AutonomousAgent:
    """–ü—Ä–æ—Å—Ç–æ–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∞–≥–µ–Ω—Ç"""
    
    def __init__(self, agent_id: str, name: str, agent_type: str, skills: List[str]):
        self.agent_id = agent_id
        self.name = name
        self.agent_type = agent_type
        self.skills = skills
        self.status = "idle"
        self.last_activity = time.time()
        self.task_count = 0
        self.is_active = False
        
    async def process_message(self, message: str, user_id: str = "system") -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            self.last_activity = time.time()
            self.task_count += 1
            self.status = "processing"
            
            # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞
            if "–ø—Ä–∏–≤–µ—Ç" in message.lower():
                response = f"–ü—Ä–∏–≤–µ—Ç! –Ø {self.name}. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å {', '.join(self.skills[:3])}."
            elif "–∫–æ–¥" in message.lower() and "code_developer" in self.agent_type:
                response = "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–¥–∞. –ö–∞–∫–æ–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
            elif "–∞–Ω–∞–ª–∏–∑" in message.lower() and "data_analyst" in self.agent_type:
                response = "–Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å?"
            elif "–ø—Ä–æ–µ–∫—Ç" in message.lower() and "project_manager" in self.agent_type:
                response = "–Ø –ø–æ–º–æ–≥—É —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö —Ü–µ–ª—è—Ö."
            elif "–¥–∏–∑–∞–π–Ω" in message.lower() and "designer" in self.agent_type:
                response = "–Ø —Å–æ–∑–¥–∞–º –¥–∏–∑–∞–π–Ω –¥–ª—è –≤–∞—Å. –ö–∞–∫–æ–π —Å—Ç–∏–ª—å –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?"
            elif "—Ç–µ—Å—Ç" in message.lower() and "qa_tester" in self.agent_type:
                response = "–Ø –ø—Ä–æ–≤–µ–¥—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. –ß—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å?"
            else:
                response = f"–Ø {self.name}. –ü–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{message}'. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
            
            self.status = "idle"
            return {
                "response": response,
                "agent": self.name,
                "agent_type": self.agent_type,
                "timestamp": datetime.now().isoformat(),
                "success": True
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–º {self.name}: {e}")
            self.status = "error"
            return {
                "response": f"–û—à–∏–±–∫–∞: {str(e)}",
                "agent": self.name,
                "agent_type": self.agent_type,
                "timestamp": datetime.now().isoformat(),
                "success": False
            }

# –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤
def create_agents():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤"""
    global agents
    
    agents = {
        "general_assistant": AutonomousAgent(
            "general_assistant", "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ü–æ–º–æ—â–Ω–∏–∫", "general_assistant",
            ["general_help", "planning", "coordination", "user_query"]
        ),
        "code_developer": AutonomousAgent(
            "code_developer", "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ö–æ–¥–∞", "code_developer",
            ["code_generation", "debugging", "code_review", "architecture_design"]
        ),
        "data_analyst": AutonomousAgent(
            "data_analyst", "–ê–Ω–∞–ª–∏—Ç–∏–∫ –î–∞–Ω–Ω—ã—Ö", "data_analyst",
            ["data_analysis", "reporting", "visualization", "predictive_modeling"]
        ),
        "project_manager": AutonomousAgent(
            "project_manager", "–ú–µ–Ω–µ–¥–∂–µ—Ä –ü—Ä–æ–µ–∫—Ç–æ–≤", "project_manager",
            ["project_planning", "task_management", "resource_allocation", "progress_tracking"]
        ),
        "designer": AutonomousAgent(
            "designer", "–î–∏–∑–∞–π–Ω–µ—Ä", "designer",
            ["ui_design", "ux_design", "visual_identity"]
        ),
        "qa_tester": AutonomousAgent(
            "qa_tester", "–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫", "qa_tester",
            ["unit_testing", "integration_testing", "bug_reporting"]
        )
    }
    
    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(agents)} –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤")

# –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –∑–∞–¥–∞—á–∏
async def autonomous_task_generator():
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∑–∞–¥–∞—á"""
    global autonomous_tasks, task_counter
    
    while system_running:
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–∞—á—É –∫–∞–∂–¥—ã–µ 30-60 —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(30)
            
            if not system_running:
                break
                
            task_counter += 1
            task_types = [
                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã",
                "–ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏",
                "–°–æ–∑–¥–∞–π –æ—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ –∞–≥–µ–Ω—Ç–æ–≤",
                "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –ø—Ä–æ—Ü–µ—Å—Å—ã",
                "–ü—Ä–æ–≤–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã"
            ]
            
            task = {
                "id": f"auto_task_{task_counter}",
                "description": task_types[task_counter % len(task_types)],
                "timestamp": datetime.now().isoformat(),
                "assigned_to": None
            }
            
            autonomous_tasks.append(task)
            logger.info(f"ü§ñ –°–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è –∑–∞–¥–∞—á–∞: {task['description']}")
            
            # –ù–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–¥–∞—á—É —Å–ª—É—á–∞–π–Ω–æ–º—É –∞–≥–µ–Ω—Ç—É
            if agents:
                agent_id = list(agents.keys())[task_counter % len(agents)]
                agent = agents[agent_id]
                await agent.process_message(task['description'], "autonomous_system")
                task['assigned_to'] = agent.name
                logger.info(f"üìã –ó–∞–¥–∞—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∞–≥–µ–Ω—Ç—É: {agent.name}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∑–∞–¥–∞—á: {e}")
            await asyncio.sleep(10)

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(title="Autonomous Multi-AI System")

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —á–∞—Ç–æ–º"""
    return HTMLResponse(content="""
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Autonomous Multi-AI System</title>
        <style>
            * { margin: 0; padding: 0; box-sizing: border-box; }
            body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; }
            .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
            .header { text-align: center; color: white; margin-bottom: 30px; }
            .header h1 { font-size: 2.5em; margin-bottom: 10px; }
            .header p { font-size: 1.2em; opacity: 0.9; }
            .chat-container { display: flex; gap: 20px; height: 600px; }
            .chat-messages { flex: 1; background: white; border-radius: 15px; padding: 20px; overflow-y: auto; box-shadow: 0 10px 30px rgba(0,0,0,0.1); }
            .chat-sidebar { width: 300px; background: rgba(255,255,255,0.95); border-radius: 15px; padding: 20px; box-shadow: 0 10px 30px rgba(0,0,0,0.1); }
            .message { margin-bottom: 15px; padding: 12px; border-radius: 10px; }
            .user-message { background: #e3f2fd; margin-left: 20px; }
            .agent-message { background: #f3e5f5; margin-right: 20px; }
            .system-message { background: #e8f5e8; text-align: center; font-style: italic; }
            .input-container { display: flex; gap: 10px; margin-top: 20px; }
            .message-input { flex: 1; padding: 15px; border: none; border-radius: 25px; font-size: 16px; outline: none; }
            .send-button { padding: 15px 30px; background: #4CAF50; color: white; border: none; border-radius: 25px; cursor: pointer; font-size: 16px; transition: background 0.3s; }
            .send-button:hover { background: #45a049; }
            .system-info { margin-bottom: 20px; }
            .system-info h3 { color: #333; margin-bottom: 10px; }
            .status-item { display: flex; justify-content: space-between; margin-bottom: 5px; }
            .status-indicator { width: 12px; height: 12px; border-radius: 50%; display: inline-block; margin-right: 8px; }
            .status-online { background: #4CAF50; }
            .status-offline { background: #f44336; }
            .agent-selector { margin-bottom: 20px; }
            .agent-selector label { display: block; margin-bottom: 5px; font-weight: bold; color: #333; }
            .agent-selector select { width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 5px; }
            .autonomous-tasks { margin-top: 20px; }
            .autonomous-tasks h3 { color: #333; margin-bottom: 10px; }
            .task-item { background: #f0f0f0; padding: 10px; border-radius: 5px; margin-bottom: 5px; font-size: 0.9em; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>ü§ñ Autonomous Multi-AI System</h1>
                <p>–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≥–µ–Ω—Ç–æ–≤ —Å —Ä–µ–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å—é</p>
            </div>
            
            <div class="chat-container">
                <div class="chat-messages" id="chatMessages">
                    <div class="message system-message">
                        <strong>–°–∏—Å—Ç–µ–º–∞:</strong> –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞! –ê–≥–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç –∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
                    </div>
                </div>
                
                <div class="chat-sidebar">
                    <div class="system-info">
                        <h3>üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</h3>
                        <p><span class="status-indicator status-online"></span>–°–∏—Å—Ç–µ–º–∞: <span id="systemStatus">–ó–∞–≥—Ä—É–∑–∫–∞...</span></p>
                        <p>–ê–≥–µ–Ω—Ç–æ–≤: <span id="totalAgents">0</span></p>
                        <p>–ê–∫—Ç–∏–≤–Ω—ã—Ö: <span id="activeAgents">0</span></p>
                        <p>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: <span id="uptime">0–º</span></p>
                        <p>–ê–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∑–∞–¥–∞—á: <span id="autonomousTasks">0</span></p>
                    </div>
                    
                    <div class="agent-selector">
                        <label for="agentSelect"><strong>–í—ã–±–µ—Ä–∏—Ç–µ –∞–≥–µ–Ω—Ç–∞:</strong></label>
                        <select id="agentSelect">
                            <option value="">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä</option>
                            <option value="general_assistant">–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ü–æ–º–æ—â–Ω–∏–∫</option>
                            <option value="code_developer">–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ö–æ–¥–∞</option>
                            <option value="data_analyst">–ê–Ω–∞–ª–∏—Ç–∏–∫ –î–∞–Ω–Ω—ã—Ö</option>
                            <option value="project_manager">–ú–µ–Ω–µ–¥–∂–µ—Ä –ü—Ä–æ–µ–∫—Ç–æ–≤</option>
                            <option value="designer">–î–∏–∑–∞–π–Ω–µ—Ä</option>
                            <option value="qa_tester">–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫</option>
                        </select>
                    </div>
                    
                    <div class="autonomous-tasks">
                        <h3>ü§ñ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –∑–∞–¥–∞—á–∏</h3>
                        <div id="autonomousTasksList">
                            <div class="task-item">–°–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...</div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="input-container">
                <input type="text" id="messageInput" class="message-input" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." />
                <button onclick="sendMessage()" class="send-button">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
            </div>
        </div>

        <script>
            let ws = null;
            let userId = 'user_' + Math.random().toString(36).substr(2, 9);
            
            function connectWebSocket() {
                ws = new WebSocket(`ws://${window.location.host}/ws/${userId}`);
                
                ws.onopen = function() {
                    console.log('WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
                };
                
                ws.onmessage = function(event) {
                    const data = JSON.parse(event.data);
                    addMessage(data.message, 'agent', data.agent);
                };
                
                ws.onclose = function() {
                    console.log('WebSocket –æ—Ç–∫–ª—é—á–µ–Ω, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
                    setTimeout(connectWebSocket, 3000);
                };
            }
            
            function addMessage(message, type, agent = '') {
                const chatMessages = document.getElementById('chatMessages');
                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${type}-message`;
                
                if (type === 'user') {
                    messageDiv.innerHTML = `<strong>–í—ã:</strong> ${message}`;
                } else {
                    messageDiv.innerHTML = `<strong>${agent}:</strong> ${message}`;
                }
                
                chatMessages.appendChild(messageDiv);
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }
            
            function sendMessage() {
                const input = document.getElementById('messageInput');
                const message = input.value.trim();
                const agentType = document.getElementById('agentSelect').value;
                
                if (message && ws) {
                    addMessage(message, 'user');
                    
                    const payload = {
                        message: message,
                        agent_type: agentType || null,
                        user_id: userId
                    };
                    
                    ws.send(JSON.stringify(payload));
                    input.value = '';
                }
            }
            
            function updateStatus() {
                fetch('/api/system/status')
                    .then(response => response.json())
                    .then(data => {
                        document.getElementById('systemStatus').textContent = data.system_status;
                        document.getElementById('totalAgents').textContent = data.total_agents;
                        document.getElementById('activeAgents').textContent = data.active_agents;
                        document.getElementById('uptime').textContent = data.uptime;
                        document.getElementById('autonomousTasks').textContent = data.autonomous_tasks;
                    })
                    .catch(error => console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error));
            }
            
            function updateAutonomousTasks() {
                fetch('/api/autonomous/tasks')
                    .then(response => response.json())
                    .then(data => {
                        const tasksList = document.getElementById('autonomousTasksList');
                        tasksList.innerHTML = '';
                        
                        if (data.tasks.length === 0) {
                            tasksList.innerHTML = '<div class="task-item">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á</div>';
                        } else {
                            data.tasks.slice(-5).forEach(task => {
                                const taskDiv = document.createElement('div');
                                taskDiv.className = 'task-item';
                                taskDiv.innerHTML = `<strong>${task.description}</strong><br><small>–ê–≥–µ–Ω—Ç: ${task.assigned_to || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}</small>`;
                                tasksList.appendChild(taskDiv);
                            });
                        }
                    })
                    .catch(error => console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á:', error));
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter
            document.getElementById('messageInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    sendMessage();
                }
            });
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            connectWebSocket();
            updateStatus();
            updateAutonomousTasks();
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            setInterval(updateStatus, 5000);
            setInterval(updateAutonomousTasks, 10000);
        </script>
    </body>
    </html>
    """)

@app.get("/api/system/status")
async def get_system_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    global system_running, agents, active_agents, startup_time, autonomous_tasks
    
    uptime_seconds = int(time.time() - startup_time)
    uptime_minutes = uptime_seconds // 60
    
    return {
        "system_status": "running" if system_running else "stopped",
        "total_agents": len(agents),
        "active_agents": len([a for a in agents.values() if a.is_active]),
        "uptime": f"{uptime_minutes}–º",
        "autonomous_tasks": len(autonomous_tasks),
        "timestamp": datetime.now().isoformat()
    }

@app.get("/api/autonomous/tasks")
async def get_autonomous_tasks():
    """–ü–æ–ª—É—á–∏—Ç—å –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
    global autonomous_tasks
    return {"tasks": autonomous_tasks[-10:]}  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–¥–∞—á

@app.post("/api/chat/send")
async def send_message(data: dict):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É"""
    global agents
    
    message = data.get("message", "")
    agent_type = data.get("agent_type")
    user_id = data.get("user_id", "unknown")
    
    if not message:
        return {"error": "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"}
    
    # –í—ã–±–∏—Ä–∞–µ–º –∞–≥–µ–Ω—Ç–∞
    if agent_type and agent_type in agents:
        agent = agents[agent_type]
    else:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –∞–≥–µ–Ω—Ç–∞
        agent = list(agents.values())[0]  # –ü—Ä–æ—Å—Ç–æ–π –≤—ã–±–æ—Ä
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    result = await agent.process_message(message, user_id)
    
    return {
        "success": True,
        "response": result,
        "timestamp": datetime.now().isoformat()
    }

@app.websocket("/ws/{user_id}")
async def websocket_endpoint(websocket: WebSocket, user_id: str):
    """WebSocket –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    await websocket.accept()
    
    try:
        while True:
            data = await websocket.receive_text()
            message_data = json.loads(data)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            response = await send_message(message_data)
            
            if response.get("success"):
                result = response["response"]
                await websocket.send_text(json.dumps({
                    "message": result["response"],
                    "agent": result["agent"],
                    "timestamp": result["timestamp"]
                }))
            else:
                await websocket.send_text(json.dumps({
                    "message": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
                    "agent": "System",
                    "timestamp": datetime.now().isoformat()
                }))
                
    except WebSocketDisconnect:
        logger.info(f"üîå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç WebSocket")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global system_running
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–≥–µ–Ω—Ç–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤
    create_agents()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
    system_running = True
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∑–∞–¥–∞—á
    task_generator = asyncio.create_task(autonomous_task_generator())
    
    logger.info("‚úÖ –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")
    logger.info("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://0.0.0.0:8080")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
        config = uvicorn.Config(app, host="0.0.0.0", port=8080, log_level="info")
        server = uvicorn.Server(config)
        await server.serve()
        
    except KeyboardInterrupt:
        logger.info("üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
    finally:
        system_running = False
        task_generator.cancel()
        logger.info("üõë –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

if __name__ == "__main__":
    asyncio.run(main())


