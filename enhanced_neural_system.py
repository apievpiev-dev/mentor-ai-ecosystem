#!/usr/bin/env python3
"""
Enhanced Autonomous Neural Network System
–ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º
"""

import asyncio
import json
import logging
import time
import threading
from datetime import datetime
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
import subprocess
import requests
from pathlib import Path

from ai_engine import ai_engine, AIResponse
from multi_agent_system import MultiAgentSystem, BaseAgent, AgentType
from visual_monitor import VisualMonitor
from cloud_agent_system import cloud_system

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

@dataclass
class NeuralTask:
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏"""
    id: str
    task_type: str
    priority: int
    input_data: Dict[str, Any]
    expected_output: Optional[Dict[str, Any]] = None
    status: str = "pending"
    result: Optional[Dict[str, Any]] = None
    created_at: str = ""
    completed_at: Optional[str] = None
    processing_time: float = 0.0

class AutonomousNeuralAgent(BaseAgent):
    """–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –Ω–µ–π—Ä–æ–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç"""
    
    def __init__(self, agent_id: str = None):
        super().__init__(
            agent_id or f"neural_agent_{int(time.time())}",
            AgentType.SYSTEM_ADMIN,
            "–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ù–µ–π—Ä–æ–Ω–Ω—ã–π –ê–≥–µ–Ω—Ç",
            "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç—è—Ö –∏ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏"
        )
        self.neural_models = {}
        self.training_data = []
        self.model_performance = {}
        self.auto_learning_enabled = True
        self._setup_neural_skills()
    
    def _setup_neural_skills(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤—ã–∫–æ–≤ –Ω–µ–π—Ä–æ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
        self.add_skill("neural_processing", self._handle_neural_processing)
        self.add_skill("model_training", self._handle_model_training)
        self.add_skill("data_analysis", self._handle_data_analysis)
        self.add_skill("pattern_recognition", self._handle_pattern_recognition)
        self.add_skill("autonomous_learning", self._handle_autonomous_learning)
    
    async def _handle_neural_processing(self, content: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç—å—é"""
        try:
            input_data = content.get("input_data", {})
            model_type = content.get("model_type", "general")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –¥–≤–∏–∂–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            prompt = f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∏–Ω—Å–∞–π—Ç—ã: {json.dumps(input_data, ensure_ascii=False)}"
            response = await ai_engine.generate_response(
                prompt=prompt,
                system_prompt="–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –Ω–µ–π—Ä–æ–Ω–Ω—ã–º —Å–µ—Ç—è–º –∏ –º–∞—à–∏–Ω–Ω–æ–º—É –æ–±—É—á–µ–Ω–∏—é. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π —Ç–æ—á–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã."
            )
            
            if response.success:
                return {
                    "status": "success",
                    "result": response.content,
                    "model_used": response.model,
                    "processing_time": response.response_time,
                    "tokens_used": response.tokens_used
                }
            else:
                return {
                    "status": "error",
                    "error": response.error
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            return {"status": "error", "error": str(e)}
    
    async def _handle_model_training(self, content: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        try:
            training_data = content.get("training_data", [])
            model_name = content.get("model_name", "default")
            
            # –°–∏–º—É–ª—è—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
            logger.info(f"üß† –ù–∞—á–∏–Ω–∞—é –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ {model_name} –Ω–∞ {len(training_data)} –æ–±—Ä–∞–∑—Ü–∞—Ö")
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ ML –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
            await asyncio.sleep(2)  # –°–∏–º—É–ª—è—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±—É—á–µ–Ω–∏—è
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
            self.neural_models[model_name] = {
                "trained_at": datetime.now().isoformat(),
                "training_samples": len(training_data),
                "accuracy": 0.85 + (len(training_data) / 1000) * 0.1,  # –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏
                "status": "trained"
            }
            
            logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å {model_name} –æ–±—É—á–µ–Ω–∞ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é {self.neural_models[model_name]['accuracy']:.2f}")
            
            return {
                "status": "success",
                "model_name": model_name,
                "accuracy": self.neural_models[model_name]["accuracy"],
                "training_samples": len(training_data)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
            return {"status": "error", "error": str(e)}
    
    async def _handle_data_analysis(self, content: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            data = content.get("data", [])
            analysis_type = content.get("analysis_type", "statistical")
            
            prompt = f"""–ü—Ä–æ–≤–µ–¥–∏ {analysis_type} –∞–Ω–∞–ª–∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö:
{json.dumps(data, ensure_ascii=False)}

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å:
1. –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
2. –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
3. –ê–Ω–æ–º–∞–ª–∏–∏
4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
            
            response = await ai_engine.generate_response(
                prompt=prompt,
                system_prompt="–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–æ–¥–∏ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã."
            )
            
            if response.success:
                return {
                    "status": "success",
                    "analysis": response.content,
                    "data_points": len(data),
                    "analysis_type": analysis_type
                }
            else:
                return {"status": "error", "error": response.error}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {"status": "error", "error": str(e)}
    
    async def _handle_pattern_recognition(self, content: Dict[str, Any]) -> Dict[str, Any]:
        """–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        try:
            patterns = content.get("patterns", [])
            
            prompt = f"""–ù–∞–π–¥–∏ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –¥–∞–Ω–Ω—ã—Ö:
{json.dumps(patterns, ensure_ascii=False)}

–û–ø—Ä–µ–¥–µ–ª–∏:
1. –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω—ã
2. –¢—Ä–µ–Ω–¥—ã
3. –¶–∏–∫–ª—ã
4. –ü—Ä–æ–≥–Ω–æ–∑—ã"""
            
            response = await ai_engine.generate_response(
                prompt=prompt,
                system_prompt="–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—é –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤. –ù–∞—Ö–æ–¥–∏ —Å–∫—Ä—ã—Ç—ã–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –∏ –¥–µ–ª–∞–π –ø—Ä–æ–≥–Ω–æ–∑—ã."
            )
            
            if response.success:
                return {
                    "status": "success",
                    "patterns_found": response.content,
                    "confidence": 0.8  # –°–∏–º—É–ª—è—Ü–∏—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                }
            else:
                return {"status": "error", "error": response.error}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")
            return {"status": "error", "error": str(e)}
    
    async def _handle_autonomous_learning(self, content: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"""
        try:
            if not self.auto_learning_enabled:
                return {"status": "disabled", "message": "–ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ"}
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
            learning_data = self.shared_memory.get_recent_context(100) if self.shared_memory else []
            
            if len(learning_data) < 10:
                return {"status": "insufficient_data", "message": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"}
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            successful_interactions = [
                item for item in learning_data 
                if item.get("agent_response", {}).get("status") == "success"
            ]
            
            if successful_interactions:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                pattern_summary = f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã {len(successful_interactions)} —É—Å–ø–µ—à–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π"
                
                # –£–ª—É—á—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –æ—Ü–µ–Ω–∫—É
                for model_name in self.neural_models:
                    old_accuracy = self.neural_models[model_name].get("accuracy", 0.5)
                    new_accuracy = min(0.99, old_accuracy + 0.01)
                    self.neural_models[model_name]["accuracy"] = new_accuracy
                
                logger.info(f"üß† –ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {pattern_summary}")
                
                return {
                    "status": "success",
                    "learned_patterns": len(successful_interactions),
                    "models_improved": len(self.neural_models),
                    "summary": pattern_summary
                }
            else:
                return {"status": "no_patterns", "message": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —É—Å–ø–µ—à–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è: {e}")
            return {"status": "error", "error": str(e)}

class EnhancedNeuralSystem:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π"""
    
    def __init__(self):
        self.running = False
        self.neural_agent = AutonomousNeuralAgent()
        self.task_queue = []
        self.completed_tasks = []
        self.performance_metrics = {
            "total_tasks": 0,
            "successful_tasks": 0,
            "failed_tasks": 0,
            "average_processing_time": 0.0,
            "uptime_start": datetime.now().isoformat()
        }
        self.visual_monitor = None
        self.auto_optimization_enabled = True
        
        logger.info("üß† Enhanced Neural System –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ Enhanced Neural System...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            self.visual_monitor = VisualMonitor()
            
            # –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º —Å –º—É–ª—å—Ç–∏-–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
            multi_agent_system = MultiAgentSystem()
            multi_agent_system.agents[self.neural_agent.agent_id] = self.neural_agent
            self.neural_agent.set_shared_memory(multi_agent_system.shared_memory)
            
            self.running = True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
            await asyncio.gather(
                self._main_processing_loop(),
                self._auto_optimization_loop(),
                self._health_monitoring_loop()
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}")
            raise
    
    async def _main_processing_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        while self.running:
            try:
                if self.task_queue:
                    task = self.task_queue.pop(0)
                    await self._process_neural_task(task)
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞—á, –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
                    await self._autonomous_learning_cycle()
                
                await asyncio.sleep(1)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(5)
    
    async def _process_neural_task(self, task: NeuralTask):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        try:
            start_time = time.time()
            task.status = "processing"
            
            logger.info(f"üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ {task.id}: {task.task_type}")
            
            # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if task.task_type == "neural_processing":
                result = await self.neural_agent._handle_neural_processing(task.input_data)
            elif task.task_type == "model_training":
                result = await self.neural_agent._handle_model_training(task.input_data)
            elif task.task_type == "data_analysis":
                result = await self.neural_agent._handle_data_analysis(task.input_data)
            elif task.task_type == "pattern_recognition":
                result = await self.neural_agent._handle_pattern_recognition(task.input_data)
            else:
                result = {"status": "error", "error": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏: {task.task_type}"}
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
            task.result = result
            task.processing_time = time.time() - start_time
            task.completed_at = datetime.now().isoformat()
            
            if result.get("status") == "success":
                task.status = "completed"
                self.performance_metrics["successful_tasks"] += 1
                logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ {task.id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ {task.processing_time:.2f}—Å")
            else:
                task.status = "failed"
                self.performance_metrics["failed_tasks"] += 1
                logger.error(f"‚ùå –ó–∞–¥–∞—á–∞ {task.id} –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            
            self.completed_tasks.append(task)
            self.performance_metrics["total_tasks"] += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            total_time = sum(t.processing_time for t in self.completed_tasks)
            self.performance_metrics["average_processing_time"] = total_time / len(self.completed_tasks)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ {task.id}: {e}")
            task.status = "failed"
            task.result = {"status": "error", "error": str(e)}
            self.completed_tasks.append(task)
    
    async def _autonomous_learning_cycle(self):
        """–¶–∏–∫–ª –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(30)
            
            if self.neural_agent.auto_learning_enabled:
                result = await self.neural_agent._handle_autonomous_learning({})
                if result.get("status") == "success":
                    logger.info(f"üß† –ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ: {result.get('summary', '–ó–∞–≤–µ—Ä—à–µ–Ω–æ')}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è: {e}")
    
    async def _auto_optimization_loop(self):
        """–¶–∏–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        logger.info("‚ö° –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        
        while self.running:
            try:
                if self.auto_optimization_enabled:
                    await self._optimize_system()
                
                await asyncio.sleep(300)  # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
                await asyncio.sleep(60)
    
    async def _optimize_system(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –û—á–∏—â–∞–µ–º –∫—ç—à –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
            if hasattr(ai_engine.ollama, 'response_cache') and len(ai_engine.ollama.response_cache) > 1000:
                ai_engine.ollama.clear_cache()
                logger.info("üßπ –ö—ç—à AI –æ—á–∏—â–µ–Ω –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
            if len(self.completed_tasks) > 100:
                # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∑–∞–¥–∞—á
                self.completed_tasks = self.completed_tasks[-50:]
                logger.info("üóÇÔ∏è –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π
            if hasattr(ai_engine.ollama, 'model_performance'):
                performance = ai_engine.ollama.get_model_performance()
                best_models = [
                    model for model, metrics in performance.items()
                    if metrics.get("quality_score", 0) > 0.7 and metrics.get("error_rate", 1) < 0.1
                ]
                if best_models:
                    logger.info(f"üèÜ –õ—É—á—à–∏–µ –º–æ–¥–µ–ª–∏: {', '.join(best_models[:3])}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
    
    async def _health_monitoring_loop(self):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üíö –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã")
        
        while self.running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ AI –¥–≤–∏–∂–∫–∞
                ai_health = ai_engine.get_status()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                success_rate = 0
                if self.performance_metrics["total_tasks"] > 0:
                    success_rate = self.performance_metrics["successful_tasks"] / self.performance_metrics["total_tasks"]
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                logger.info(f"üíö –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã: AI={ai_health.get('default_engine', 'unknown')}, "
                          f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å={success_rate:.2%}, "
                          f"–ó–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏={len(self.task_queue)}")
                
                # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞–¥–∞–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                if success_rate < 0.7 and self.performance_metrics["total_tasks"] > 10:
                    logger.warning("‚ö†Ô∏è –ù–∏–∑–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –≤—ã–ø–æ–ª–Ω—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ...")
                    await self._recover_system()
                
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
                await asyncio.sleep(30)
    
    async def _recover_system(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("üîß –ù–∞—á–∏–Ω–∞—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...")
            
            # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á
            current_time = time.time()
            self.task_queue = [
                task for task in self.task_queue
                if current_time - time.mktime(time.strptime(task.created_at, "%Y-%m-%dT%H:%M:%S.%f")) < 3600
            ]
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º AI –¥–≤–∏–∂–æ–∫
            if hasattr(ai_engine.ollama, 'clear_cache'):
                ai_engine.ollama.clear_cache()
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
            self.performance_metrics.update({
                "successful_tasks": 0,
                "failed_tasks": 0,
                "total_tasks": 0,
                "average_processing_time": 0.0
            })
            
            logger.info("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã: {e}")
    
    def add_neural_task(self, task_type: str, input_data: Dict[str, Any], priority: int = 5) -> str:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        task_id = f"neural_task_{int(time.time())}_{len(self.task_queue)}"
        task = NeuralTask(
            id=task_id,
            task_type=task_type,
            priority=priority,
            input_data=input_data,
            created_at=datetime.now().isoformat()
        )
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        inserted = False
        for i, existing_task in enumerate(self.task_queue):
            if task.priority > existing_task.priority:
                self.task_queue.insert(i, task)
                inserted = True
                break
        
        if not inserted:
            self.task_queue.append(task)
        
        logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–µ–π—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ {task_id}: {task_type} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority})")
        return task_id
    
    def get_system_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        return {
            "running": self.running,
            "neural_agent": self.neural_agent.get_status(),
            "task_queue_size": len(self.task_queue),
            "completed_tasks": len(self.completed_tasks),
            "performance_metrics": self.performance_metrics,
            "ai_engine_status": ai_engine.get_status(),
            "visual_monitor_active": self.visual_monitor is not None,
            "auto_optimization_enabled": self.auto_optimization_enabled
        }
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Enhanced Neural System...")
        self.running = False
        if self.visual_monitor:
            self.visual_monitor.stop_monitoring()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã
enhanced_neural_system = EnhancedNeuralSystem()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        enhanced_neural_system.add_neural_task(
            "data_analysis",
            {"data": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], "analysis_type": "statistical"},
            priority=8
        )
        
        enhanced_neural_system.add_neural_task(
            "pattern_recognition",
            {"patterns": ["ABAB", "CDCD", "EFEF", "ABAB"]},
            priority=7
        )
        
        enhanced_neural_system.add_neural_task(
            "neural_processing",
            {"input_data": {"text": "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏"}},
            priority=9
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
        await enhanced_neural_system.start()
        
    except KeyboardInterrupt:
        logger.info("üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        enhanced_neural_system.stop()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        enhanced_neural_system.stop()

if __name__ == "__main__":
    asyncio.run(main())