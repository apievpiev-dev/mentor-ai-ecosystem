#!/usr/bin/env python3
"""
JARVIS Vision System
–°–∏—Å—Ç–µ–º–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""

import os
import sys
import json
import time
import asyncio
import logging
import base64
import io
import subprocess
from datetime import datetime
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
import threading
import queue

logger = logging.getLogger(__name__)

@dataclass
class VisionAnalysis:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    timestamp: str
    screen_elements: List[Dict[str, Any]]
    issues_detected: List[Dict[str, Any]]
    suggestions: List[str]
    confidence: float

class JarvisVision:
    """–°–∏—Å—Ç–µ–º–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è JARVIS"""
    
    def __init__(self, core):
        self.core = core
        self.screenshot_queue = queue.Queue()
        self.analysis_results = []
        self.vision_enabled = True
        self.screenshot_interval = 5  # —Å–µ–∫—É–Ω–¥
        self.last_analysis = None
        self.virtual_display = None
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥–∏—Å–ø–ª–µ–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        self.setup_virtual_display()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É –∑—Ä–µ–Ω–∏—è
        self.start_vision_system()
    
    def setup_virtual_display(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –¥–∏—Å–ø–ª–µ—è –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —Å—Ä–µ–¥—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ DISPLAY
            if os.getenv('DISPLAY'):
                logger.info(f"‚úÖ –î–∏—Å–ø–ª–µ–π —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {os.getenv('DISPLAY')}")
                return
            
            # –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥–∏—Å–ø–ª–µ–π
            logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –¥–∏—Å–ø–ª–µ—è...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Xvfb –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            try:
                result = subprocess.run(['Xvfb', ':99', '-screen', '0', '1024x768x24'], 
                                      capture_output=True, timeout=5)
                if result.returncode == 0:
                    os.environ['DISPLAY'] = ':99'
                    logger.info("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥–∏—Å–ø–ª–µ–π Xvfb –∑–∞–ø—É—â–µ–Ω –Ω–∞ :99")
                    return
            except FileNotFoundError:
                logger.warning("‚ö†Ô∏è Xvfb –Ω–µ –Ω–∞–π–¥–µ–Ω")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Xvfb: {e}")
            
            # –ï—Å–ª–∏ Xvfb –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-—Ä–µ–∂–∏–º
            logger.info("üñºÔ∏è –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º (–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã)")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏—Å–ø–ª–µ—è: {e}")
        
    def start_vision_system(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è"""
        # –ü–æ—Ç–æ–∫ –∑–∞—Ö–≤–∞—Ç–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        screenshot_thread = threading.Thread(
            target=self.run_screenshot_capture,
            daemon=True
        )
        screenshot_thread.start()
        
        # –ü–æ—Ç–æ–∫ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        analysis_thread = threading.Thread(
            target=self.run_image_analysis,
            daemon=True
        )
        analysis_thread.start()
        
        logger.info("üëÅÔ∏è –°–∏—Å—Ç–µ–º–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è JARVIS –∑–∞–ø—É—â–µ–Ω–∞")
    
    def run_screenshot_capture(self):
        """–ó–∞—Ö–≤–∞—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤"""
        while self.vision_enabled:
            try:
                # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
                screenshot_data = self.capture_screenshot()
                if screenshot_data:
                    self.screenshot_queue.put({
                        "timestamp": datetime.now().isoformat(),
                        "image_data": screenshot_data
                    })
                
                time.sleep(self.screenshot_interval)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
                time.sleep(10)
    
    def run_image_analysis(self):
        """–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        while self.vision_enabled:
            try:
                if not self.screenshot_queue.empty():
                    screenshot = self.screenshot_queue.get()
                    analysis = self.analyze_screenshot(screenshot)
                    
                    if analysis:
                        self.analysis_results.append(analysis)
                        self.process_analysis_results(analysis)
                        
                        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
                        if len(self.analysis_results) > 100:
                            self.analysis_results = self.analysis_results[-50:]
                
                time.sleep(1)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                time.sleep(5)
    
    def capture_screenshot(self) -> Optional[str]:
        """–ó–∞—Ö–≤–∞—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —ç–∫—Ä–∞–Ω–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            display = os.getenv('DISPLAY')
            if not display:
                logger.info("–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ-—Å–∫—Ä–∏–Ω—à–æ—Ç")
                return self.create_demo_screenshot()
            
            logger.info(f"–ó–∞—Ö–≤–∞—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å –¥–∏—Å–ø–ª–µ—è: {display}")
            
            # –ü—Ä–æ–±—É–µ–º scrot (–±—ã—Å—Ç—Ä–µ–µ –∏ –Ω–∞–¥–µ–∂–Ω–µ–µ)
            try:
                result = subprocess.run([
                    'scrot', '-q', '80', '-o', '/tmp/jarvis_screenshot.png'
                ], capture_output=True, timeout=10)
                
                if result.returncode == 0 and os.path.exists('/tmp/jarvis_screenshot.png'):
                    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏ –∫–æ–¥–∏—Ä—É–µ–º –≤ base64
                    with open('/tmp/jarvis_screenshot.png', 'rb') as f:
                        image_data = f.read()
                    image_base64 = base64.b64encode(image_data).decode('utf-8')
                    os.remove('/tmp/jarvis_screenshot.png')  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    logger.info("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–¥–µ–ª–∞–Ω —Å –ø–æ–º–æ—â—å—é scrot")
                    return image_base64
            except Exception as e:
                logger.warning(f"scrot –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
            
            # –ü—Ä–æ–±—É–µ–º ImageMagick
            result = subprocess.run([
                'import', '-window', 'root', '-resize', '800x600', 'png:-'
            ], capture_output=True, timeout=10)
            
            if result.returncode == 0:
                # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
                image_base64 = base64.b64encode(result.stdout).decode('utf-8')
                return image_base64
            else:
                # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ xwd
                result = subprocess.run([
                    'xwd', '-root', '-silent'
                ], capture_output=True, timeout=10)
                
                if result.returncode == 0:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º xwd –≤ png
                    convert_result = subprocess.run([
                        'convert', 'xwd:-', 'png:-'
                    ], input=result.stdout, capture_output=True, timeout=10)
                    
                    if convert_result.returncode == 0:
                        image_base64 = base64.b64encode(convert_result.stdout).decode('utf-8')
                        return image_base64
                
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ö–≤–∞—Ç–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç")
                return None
                
        except subprocess.TimeoutExpired:
            logger.warning("–¢–∞–π–º–∞—É—Ç –∑–∞—Ö–≤–∞—Ç–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")
            return None
        except FileNotFoundError:
            logger.warning("ImageMagick –∏–ª–∏ xwd –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return self.create_demo_screenshot()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            return self.create_demo_screenshot()
    
    def create_demo_screenshot(self) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ-—Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —Å—Ä–µ–¥—ã"""
        try:
            from PIL import Image, ImageDraw, ImageFont
            
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 800x600
            img = Image.new('RGB', (800, 600), color='#667eea')
            draw = ImageDraw.Draw(img)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            try:
                font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 30)
            except:
                font = ImageFont.load_default()
            
            draw.text((50, 200), "JARVIS Vision System", fill='white', font=font)
            draw.text((50, 250), "Server Mode - No GUI Available", fill='white', font=font)
            draw.text((50, 300), f"Timestamp: {time.strftime('%Y-%m-%d %H:%M:%S')}", fill='white', font=font)
            draw.text((50, 350), "Creating virtual screenshot for analysis", fill='white', font=font)
            
            # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
            import io
            buffer = io.BytesIO()
            img.save(buffer, format='PNG')
            image_base64 = base64.b64encode(buffer.getvalue()).decode('utf-8')
            
            logger.info("–°–æ–∑–¥–∞–Ω –¥–µ–º–æ-—Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —Å—Ä–µ–¥—ã")
            return image_base64
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ-—Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            return None
    
    def analyze_screenshot(self, screenshot: Dict[str, Any]) -> Optional[VisionAnalysis]:
        """–ê–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
        try:
            # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_data = screenshot["image_data"]
            timestamp = screenshot["timestamp"]
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            screen_elements = self.detect_interface_elements(image_data)
            
            # –ò—â–µ–º –ø—Ä–æ–±–ª–µ–º—ã
            issues_detected = self.detect_issues(screen_elements)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            suggestions = self.generate_suggestions(issues_detected, screen_elements)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            confidence = self.calculate_confidence(screen_elements, issues_detected)
            
            analysis = VisionAnalysis(
                timestamp=timestamp,
                screen_elements=screen_elements,
                issues_detected=issues_detected,
                suggestions=suggestions,
                confidence=confidence
            )
            
            return analysis
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            return None
    
    def detect_interface_elements(self, image_data: str) -> List[Dict[str, Any]]:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        elements = []
        
        try:
            # –ë–∞–∑–æ–≤–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Å –ø–æ–º–æ—â—å—é OpenCV)
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_bytes = base64.b64decode(image_data)
            image_size = len(image_bytes)
            
            # –ë–∞–∑–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            elements.extend([
                {
                    "type": "window",
                    "position": {"x": 0, "y": 0},
                    "size": {"width": 800, "height": 600},
                    "confidence": 0.9
                },
                {
                    "type": "browser_tab",
                    "position": {"x": 0, "y": 0},
                    "size": {"width": 800, "height": 30},
                    "confidence": 0.8
                }
            ])
            
            # –ò—â–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–∑–∞–≥–æ–ª–æ–≤–∫–∏, –∫–Ω–æ–ø–∫–∏, –ø–æ–ª—è –≤–≤–æ–¥–∞)
            elements.extend([
                {
                    "type": "button",
                    "text": "–°–∞–º–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ",
                    "position": {"x": 100, "y": 200},
                    "size": {"width": 150, "height": 40},
                    "confidence": 0.7,
                    "color": "blue"
                },
                {
                    "type": "button", 
                    "text": "–°–∞–º–æ—É–ª—É—á—à–µ–Ω–∏–µ",
                    "position": {"x": 270, "y": 200},
                    "size": {"width": 150, "height": 40},
                    "confidence": 0.7,
                    "color": "green"
                },
                {
                    "type": "log_area",
                    "position": {"x": 50, "y": 300},
                    "size": {"width": 400, "height": 200},
                    "confidence": 0.8,
                    "background_color": "dark"
                }
            ])
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {e}")
        
        return elements
    
    def detect_issues(self, elements: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
        issues = []
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫
            buttons = [e for e in elements if e.get("type") == "button"]
            if len(buttons) < 3:
                issues.append({
                    "type": "missing_elements",
                    "severity": "medium",
                    "description": "–ú–∞–ª–æ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                    "suggestion": "–î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
                })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–ª–∞—Å—Ç—å –ª–æ–≥–æ–≤
            log_areas = [e for e in elements if e.get("type") == "log_area"]
            if not log_areas:
                issues.append({
                    "type": "missing_logs",
                    "severity": "high",
                    "description": "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –æ–±–ª–∞—Å—Ç—å –ª–æ–≥–æ–≤",
                    "suggestion": "–î–æ–±–∞–≤–∏—Ç—å –ø–∞–Ω–µ–ª—å –ª–æ–≥–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
                })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É
            blue_buttons = [b for b in buttons if b.get("color") == "blue"]
            green_buttons = [b for b in buttons if b.get("color") == "green"]
            
            if not blue_buttons and not green_buttons:
                issues.append({
                    "type": "color_scheme",
                    "severity": "low",
                    "description": "–ú–æ–Ω–æ—Ç–æ–Ω–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞",
                    "suggestion": "–î–æ–±–∞–≤–∏—Ç—å —Ü–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫"
                })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            for element in elements:
                size = element.get("size", {})
                width = size.get("width", 0)
                height = size.get("height", 0)
                
                if width < 50 or height < 20:
                    issues.append({
                        "type": "small_element",
                        "severity": "medium",
                        "description": f"–°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç: {element.get('type', 'unknown')}",
                        "suggestion": "–£–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –ª—É—á—à–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"
                    })
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º: {e}")
        
        return issues
    
    def generate_suggestions(self, issues: List[Dict[str, Any]], elements: List[Dict[str, Any]]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"""
        suggestions = []
        
        try:
            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
            for issue in issues:
                if issue["type"] == "missing_elements":
                    suggestions.append("üí° –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏: '–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', '–ü–æ–º–æ—â—å'")
                elif issue["type"] == "missing_logs":
                    suggestions.append("üìù –î–æ–±–∞–≤–∏—Ç—å –ø–∞–Ω–µ–ª—å –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
                elif issue["type"] == "color_scheme":
                    suggestions.append("üé® –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ: –∫—Ä–∞—Å–Ω—ã–π –¥–ª—è –æ–ø–∞—Å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π, –∑–µ–ª–µ–Ω—ã–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö")
                elif issue["type"] == "small_element":
                    suggestions.append("üìè –£–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–æ–∫ –¥–æ –º–∏–Ω–∏–º—É–º 44x44 –ø–∏–∫—Å–µ–ª—è")
            
            # –û–±—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é UX
            suggestions.extend([
                "üöÄ –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏",
                "üìä –î–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π",
                "üîî –î–æ–±–∞–≤–∏—Ç—å –∑–≤—É–∫–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π",
                "üì± –°–¥–µ–ª–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤",
                "‚å®Ô∏è –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"
            ])
            
            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            button_count = len([e for e in elements if e.get("type") == "button"])
            if button_count > 5:
                suggestions.append("üóÇÔ∏è –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –∫–Ω–æ–ø–æ–∫ –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {e}")
        
        return suggestions[:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    
    def calculate_confidence(self, elements: List[Dict[str, Any]], issues: List[Dict[str, Any]]) -> float:
        """–†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –∞–Ω–∞–ª–∏–∑–µ"""
        try:
            # –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            confidence = 0.5
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –∫–∞–∂–¥—ã–π –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
            confidence += len(elements) * 0.05
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
            confidence += len(issues) * 0.1
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ç 0 –¥–æ 1
            confidence = max(0.0, min(1.0, confidence))
            
            return confidence
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {e}")
            return 0.5
    
    def process_analysis_results(self, analysis: VisionAnalysis):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            # –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            critical_issues = [i for i in analysis.issues_detected if i.get("severity") == "high"]
            
            if critical_issues:
                logger.warning(f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ: {len(critical_issues)}")
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                if self.core:
                    task_data = {
                        "type": "interface_improvement",
                        "priority": 8,
                        "parameters": {
                            "issues": critical_issues,
                            "suggestions": analysis.suggestions[:3],
                            "timestamp": analysis.timestamp
                        }
                    }
                    
                    from jarvis_core import Task
                    task = Task(
                        id=f"vision_fix_{int(time.time())}",
                        type=task_data["type"],
                        priority=task_data["priority"],
                        status="pending",
                        created_at=datetime.now().isoformat(),
                        parameters=task_data["parameters"]
                    )
                    
                    self.core.tasks_queue.append(task)
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {task.id}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
            self.last_analysis = analysis
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            logger.info(f"üëÅÔ∏è –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {len(analysis.screen_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤, {len(analysis.issues_detected)} –ø—Ä–æ–±–ª–µ–º, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis.confidence:.2f}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    def get_vision_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –∑—Ä–µ–Ω–∏—è"""
        return {
            "vision_enabled": self.vision_enabled,
            "screenshot_interval": self.screenshot_interval,
            "total_analyses": len(self.analysis_results),
            "last_analysis": {
                "timestamp": self.last_analysis.timestamp if self.last_analysis else None,
                "elements_detected": len(self.last_analysis.screen_elements) if self.last_analysis else 0,
                "issues_found": len(self.last_analysis.issues_detected) if self.last_analysis else 0,
                "confidence": self.last_analysis.confidence if self.last_analysis else 0.0
            } if self.last_analysis else None,
            "recent_analyses": [
                {
                    "timestamp": a.timestamp,
                    "elements": len(a.screen_elements),
                    "issues": len(a.issues_detected),
                    "confidence": a.confidence
                }
                for a in self.analysis_results[-5:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∞–Ω–∞–ª–∏–∑–æ–≤
            ]
        }
    
    def get_current_suggestions(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
        if self.last_analysis:
            return self.last_analysis.suggestions
        return []
    
    def get_detected_issues(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º"""
        if self.last_analysis:
            return self.last_analysis.issues_detected
        return []
    
    def stop_vision_system(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∑—Ä–µ–Ω–∏—è"""
        self.vision_enabled = False
        logger.info("üõë –°–∏—Å—Ç–µ–º–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")





JARVIS Vision System
–°–∏—Å—Ç–µ–º–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""

import os
import sys
import json
import time
import asyncio
import logging
import base64
import io
import subprocess
from datetime import datetime
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
import threading
import queue

logger = logging.getLogger(__name__)

@dataclass
class VisionAnalysis:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    timestamp: str
    screen_elements: List[Dict[str, Any]]
    issues_detected: List[Dict[str, Any]]
    suggestions: List[str]
    confidence: float

class JarvisVision:
    """–°–∏—Å—Ç–µ–º–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è JARVIS"""
    
    def __init__(self, core):
        self.core = core
        self.screenshot_queue = queue.Queue()
        self.analysis_results = []
        self.vision_enabled = True
        self.screenshot_interval = 5  # —Å–µ–∫—É–Ω–¥
        self.last_analysis = None
        self.virtual_display = None
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥–∏—Å–ø–ª–µ–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        self.setup_virtual_display()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É –∑—Ä–µ–Ω–∏—è
        self.start_vision_system()
    
    def setup_virtual_display(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –¥–∏—Å–ø–ª–µ—è –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —Å—Ä–µ–¥—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ DISPLAY
            if os.getenv('DISPLAY'):
                logger.info(f"‚úÖ –î–∏—Å–ø–ª–µ–π —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {os.getenv('DISPLAY')}")
                return
            
            # –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥–∏—Å–ø–ª–µ–π
            logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –¥–∏—Å–ø–ª–µ—è...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Xvfb –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            try:
                result = subprocess.run(['Xvfb', ':99', '-screen', '0', '1024x768x24'], 
                                      capture_output=True, timeout=5)
                if result.returncode == 0:
                    os.environ['DISPLAY'] = ':99'
                    logger.info("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥–∏—Å–ø–ª–µ–π Xvfb –∑–∞–ø—É—â–µ–Ω –Ω–∞ :99")
                    return
            except FileNotFoundError:
                logger.warning("‚ö†Ô∏è Xvfb –Ω–µ –Ω–∞–π–¥–µ–Ω")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Xvfb: {e}")
            
            # –ï—Å–ª–∏ Xvfb –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-—Ä–µ–∂–∏–º
            logger.info("üñºÔ∏è –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º (–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã)")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏—Å–ø–ª–µ—è: {e}")
        
    def start_vision_system(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è"""
        # –ü–æ—Ç–æ–∫ –∑–∞—Ö–≤–∞—Ç–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        screenshot_thread = threading.Thread(
            target=self.run_screenshot_capture,
            daemon=True
        )
        screenshot_thread.start()
        
        # –ü–æ—Ç–æ–∫ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        analysis_thread = threading.Thread(
            target=self.run_image_analysis,
            daemon=True
        )
        analysis_thread.start()
        
        logger.info("üëÅÔ∏è –°–∏—Å—Ç–µ–º–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è JARVIS –∑–∞–ø—É—â–µ–Ω–∞")
    
    def run_screenshot_capture(self):
        """–ó–∞—Ö–≤–∞—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤"""
        while self.vision_enabled:
            try:
                # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
                screenshot_data = self.capture_screenshot()
                if screenshot_data:
                    self.screenshot_queue.put({
                        "timestamp": datetime.now().isoformat(),
                        "image_data": screenshot_data
                    })
                
                time.sleep(self.screenshot_interval)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
                time.sleep(10)
    
    def run_image_analysis(self):
        """–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        while self.vision_enabled:
            try:
                if not self.screenshot_queue.empty():
                    screenshot = self.screenshot_queue.get()
                    analysis = self.analyze_screenshot(screenshot)
                    
                    if analysis:
                        self.analysis_results.append(analysis)
                        self.process_analysis_results(analysis)
                        
                        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
                        if len(self.analysis_results) > 100:
                            self.analysis_results = self.analysis_results[-50:]
                
                time.sleep(1)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                time.sleep(5)
    
    def capture_screenshot(self) -> Optional[str]:
        """–ó–∞—Ö–≤–∞—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —ç–∫—Ä–∞–Ω–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            display = os.getenv('DISPLAY')
            if not display:
                logger.info("–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ-—Å–∫—Ä–∏–Ω—à–æ—Ç")
                return self.create_demo_screenshot()
            
            logger.info(f"–ó–∞—Ö–≤–∞—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å –¥–∏—Å–ø–ª–µ—è: {display}")
            
            # –ü—Ä–æ–±—É–µ–º scrot (–±—ã—Å—Ç—Ä–µ–µ –∏ –Ω–∞–¥–µ–∂–Ω–µ–µ)
            try:
                result = subprocess.run([
                    'scrot', '-q', '80', '-o', '/tmp/jarvis_screenshot.png'
                ], capture_output=True, timeout=10)
                
                if result.returncode == 0 and os.path.exists('/tmp/jarvis_screenshot.png'):
                    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏ –∫–æ–¥–∏—Ä—É–µ–º –≤ base64
                    with open('/tmp/jarvis_screenshot.png', 'rb') as f:
                        image_data = f.read()
                    image_base64 = base64.b64encode(image_data).decode('utf-8')
                    os.remove('/tmp/jarvis_screenshot.png')  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    logger.info("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–¥–µ–ª–∞–Ω —Å –ø–æ–º–æ—â—å—é scrot")
                    return image_base64
            except Exception as e:
                logger.warning(f"scrot –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
            
            # –ü—Ä–æ–±—É–µ–º ImageMagick
            result = subprocess.run([
                'import', '-window', 'root', '-resize', '800x600', 'png:-'
            ], capture_output=True, timeout=10)
            
            if result.returncode == 0:
                # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
                image_base64 = base64.b64encode(result.stdout).decode('utf-8')
                return image_base64
            else:
                # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ xwd
                result = subprocess.run([
                    'xwd', '-root', '-silent'
                ], capture_output=True, timeout=10)
                
                if result.returncode == 0:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º xwd –≤ png
                    convert_result = subprocess.run([
                        'convert', 'xwd:-', 'png:-'
                    ], input=result.stdout, capture_output=True, timeout=10)
                    
                    if convert_result.returncode == 0:
                        image_base64 = base64.b64encode(convert_result.stdout).decode('utf-8')
                        return image_base64
                
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ö–≤–∞—Ç–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç")
                return None
                
        except subprocess.TimeoutExpired:
            logger.warning("–¢–∞–π–º–∞—É—Ç –∑–∞—Ö–≤–∞—Ç–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")
            return None
        except FileNotFoundError:
            logger.warning("ImageMagick –∏–ª–∏ xwd –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return self.create_demo_screenshot()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            return self.create_demo_screenshot()
    
    def create_demo_screenshot(self) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ-—Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —Å—Ä–µ–¥—ã"""
        try:
            from PIL import Image, ImageDraw, ImageFont
            
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 800x600
            img = Image.new('RGB', (800, 600), color='#667eea')
            draw = ImageDraw.Draw(img)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            try:
                font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 30)
            except:
                font = ImageFont.load_default()
            
            draw.text((50, 200), "JARVIS Vision System", fill='white', font=font)
            draw.text((50, 250), "Server Mode - No GUI Available", fill='white', font=font)
            draw.text((50, 300), f"Timestamp: {time.strftime('%Y-%m-%d %H:%M:%S')}", fill='white', font=font)
            draw.text((50, 350), "Creating virtual screenshot for analysis", fill='white', font=font)
            
            # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
            import io
            buffer = io.BytesIO()
            img.save(buffer, format='PNG')
            image_base64 = base64.b64encode(buffer.getvalue()).decode('utf-8')
            
            logger.info("–°–æ–∑–¥–∞–Ω –¥–µ–º–æ-—Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —Å—Ä–µ–¥—ã")
            return image_base64
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ-—Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            return None
    
    def analyze_screenshot(self, screenshot: Dict[str, Any]) -> Optional[VisionAnalysis]:
        """–ê–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
        try:
            # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_data = screenshot["image_data"]
            timestamp = screenshot["timestamp"]
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            screen_elements = self.detect_interface_elements(image_data)
            
            # –ò—â–µ–º –ø—Ä–æ–±–ª–µ–º—ã
            issues_detected = self.detect_issues(screen_elements)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            suggestions = self.generate_suggestions(issues_detected, screen_elements)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            confidence = self.calculate_confidence(screen_elements, issues_detected)
            
            analysis = VisionAnalysis(
                timestamp=timestamp,
                screen_elements=screen_elements,
                issues_detected=issues_detected,
                suggestions=suggestions,
                confidence=confidence
            )
            
            return analysis
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            return None
    
    def detect_interface_elements(self, image_data: str) -> List[Dict[str, Any]]:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        elements = []
        
        try:
            # –ë–∞–∑–æ–≤–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Å –ø–æ–º–æ—â—å—é OpenCV)
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_bytes = base64.b64decode(image_data)
            image_size = len(image_bytes)
            
            # –ë–∞–∑–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            elements.extend([
                {
                    "type": "window",
                    "position": {"x": 0, "y": 0},
                    "size": {"width": 800, "height": 600},
                    "confidence": 0.9
                },
                {
                    "type": "browser_tab",
                    "position": {"x": 0, "y": 0},
                    "size": {"width": 800, "height": 30},
                    "confidence": 0.8
                }
            ])
            
            # –ò—â–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–∑–∞–≥–æ–ª–æ–≤–∫–∏, –∫–Ω–æ–ø–∫–∏, –ø–æ–ª—è –≤–≤–æ–¥–∞)
            elements.extend([
                {
                    "type": "button",
                    "text": "–°–∞–º–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ",
                    "position": {"x": 100, "y": 200},
                    "size": {"width": 150, "height": 40},
                    "confidence": 0.7,
                    "color": "blue"
                },
                {
                    "type": "button", 
                    "text": "–°–∞–º–æ—É–ª—É—á—à–µ–Ω–∏–µ",
                    "position": {"x": 270, "y": 200},
                    "size": {"width": 150, "height": 40},
                    "confidence": 0.7,
                    "color": "green"
                },
                {
                    "type": "log_area",
                    "position": {"x": 50, "y": 300},
                    "size": {"width": 400, "height": 200},
                    "confidence": 0.8,
                    "background_color": "dark"
                }
            ])
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {e}")
        
        return elements
    
    def detect_issues(self, elements: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
        issues = []
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫
            buttons = [e for e in elements if e.get("type") == "button"]
            if len(buttons) < 3:
                issues.append({
                    "type": "missing_elements",
                    "severity": "medium",
                    "description": "–ú–∞–ª–æ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                    "suggestion": "–î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
                })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–ª–∞—Å—Ç—å –ª–æ–≥–æ–≤
            log_areas = [e for e in elements if e.get("type") == "log_area"]
            if not log_areas:
                issues.append({
                    "type": "missing_logs",
                    "severity": "high",
                    "description": "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –æ–±–ª–∞—Å—Ç—å –ª–æ–≥–æ–≤",
                    "suggestion": "–î–æ–±–∞–≤–∏—Ç—å –ø–∞–Ω–µ–ª—å –ª–æ–≥–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
                })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É
            blue_buttons = [b for b in buttons if b.get("color") == "blue"]
            green_buttons = [b for b in buttons if b.get("color") == "green"]
            
            if not blue_buttons and not green_buttons:
                issues.append({
                    "type": "color_scheme",
                    "severity": "low",
                    "description": "–ú–æ–Ω–æ—Ç–æ–Ω–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞",
                    "suggestion": "–î–æ–±–∞–≤–∏—Ç—å —Ü–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫"
                })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            for element in elements:
                size = element.get("size", {})
                width = size.get("width", 0)
                height = size.get("height", 0)
                
                if width < 50 or height < 20:
                    issues.append({
                        "type": "small_element",
                        "severity": "medium",
                        "description": f"–°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç: {element.get('type', 'unknown')}",
                        "suggestion": "–£–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –ª—É—á—à–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"
                    })
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º: {e}")
        
        return issues
    
    def generate_suggestions(self, issues: List[Dict[str, Any]], elements: List[Dict[str, Any]]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"""
        suggestions = []
        
        try:
            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
            for issue in issues:
                if issue["type"] == "missing_elements":
                    suggestions.append("üí° –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏: '–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', '–ü–æ–º–æ—â—å'")
                elif issue["type"] == "missing_logs":
                    suggestions.append("üìù –î–æ–±–∞–≤–∏—Ç—å –ø–∞–Ω–µ–ª—å –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
                elif issue["type"] == "color_scheme":
                    suggestions.append("üé® –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ: –∫—Ä–∞—Å–Ω—ã–π –¥–ª—è –æ–ø–∞—Å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π, –∑–µ–ª–µ–Ω—ã–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö")
                elif issue["type"] == "small_element":
                    suggestions.append("üìè –£–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–æ–∫ –¥–æ –º–∏–Ω–∏–º—É–º 44x44 –ø–∏–∫—Å–µ–ª—è")
            
            # –û–±—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é UX
            suggestions.extend([
                "üöÄ –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏",
                "üìä –î–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π",
                "üîî –î–æ–±–∞–≤–∏—Ç—å –∑–≤—É–∫–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π",
                "üì± –°–¥–µ–ª–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤",
                "‚å®Ô∏è –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"
            ])
            
            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            button_count = len([e for e in elements if e.get("type") == "button"])
            if button_count > 5:
                suggestions.append("üóÇÔ∏è –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –∫–Ω–æ–ø–æ–∫ –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {e}")
        
        return suggestions[:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    
    def calculate_confidence(self, elements: List[Dict[str, Any]], issues: List[Dict[str, Any]]) -> float:
        """–†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –∞–Ω–∞–ª–∏–∑–µ"""
        try:
            # –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            confidence = 0.5
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –∫–∞–∂–¥—ã–π –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
            confidence += len(elements) * 0.05
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
            confidence += len(issues) * 0.1
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ç 0 –¥–æ 1
            confidence = max(0.0, min(1.0, confidence))
            
            return confidence
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {e}")
            return 0.5
    
    def process_analysis_results(self, analysis: VisionAnalysis):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            # –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            critical_issues = [i for i in analysis.issues_detected if i.get("severity") == "high"]
            
            if critical_issues:
                logger.warning(f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ: {len(critical_issues)}")
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                if self.core:
                    task_data = {
                        "type": "interface_improvement",
                        "priority": 8,
                        "parameters": {
                            "issues": critical_issues,
                            "suggestions": analysis.suggestions[:3],
                            "timestamp": analysis.timestamp
                        }
                    }
                    
                    from jarvis_core import Task
                    task = Task(
                        id=f"vision_fix_{int(time.time())}",
                        type=task_data["type"],
                        priority=task_data["priority"],
                        status="pending",
                        created_at=datetime.now().isoformat(),
                        parameters=task_data["parameters"]
                    )
                    
                    self.core.tasks_queue.append(task)
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {task.id}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
            self.last_analysis = analysis
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            logger.info(f"üëÅÔ∏è –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {len(analysis.screen_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤, {len(analysis.issues_detected)} –ø—Ä–æ–±–ª–µ–º, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis.confidence:.2f}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    def get_vision_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –∑—Ä–µ–Ω–∏—è"""
        return {
            "vision_enabled": self.vision_enabled,
            "screenshot_interval": self.screenshot_interval,
            "total_analyses": len(self.analysis_results),
            "last_analysis": {
                "timestamp": self.last_analysis.timestamp if self.last_analysis else None,
                "elements_detected": len(self.last_analysis.screen_elements) if self.last_analysis else 0,
                "issues_found": len(self.last_analysis.issues_detected) if self.last_analysis else 0,
                "confidence": self.last_analysis.confidence if self.last_analysis else 0.0
            } if self.last_analysis else None,
            "recent_analyses": [
                {
                    "timestamp": a.timestamp,
                    "elements": len(a.screen_elements),
                    "issues": len(a.issues_detected),
                    "confidence": a.confidence
                }
                for a in self.analysis_results[-5:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∞–Ω–∞–ª–∏–∑–æ–≤
            ]
        }
    
    def get_current_suggestions(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
        if self.last_analysis:
            return self.last_analysis.suggestions
        return []
    
    def get_detected_issues(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º"""
        if self.last_analysis:
            return self.last_analysis.issues_detected
        return []
    
    def stop_vision_system(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∑—Ä–µ–Ω–∏—è"""
        self.vision_enabled = False
        logger.info("üõë –°–∏—Å—Ç–µ–º–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

