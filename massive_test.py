#!/usr/bin/env python3
"""
–ú–∞—Å—Å–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º MENTOR x1000
"""

import asyncio
import aiohttp
import time
import json
from datetime import datetime

async def test_all_systems():
    """–¢–µ—Å—Ç –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"""
    print("üöÄ –ó–ê–ü–£–°–ö –ú–ê–°–°–û–í–û–ì–û –¢–ï–°–¢–ê –í–°–ï–• –°–ò–°–¢–ï–ú!")
    print("=" * 60)
    
    systems = {
        "–ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞": "http://localhost:8081",
        "AI —Å–∏—Å—Ç–µ–º–∞ (Llama)": "http://localhost:8082", 
        "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è": "http://localhost:8083",
        "–ú–ï–ì–ê-—Å–∏—Å—Ç–µ–º–∞ x1000": "http://localhost:9000"
    }
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    print("üîç –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º")
    async with aiohttp.ClientSession() as session:
        for name, url in systems.items():
            try:
                start = time.time()
                async with session.get(f"{url}/") as response:
                    duration = time.time() - start
                    status = "‚úÖ –†–ê–ë–û–¢–ê–ï–¢" if response.status == 200 else f"‚ùå {response.status}"
                    print(f"   {name}: {status} ({duration:.3f}—Å)")
            except Exception as e:
                print(f"   {name}: ‚ùå –ù–ï–î–û–°–¢–£–ü–ù–ê ({e})")
    
    print()
    
    # –¢–µ—Å—Ç 2: API endpoints
    print("üîó –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints")
    api_endpoints = [
        ("8081", "/api/system/status", "–ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ API"),
        ("8082", "/api/system/status", "AI —Å–∏—Å—Ç–µ–º–∞ API"),
        ("8083", "/api/dashboard/status", "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è API"),
        ("9000", "/api/mega/status", "–ú–ï–ì–ê-—Å–∏—Å—Ç–µ–º–∞ API")
    ]
    
    async with aiohttp.ClientSession() as session:
        for port, endpoint, name in api_endpoints:
            try:
                start = time.time()
                async with session.get(f"http://localhost:{port}{endpoint}") as response:
                    duration = time.time() - start
                    if response.status == 200:
                        data = await response.json()
                        agents = data.get("total_agents", data.get("active_agents", 0))
                        print(f"   {name}: ‚úÖ OK ({agents} –∞–≥–µ–Ω—Ç–æ–≤, {duration:.3f}—Å)")
                    else:
                        print(f"   {name}: ‚ùå {response.status}")
            except Exception as e:
                print(f"   {name}: ‚ùå –û—à–∏–±–∫–∞ ({e})")
    
    print()
    
    # –¢–µ—Å—Ç 3: –ê–≥–µ–Ω—Ç—ã
    print("ü§ñ –¢–ï–°–¢ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤")
    agent_tests = [
        ("8081", "–ü—Ä–∏–≤–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –∞–≥–µ–Ω—Ç!", "–ü—Ä–æ—Å—Ç—ã–µ –∞–≥–µ–Ω—Ç—ã"),
        ("8082", "–ü—Ä–∏–≤–µ—Ç AI –∞–≥–µ–Ω—Ç —Å Llama!", "AI –∞–≥–µ–Ω—Ç—ã"),
        ("9000", {"type": "code", "message": "–¢–µ—Å—Ç –º–µ–≥–∞-–∞–≥–µ–Ω—Ç–∞", "priority": "high"}, "–ú–ï–ì–ê-–∞–≥–µ–Ω—Ç—ã")
    ]
    
    async with aiohttp.ClientSession() as session:
        for port, message, name in agent_tests:
            try:
                start = time.time()
                
                if port == "9000":
                    # –ú–µ–≥–∞-—Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥—Ä—É–≥–æ–π endpoint
                    async with session.post(
                        f"http://localhost:{port}/api/mega/task",
                        json=message,
                        headers={"Content-Type": "application/json"}
                    ) as response:
                        duration = time.time() - start
                        if response.status == 200:
                            data = await response.json()
                            agent_response = data.get("response", "")[:50]
                            print(f"   {name}: ‚úÖ –û—Ç–≤–µ—Ç–∏–ª –∑–∞ {duration:.2f}—Å - '{agent_response}...'")
                        else:
                            print(f"   {name}: ‚ùå {response.status}")
                else:
                    # –û–±—ã—á–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
                    async with session.post(
                        f"http://localhost:{port}/api/chat/send",
                        json={"message": message, "user_id": "test"},
                        headers={"Content-Type": "application/json"}
                    ) as response:
                        duration = time.time() - start
                        if response.status == 200:
                            data = await response.json()
                            agent_response = data["response"]["response"][:50]
                            print(f"   {name}: ‚úÖ –û—Ç–≤–µ—Ç–∏–ª –∑–∞ {duration:.2f}—Å - '{agent_response}...'")
                        else:
                            print(f"   {name}: ‚ùå {response.status}")
                            
            except Exception as e:
                print(f"   {name}: ‚ùå –û—à–∏–±–∫–∞ ({e})")
    
    print()
    
    # –¢–µ—Å—Ç 4: –ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç –º–µ–≥–∞-—Å–∏—Å—Ç–µ–º—ã
    print("‚ö° –¢–ï–°–¢ 4: –ù–ê–ì–†–£–ó–û–ß–ù–´–ô –¢–ï–°–¢ –ú–ï–ì–ê-–°–ò–°–¢–ï–ú–´")
    print("   –û—Ç–ø—Ä–∞–≤–ª—è—é 20 –∑–∞–¥–∞—á –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ...")
    
    async with aiohttp.ClientSession() as session:
        tasks = []
        start_time = time.time()
        
        for i in range(20):
            task = session.post(
                "http://localhost:9000/api/mega/task",
                json={
                    "type": "test",
                    "message": f"–ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç #{i+1}",
                    "priority": "normal"
                }
            )
            tasks.append(task)
        
        try:
            responses = await asyncio.gather(*tasks, return_exceptions=True)
            total_time = time.time() - start_time
            
            successful = 0
            for response in responses:
                if not isinstance(response, Exception) and hasattr(response, 'status'):
                    if response.status == 200:
                        successful += 1
                    response.close()
            
            print(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {successful}/20 –∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ {total_time:.2f}—Å")
            print(f"   üìä –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {20/total_time:.1f} –∑–∞–¥–∞—á/—Å–µ–∫")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: {e}")
    
    print()
    
    # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏ –ª–æ–≥–æ–≤
    print("üìÅ –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏ –ª–æ–≥–æ–≤")
    
    import os
    
    files_to_check = [
        "/workspace/mentor_system.log",
        "/workspace/real_ai_mentor.log", 
        "/workspace/self_improvement.log",
        "/workspace/visual_monitor.log",
        "/workspace/cloud_deployment_report.json"
    ]
    
    for file_path in files_to_check:
        if os.path.exists(file_path):
            size = os.path.getsize(file_path)
            print(f"   ‚úÖ {os.path.basename(file_path)}: {size:,} –±–∞–π—Ç")
        else:
            print(f"   ‚ùå {os.path.basename(file_path)}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Å–Ω–∏–º–∫–∏
    screenshots_dir = "/workspace/visual_screenshots"
    if os.path.exists(screenshots_dir):
        screenshots = [f for f in os.listdir(screenshots_dir) if f.endswith('.png')]
        print(f"   üì∏ –í–∏–∑—É–∞–ª—å–Ω—ã—Ö —Å–Ω–∏–º–∫–æ–≤: {len(screenshots)}")
    
    print()
    print("üéØ –ú–ê–°–°–û–í–´–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")
    print("=" * 60)

if __name__ == "__main__":
    asyncio.run(test_all_systems())