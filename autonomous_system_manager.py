#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∏—Å—Ç–µ–º—ã
–£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–æ–π, –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è
"""

import asyncio
import json
import logging
import time
import subprocess
import requests
from datetime import datetime
from typing import Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class AutonomousSystemManager:
    """–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self, server_url="http://5.129.198.210:8080"):
        self.server_url = server_url
        self.running = False
        self.check_interval = 30  # —Å–µ–∫—É–Ω–¥
        self.last_health_check = None
        self.consecutive_failures = 0
        self.max_failures = 3
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã...")
        self.running = True
        
        while self.running:
            try:
                await self._health_check()
                await self._monitor_system()
                await self._make_autonomous_decisions()
                await asyncio.sleep(self.check_interval)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ: {e}")
                await asyncio.sleep(10)
    
    async def _health_check(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            response = requests.get(f"{self.server_url}/api/system/status", timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                status = data.get('system_status', 'unknown')
                
                if status == 'running':
                    self.consecutive_failures = 0
                    logger.info(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–¥–æ—Ä–æ–≤–∞: {status}")
                else:
                    self.consecutive_failures += 1
                    logger.warning(f"‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≤ –ø–æ—Ä—è–¥–∫–µ: {status}")
                    
                self.last_health_check = datetime.now()
                
            else:
                self.consecutive_failures += 1
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {response.status_code}")
                
        except Exception as e:
            self.consecutive_failures += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
    
    async def _monitor_system(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
            result = subprocess.run(['ps', 'aux'], capture_output=True, text=True)
            if 'start_multi_agent_system.py' in result.stdout:
                logger.info("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —Å–∏—Å—Ç–µ–º—ã –∑–∞–ø—É—â–µ–Ω")
            else:
                logger.error("‚ùå –ü—Ä–æ—Ü–µ—Å—Å —Å–∏—Å—Ç–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await self._restart_system()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç
            result = subprocess.run(['ss', '-tlnp'], capture_output=True, text=True)
            if ':8080' in result.stdout:
                logger.info("‚úÖ –ü–æ—Ä—Ç 8080 –∞–∫—Ç–∏–≤–µ–Ω")
            else:
                logger.error("‚ùå –ü–æ—Ä—Ç 8080 –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
                await self._restart_system()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    async def _make_autonomous_decisions(self):
        """–ü—Ä–∏–Ω—è—Ç–∏–µ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π"""
        try:
            # –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –ø–∞–¥–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–¥—Ä—è–¥ - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
            if self.consecutive_failures >= self.max_failures:
                logger.warning(f"üîÑ –°–∏—Å—Ç–µ–º–∞ –ø–∞–¥–∞–µ—Ç {self.consecutive_failures} —Ä–∞–∑ –ø–æ–¥—Ä—è–¥, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º...")
                await self._restart_system()
                self.consecutive_failures = 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É
            await self._check_for_updates()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏
            await self._cleanup_logs()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π: {e}")
    
    async def _restart_system(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("üîÑ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã...")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É
            subprocess.run(['/home/mentor/manage_agents.sh', 'stop'], check=True)
            await asyncio.sleep(5)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
            subprocess.run(['/home/mentor/manage_agents.sh', 'start'], check=True)
            await asyncio.sleep(10)
            
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")
    
    async def _check_for_updates(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ –∫–æ–º–º–∏—Ç—ã –≤ git
            result = subprocess.run(['git', 'status', '--porcelain'], 
                                 capture_output=True, text=True, cwd='/home/mentor')
            
            if result.stdout.strip():
                logger.info("üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥–µ")
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                
        except Exception as e:
            logger.debug(f"Git –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    async def _cleanup_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"""
        try:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
            subprocess.run(['find', '/home/mentor', '-name', '*.log', 
                          '-mtime', '+7', '-delete'], check=True)
            logger.info("üßπ –°—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã")
            
        except Exception as e:
            logger.debug(f"–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤: {e}")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞...")
        self.running = False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    manager = AutonomousSystemManager()
    
    try:
        await manager.start()
    except KeyboardInterrupt:
        logger.info("üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
        manager.stop()

if __name__ == "__main__":
    asyncio.run(main())



