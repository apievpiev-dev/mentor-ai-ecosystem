#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∫–∞–∫ API —Å–µ—Ä–≤–∏—Å—ã
"""

import asyncio
import json
import logging
import time
import uuid
import subprocess
import shutil
from typing import Dict, List, Any, Optional
from datetime import datetime
from pathlib import Path
import docker
import yaml
import requests
from aiohttp import web, ClientSession
import aiohttp_cors

from neural_network_creator_agent import neural_network_creator
from autonomous_neural_network_trainer import autonomous_trainer

logger = logging.getLogger(__name__)

class NeuralNetworkDeploymentSystem:
    """–°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π"""
    
    def __init__(self, host: str = "0.0.0.0", port: int = 8082):
        self.host = host
        self.port = port
        self.deployed_services = {}
        self.docker_client = None
        self.deployment_queue = []
        self.active_deployments = {}
        self._setup_docker()
        self._setup_directories()
    
    def _setup_docker(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            self.docker_client = docker.from_env()
            logger.info("üê≥ Docker –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Docker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.docker_client = None
    
    def _setup_directories(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        directories = [
            "/workspace/neural_networks/deployments",
            "/workspace/neural_networks/dockerfiles",
            "/workspace/neural_networks/api_templates",
            "/workspace/neural_networks/deployed_services",
            "/workspace/neural_networks/nginx_configs"
        ]
        
        for directory in directories:
            Path(directory).mkdir(parents=True, exist_ok=True)
    
    async def deploy_neural_network(self, network_name: str, deployment_config: Dict[str, Any] = None) -> Dict[str, Any]:
        """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∫–∞–∫ API —Å–µ—Ä–≤–∏—Å"""
        try:
            deployment_id = str(uuid.uuid4())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –æ–±—É—á–µ–Ω–∞
            networks_info = await neural_network_creator._handle_list_networks({})
            network_info = next((n for n in networks_info.get("networks", []) if n["name"] == network_name), None)
            
            if not network_info:
                return {"error": f"–°–µ—Ç—å {network_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
            
            if network_info["status"] != "trained":
                return {"error": f"–°–µ—Ç—å {network_name} –Ω–µ –æ–±—É—á–µ–Ω–∞"}
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
            if not deployment_config:
                deployment_config = await self._generate_deployment_config(network_info)
            
            # –°–æ–∑–¥–∞–µ–º Dockerfile
            dockerfile_path = await self._create_dockerfile(network_name, network_info, deployment_config)
            
            # –°–æ–∑–¥–∞–µ–º API —Å–µ—Ä–≤–∏—Å
            api_service_path = await self._create_api_service(network_name, network_info, deployment_config)
            
            # –°–æ–∑–¥–∞–µ–º docker-compose —Ñ–∞–π–ª
            compose_path = await self._create_docker_compose(network_name, deployment_config)
            
            # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å
            if self.docker_client:
                deployment_result = await self._deploy_with_docker(network_name, deployment_config)
            else:
                deployment_result = await self._deploy_with_python(network_name, deployment_config)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏
            deployment_info = {
                "id": deployment_id,
                "network_name": network_name,
                "config": deployment_config,
                "status": "deployed",
                "deployed_at": datetime.now().isoformat(),
                "endpoints": deployment_result.get("endpoints", {}),
                "dockerfile_path": dockerfile_path,
                "api_service_path": api_service_path,
                "compose_path": compose_path
            }
            
            self.deployed_services[deployment_id] = deployment_info
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            await self._save_deployment_info(deployment_id, deployment_info)
            
            return {
                "message": f"–ù–µ–π—Ä–æ—Å–µ—Ç—å {network_name} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞",
                "deployment_id": deployment_id,
                "deployment_info": deployment_info,
                "endpoints": deployment_result.get("endpoints", {})
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è {network_name}: {e}")
            return {"error": str(e)}
    
    async def _generate_deployment_config(self, network_info: Dict[str, Any]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        return {
            "service_name": f"nn-{network_info['name']}",
            "port": 8000 + len(self.deployed_services),
            "replicas": 1,
            "resources": {
                "cpu": "0.5",
                "memory": "512Mi"
            },
            "health_check": {
                "path": "/health",
                "interval": 30
            },
            "api_version": "v1",
            "authentication": False,
            "rate_limiting": {
                "enabled": True,
                "requests_per_minute": 100
            }
        }
    
    async def _create_dockerfile(self, network_name: str, network_info: Dict[str, Any], 
                               config: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ Dockerfile –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"""
        try:
            dockerfile_content = f"""
FROM python:3.9-slim

WORKDIR /app

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
RUN apt-get update && apt-get install -y \\
    gcc \\
    g++ \\
    && rm -rf /var/lib/apt/lists/*

# –ö–æ–ø–∏—Ä—É–µ–º requirements
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
COPY . .

# –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
RUN useradd -m -u 1000 appuser && chown -R appuser:appuser /app
USER appuser

# –≠–∫—Å–ø–æ–Ω–∏—Ä—É–µ–º –ø–æ—Ä—Ç
EXPOSE {config['port']}

# –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞
CMD ["python", "api_service.py"]
"""
            
            dockerfile_path = f"/workspace/neural_networks/dockerfiles/{network_name}_Dockerfile"
            with open(dockerfile_path, 'w') as f:
                f.write(dockerfile_content)
            
            logger.info(f"üìÑ Dockerfile —Å–æ–∑–¥–∞–Ω: {dockerfile_path}")
            return dockerfile_path
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Dockerfile: {e}")
            raise
    
    async def _create_api_service(self, network_name: str, network_info: Dict[str, Any], 
                                config: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ API —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º requirements.txt
            requirements_content = """
torch>=1.9.0
numpy>=1.21.0
aiohttp>=3.8.0
aiohttp-cors>=0.7.0
pydantic>=1.8.0
uvicorn>=0.15.0
fastapi>=0.68.0
"""
            
            requirements_path = f"/workspace/neural_networks/deployed_services/{network_name}/requirements.txt"
            Path(requirements_path).parent.mkdir(parents=True, exist_ok=True)
            
            with open(requirements_path, 'w') as f:
                f.write(requirements_content)
            
            # –°–æ–∑–¥–∞–µ–º API —Å–µ—Ä–≤–∏—Å
            api_service_content = f'''
#!/usr/bin/env python3
"""
API —Å–µ—Ä–≤–∏—Å –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ {network_name}
"""

import asyncio
import json
import logging
import torch
import torch.nn as nn
import numpy as np
from typing import Dict, List, Any
from datetime import datetime
from aiohttp import web, ClientSession
import aiohttp_cors

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
model = None
model_loaded = False

async def load_model():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏"""
    global model, model_loaded
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
        # –ü–æ–∫–∞ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–≥–ª—É—à–∫—É
        model = "Model loaded successfully"
        model_loaded = True
        logging.info("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {{e}}")
        model_loaded = False

async def predict(request):
    """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"""
    try:
        if not model_loaded:
            return web.json_response({{"error": "–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"}}, status=500)
        
        data = await request.json()
        input_data = data.get("input", [])
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        prediction = {{
            "prediction": [0.1, 0.2, 0.3, 0.4],
            "confidence": 0.85,
            "timestamp": datetime.now().isoformat()
        }}
        
        return web.json_response(prediction)
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {{e}}")
        return web.json_response({{"error": str(e)}}, status=500)

async def health_check(request):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return web.json_response({{
        "status": "healthy",
        "model_loaded": model_loaded,
        "timestamp": datetime.now().isoformat()
    }})

async def get_model_info(request):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏"""
    return web.json_response({{
        "network_name": "{network_name}",
        "architecture": {json.dumps(network_info.get('architecture', {{}}), indent=2)},
        "status": "trained" if network_info.get('status') == 'trained' else "unknown",
        "accuracy": network_info.get('test_accuracy', 0)
    }})

def create_app():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app = web.Application()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
    cors = aiohttp_cors.setup(app, defaults={{
        "*": aiohttp_cors.ResourceOptions(
            allow_credentials=True,
            expose_headers="*",
            allow_headers="*",
            allow_methods="*"
        )
    }})
    
    # –ú–∞—Ä—à—Ä—É—Ç—ã
    app.router.add_post('/predict', predict)
    app.router.add_get('/health', health_check)
    app.router.add_get('/model-info', get_model_info)
    
    # –î–æ–±–∞–≤–ª—è–µ–º CORS –∫–æ –≤—Å–µ–º –º–∞—Ä—à—Ä—É—Ç–∞–º
    for route in list(app.router.routes()):
        cors.add(route)
    
    return app

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logging.basicConfig(level=logging.INFO)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    await load_model()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = create_app()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', {config['port']})
    await site.start()
    
    logging.info(f"üöÄ API —Å–µ—Ä–≤–∏—Å –¥–ª—è {network_name} –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {config['port']}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ
    while True:
        await asyncio.sleep(1)

if __name__ == "__main__":
    asyncio.run(main())
'''
            
            api_service_path = f"/workspace/neural_networks/deployed_services/{network_name}/api_service.py"
            with open(api_service_path, 'w') as f:
                f.write(api_service_content)
            
            logger.info(f"üîß API —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω: {api_service_path}")
            return api_service_path
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è API —Å–µ—Ä–≤–∏—Å–∞: {e}")
            raise
    
    async def _create_docker_compose(self, network_name: str, config: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ docker-compose —Ñ–∞–π–ª–∞"""
        try:
            compose_content = f"""
version: '3.8'

services:
  {config['service_name']}:
    build:
      context: /workspace/neural_networks/deployed_services/{network_name}
      dockerfile: /workspace/neural_networks/dockerfiles/{network_name}_Dockerfile
    ports:
      - "{config['port']}:{config['port']}"
    environment:
      - MODEL_NAME={network_name}
      - API_VERSION={config['api_version']}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:{config['port']}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '{config['resources']['cpu']}'
          memory: {config['resources']['memory']}
        reservations:
          cpus: '0.25'
          memory: 256M
"""
            
            compose_path = f"/workspace/neural_networks/deployments/{network_name}_docker-compose.yml"
            with open(compose_path, 'w') as f:
                f.write(compose_content)
            
            logger.info(f"üê≥ Docker Compose —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {compose_path}")
            return compose_path
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Docker Compose: {e}")
            raise
    
    async def _deploy_with_docker(self, network_name: str, config: Dict[str, Any]) -> Dict[str, Any]:
        """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Docker"""
        try:
            service_name = config['service_name']
            port = config['port']
            
            # –°–æ–±–∏—Ä–∞–µ–º Docker –æ–±—Ä–∞–∑
            image_name = f"{service_name}:latest"
            build_path = f"/workspace/neural_networks/deployed_services/{network_name}"
            
            logger.info(f"üî® –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞ {image_name}...")
            
            # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑
            image, build_logs = self.docker_client.images.build(
                path=build_path,
                tag=image_name,
                rm=True
            )
            
            logger.info(f"‚úÖ Docker –æ–±—Ä–∞–∑ {image_name} —Å–æ–±—Ä–∞–Ω")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            container = self.docker_client.containers.run(
                image_name,
                ports={f'{port}/tcp': port},
                environment={
                    'MODEL_NAME': network_name,
                    'API_VERSION': config['api_version']
                },
                detach=True,
                restart_policy={"Name": "unless-stopped"},
                name=service_name
            )
            
            logger.info(f"üöÄ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {service_name} –∑–∞–ø—É—â–µ–Ω")
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
            await asyncio.sleep(5)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–∞
            health_url = f"http://localhost:{port}/health"
            try:
                response = requests.get(health_url, timeout=10)
                if response.status_code == 200:
                    logger.info(f"‚úÖ –°–µ—Ä–≤–∏—Å {service_name} –∑–¥–æ—Ä–æ–≤")
                else:
                    logger.warning(f"‚ö†Ô∏è –°–µ—Ä–≤–∏—Å {service_name} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ health check")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–∞: {e}")
            
            return {
                "deployment_type": "docker",
                "container_id": container.id,
                "image_name": image_name,
                "endpoints": {
                    "predict": f"http://localhost:{port}/predict",
                    "health": f"http://localhost:{port}/health",
                    "model_info": f"http://localhost:{port}/model-info"
                }
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Docker —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: {e}")
            raise
    
    async def _deploy_with_python(self, network_name: str, config: Dict[str, Any]) -> Dict[str, Any]:
        """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Python (–±–µ–∑ Docker)"""
        try:
            service_name = config['service_name']
            port = config['port']
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Python —Å–µ—Ä–≤–∏—Å –≤ —Ñ–æ–Ω–µ
            api_service_path = f"/workspace/neural_networks/deployed_services/{network_name}/api_service.py"
            
            process = subprocess.Popen([
                'python', api_service_path
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            
            logger.info(f"üöÄ Python —Å–µ—Ä–≤–∏—Å {service_name} –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
            await asyncio.sleep(3)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
            health_url = f"http://localhost:{port}/health"
            try:
                response = requests.get(health_url, timeout=10)
                if response.status_code == 200:
                    logger.info(f"‚úÖ –°–µ—Ä–≤–∏—Å {service_name} –∑–¥–æ—Ä–æ–≤")
                else:
                    logger.warning(f"‚ö†Ô∏è –°–µ—Ä–≤–∏—Å {service_name} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ: {e}")
            
            return {
                "deployment_type": "python",
                "process_id": process.pid,
                "endpoints": {
                    "predict": f"http://localhost:{port}/predict",
                    "health": f"http://localhost:{port}/health",
                    "model_info": f"http://localhost:{port}/model-info"
                }
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Python —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: {e}")
            raise
    
    async def _save_deployment_info(self, deployment_id: str, deployment_info: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏"""
        try:
            info_path = f"/workspace/neural_networks/deployments/{deployment_id}_info.json"
            with open(info_path, 'w', encoding='utf-8') as f:
                json.dump(deployment_info, f, indent=2, ensure_ascii=False)
            
            logger.info(f"üíæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {info_path}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏: {e}")
    
    async def list_deployed_services(self) -> Dict[str, Any]:
        """–°–ø–∏—Å–æ–∫ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        try:
            services_info = []
            
            for deployment_id, info in self.deployed_services.items():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
                status = await self._check_service_status(info)
                
                services_info.append({
                    "deployment_id": deployment_id,
                    "network_name": info["network_name"],
                    "status": status,
                    "endpoints": info["endpoints"],
                    "deployed_at": info["deployed_at"]
                })
            
            return {
                "services": services_info,
                "total_services": len(services_info)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
            return {"error": str(e)}
    
    async def _check_service_status(self, deployment_info: Dict[str, Any]) -> str:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            endpoints = deployment_info.get("endpoints", {})
            health_url = endpoints.get("health")
            
            if not health_url:
                return "unknown"
            
            response = requests.get(health_url, timeout=5)
            if response.status_code == 200:
                return "healthy"
            else:
                return "unhealthy"
                
        except Exception:
            return "unhealthy"
    
    async def stop_service(self, deployment_id: str) -> Dict[str, Any]:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            if deployment_id not in self.deployed_services:
                return {"error": "–°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            deployment_info = self.deployed_services[deployment_id]
            
            if deployment_info["config"].get("deployment_type") == "docker":
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                container_id = deployment_info.get("container_id")
                if container_id:
                    container = self.docker_client.containers.get(container_id)
                    container.stop()
                    container.remove()
                    logger.info(f"üõë Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
            del self.deployed_services[deployment_id]
            
            return {
                "message": f"–°–µ—Ä–≤–∏—Å {deployment_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                "deployment_id": deployment_id
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–∞: {e}")
            return {"error": str(e)}
    
    async def get_deployment_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        return {
            "deployed_services": len(self.deployed_services),
            "deployment_queue": len(self.deployment_queue),
            "active_deployments": len(self.active_deployments),
            "docker_available": self.docker_client is not None,
            "timestamp": datetime.now().isoformat()
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
deployment_system = NeuralNetworkDeploymentSystem()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    try:
        logger.info("üöÄ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π –∑–∞–ø—É—â–µ–Ω–∞")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—É—á–µ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π
        networks_info = await neural_network_creator._handle_list_networks({})
        trained_networks = [n for n in networks_info.get("networks", []) if n["status"] == "trained"]
        
        if trained_networks:
            # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –æ–±—É—á–µ–Ω–Ω—É—é —Å–µ—Ç—å
            network_name = trained_networks[0]["name"]
            result = await deployment_system.deploy_neural_network(network_name)
            
            if result.get("error"):
                logger.error(f"‚ùå –¢–µ—Å—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–µ –ø—Ä–æ—à–µ–ª: {result['error']}")
            else:
                logger.info("‚úÖ –¢–µ—Å—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
                logger.info(f"üåê –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ —Å–µ—Ä–≤–∏—Å—ã: {len(deployment_system.deployed_services)}")
        else:
            logger.info("‚ÑπÔ∏è –ù–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ
        while True:
            await asyncio.sleep(1)
            
    except KeyboardInterrupt:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è...")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())