#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã AI Manager
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from models.task import Task, TaskPriority, TaskCategory
from models.agent import Agent, AgentType
from core.task_analyzer import TaskAnalyzer
from core.ai_manager import AIManager
from core.task_executor import TaskExecutor
from monitoring.logger import logger


async def demo_basic_functionality():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    print("üöÄ AI Manager - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã\n")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã...")
    task_analyzer = TaskAnalyzer()
    ai_manager = AIManager()
    task_executor = TaskExecutor(ai_manager)
    print("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã\n")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    print("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏...")
    task = Task(
        description="–ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∏—Ä–µ",
        priority=TaskPriority.HIGH,
        category=TaskCategory.TEXT_PROCESSING
    )
    print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {task.description[:50]}...\n")
    
    # –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏
    print("üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏...")
    analysis = await task_analyzer.analyze_task(task)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
    print(f"   - –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {analysis.get('category')}")
    print(f"   - –°–ª–æ–∂–Ω–æ—Å—Ç—å: {analysis.get('complexity')}")
    print(f"   - –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: {analysis.get('estimated_time')} –º–∏–Ω")
    print(f"   - –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∞–≥–µ–Ω—Ç: {analysis.get('suggested_agent_type')}")
    print(f"   - –ù–∞–≤—ã–∫–∏: {', '.join(analysis.get('required_skills', []))}")
    print()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
    print("ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ AI –∞–≥–µ–Ω—Ç–∞...")
    agent = await ai_manager.create_agent_for_task(analysis)
    print(f"‚úÖ –ê–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω:")
    print(f"   - ID: {agent.id}")
    print(f"   - –ò–º—è: {agent.name}")
    print(f"   - –¢–∏–ø: {agent.type}")
    print(f"   - –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏: {len(agent.capabilities)}")
    for cap in agent.capabilities[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        print(f"     ‚Ä¢ {cap.name} (—É—Ä–æ–≤–µ–Ω—å: {cap.level})")
    print()
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    print("‚ö° –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç–æ–º...")
    result = await task_executor.execute_task(task, agent)
    print(f"‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:")
    print(f"   - –°—Ç–∞—Ç—É—Å: {result['status']}")
    print(f"   - –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.get('execution_time', 0):.2f} —Å–µ–∫")
    if result.get('result'):
        print(f"   - –†–µ–∑—É–ª—å—Ç–∞—Ç: {str(result['result'])[:100]}...")
    print()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:")
    stats = await ai_manager.get_system_stats()
    print(f"   - –í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤: {stats.get('total_agents', 0)}")
    print(f"   - –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤: {stats.get('active_agents', 0)}")
    print(f"   - –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {stats.get('total_tasks_completed', 0)}")
    print(f"   - –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {stats.get('overall_success_rate', 0)*100:.1f}%")
    print()
    
    return True


async def demo_multiple_agents():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏"""
    print("üîÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤")
    print("=" * 60)
    
    task_analyzer = TaskAnalyzer()
    ai_manager = AIManager()
    task_executor = TaskExecutor(ai_manager)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
    tasks = [
        Task(
            description="–°–æ–∑–¥–∞–π —Ñ—É–Ω–∫—Ü–∏—é Python –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ø–∏—Å–∫–∞ —á–∏—Å–µ–ª –ø–æ —É–±—ã–≤–∞–Ω–∏—é",
            priority=TaskPriority.MEDIUM,
            category=TaskCategory.CODE_GENERATION
        ),
        Task(
            description="–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –æ –≤–µ—Å–Ω–µ",
            priority=TaskPriority.LOW,
            category=TaskCategory.CREATIVE
        ),
        Task(
            description="–ü–µ—Ä–µ–≤–µ–¥–∏ —Ñ—Ä–∞–∑—É 'Hello, AI Manager!' –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫",
            priority=TaskPriority.MEDIUM,
            category=TaskCategory.TRANSLATION
        )
    ]
    
    print(f"üìù –°–æ–∑–¥–∞–Ω–æ {len(tasks)} –∑–∞–¥–∞—á —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤\n")
    
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á
    async def execute_task_with_analysis(task):
        print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏: {task.description[:40]}...")
        analysis = await task_analyzer.analyze_task(task)
        agent = await ai_manager.create_agent_for_task(analysis)
        result = await task_executor.execute_task(task, agent)
        return result
    
    print("‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á...")
    results = await asyncio.gather(*[execute_task_with_analysis(task) for task in tasks])
    
    print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
    for i, result in enumerate(results, 1):
        print(f"   –ó–∞–¥–∞—á–∞ {i}: {result['status']} (–≤—Ä–µ–º—è: {result.get('execution_time', 0):.2f}—Å)")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤:")
    agents = await ai_manager.get_active_agents()
    print(f"   - –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {len(agents)}")
    
    agent_types = {}
    for agent in agents:
        agent_type = agent.type if isinstance(agent.type, str) else agent.type.value
        agent_types[agent_type] = agent_types.get(agent_type, 0) + 1
    
    print("   - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º:")
    for agent_type, count in agent_types.items():
        print(f"     ‚Ä¢ {agent_type}: {count}")
    
    print()


async def demo_system_monitoring():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("üìà –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    print("=" * 60)
    
    ai_manager = AIManager()
    task_executor = TaskExecutor(ai_manager)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤
    print("ü§ñ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤:")
    agents = await ai_manager.get_active_agents()
    for agent in agents[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∞–≥–µ–Ω—Ç–∞
        agent_type = agent.type if isinstance(agent.type, str) else agent.type.value
        agent_status = agent.status if isinstance(agent.status, str) else agent.status.value
        print(f"   - {agent.name} ({agent_type})")
        print(f"     –°—Ç–∞—Ç—É—Å: {agent_status}")
        print(f"     –ó–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {agent.tasks_completed}")
        print(f"     –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {agent.average_quality_score:.2f}")
        print()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á
    print("üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á:")
    task_stats = await task_executor.get_system_stats()
    print(f"   - –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {task_stats.get('active_tasks', 0)}")
    print(f"   - –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {task_stats.get('completed_tasks', 0)}")
    print(f"   - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {task_stats.get('average_execution_time', 0):.2f}—Å")
    print(f"   - –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞: {task_stats.get('average_quality_score', 0):.2f}")
    print()
    
    # –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("üñ•Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    system_stats = await ai_manager.get_system_stats()
    print(f"   - –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {system_stats.get('overall_success_rate', 0)*100:.1f}%")
    print(f"   - –ê–≥–µ–Ω—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º: {system_stats.get('agents_by_status', {})}")
    print(f"   - –ê–≥–µ–Ω—Ç—ã –ø–æ —Ç–∏–ø–∞–º: {system_stats.get('agents_by_type', {})}")
    print()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        print("üéØ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ AI Manager")
        print("–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AI –∞–≥–µ–Ω—Ç–∞–º–∏")
        print("–í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è OpenAI API –∫–ª—é—á\n")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        await demo_basic_functionality()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
        await demo_multiple_agents()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        await demo_system_monitoring()
        
        print("üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüí° –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:")
        print("   1. –ü–æ–ª—É—á–∏—Ç–µ OpenAI API –∫–ª—é—á –Ω–∞ https://platform.openai.com/")
        print("   2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY")
        print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: python start_server.py")
        print("   4. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:8000")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        logger.logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")


if __name__ == "__main__":
    asyncio.run(main())
