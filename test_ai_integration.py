#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AI —Å JARVIS
"""

import requests
import json

def test_ollama_direct():
    """–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç Ollama"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Ollama –Ω–∞–ø—Ä—è–º—É—é...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Ollama
        response = requests.get("http://localhost:11434/api/tags", timeout=5)
        if response.status_code == 200:
            data = response.json()
            models = [model["name"] for model in data.get("models", [])]
            print(f"‚úÖ Ollama —Ä–∞–±–æ—Ç–∞–µ—Ç, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {models}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            payload = {
                "model": "llama3.2:3b",
                "prompt": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
                "stream": False
            }
            
            response = requests.post("http://localhost:11434/api/generate", json=payload, timeout=30)
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ Ollama –æ—Ç–≤–µ—á–∞–µ—Ç: {data.get('response', '')[:100]}...")
                return True
            else:
                print(f"‚ùå Ollama –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {response.status_code}")
                return False
        else:
            print(f"‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Ollama: {e}")
        return False

def test_jarvis_api():
    """–¢–µ—Å—Ç API JARVIS"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º API JARVIS...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        response = requests.get("http://localhost:8000/api/system/status", timeout=5)
        if response.status_code == 200:
            print("‚úÖ JARVIS API —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print(f"‚ùå JARVIS API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª–∏
        response = requests.get("http://localhost:8000/api/ai/models", timeout=5)
        if response.status_code == 200:
            data = response.json()
            if "error" in data:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {data['error']}")
            else:
                print(f"‚úÖ –ú–æ–¥–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã: {data.get('available_models', [])}")
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏: {response.status_code}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–∞—Ç
        response = requests.post(
            "http://localhost:8000/api/chat",
            json={"message": "–ü—Ä–∏–≤–µ—Ç!"},
            timeout=30
        )
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ JARVIS –æ—Ç–≤–µ—á–∞–µ—Ç: {data.get('response', '')[:100]}...")
            return True
        else:
            print(f"‚ùå JARVIS –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è JARVIS: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AI...")
    
    ollama_ok = test_ollama_direct()
    jarvis_ok = test_jarvis_api()
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"Ollama: {'‚úÖ' if ollama_ok else '‚ùå'}")
    print(f"JARVIS: {'‚úÖ' if jarvis_ok else '‚ùå'}")
    
    if ollama_ok and jarvis_ok:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    else:
        print("\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π AI")

if __name__ == "__main__":
    main()