#!/usr/bin/env python3
"""
Enhanced Visual Analyzer for JARVIS
–£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å —Ä–µ–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º HTML/CSS
"""

import os
import sys
import json
import time
import re
import subprocess
import logging
from datetime import datetime
from typing import Dict, List, Any, Optional
from dataclasses import dataclass, asdict
import base64
from urllib.parse import urljoin, urlparse
import threading

logger = logging.getLogger(__name__)

@dataclass
class EnhancedVisualAnalysis:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    timestamp: str
    url: str
    html_content: str
    page_title: str
    elements_analysis: Dict[str, Any]
    css_analysis: Dict[str, Any]
    javascript_analysis: Dict[str, Any]
    accessibility_score: float
    performance_score: float
    seo_score: float
    ui_issues: List[Dict[str, Any]]
    suggestions: List[str]
    confidence: float

class EnhancedVisualAnalyzer:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä"""
    
    def __init__(self, target_url: str = "http://localhost:8080"):
        self.target_url = target_url
        self.analysis_history = []
        self.enabled = True
        self.last_analysis = None
        
        logger.info("üîç Enhanced Visual Analyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def fetch_page_content(self) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º HTML
            html_result = subprocess.run([
                'curl', '-s', '-L', '--max-time', '10', 
                '-H', 'User-Agent: JARVIS-Visual-Analyzer/1.0',
                self.target_url
            ], capture_output=True, text=True, timeout=15)
            
            if html_result.returncode != 0:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è HTML: {html_result.stderr}")
                return None
            
            html_content = html_result.stdout
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ HTTP
            headers_result = subprocess.run([
                'curl', '-s', '-I', '--max-time', '5', self.target_url
            ], capture_output=True, text=True, timeout=10)
            
            headers = headers_result.stdout if headers_result.returncode == 0 else ""
            
            # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞
            time_result = subprocess.run([
                'curl', '-s', '-o', '/dev/null', '-w', '%{time_total}', 
                '--max-time', '10', self.target_url
            ], capture_output=True, text=True, timeout=15)
            
            response_time = float(time_result.stdout) if time_result.returncode == 0 else 1.0
            
            return {
                "html_content": html_content,
                "headers": headers,
                "response_time": response_time,
                "content_length": len(html_content)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {e}")
            return None
    
    def analyze_html_structure(self, html_content: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        try:
            analysis = {
                "total_elements": 0,
                "semantic_elements": 0,
                "interactive_elements": 0,
                "form_elements": 0,
                "media_elements": 0,
                "accessibility_features": 0,
                "structure_score": 0.0
            }
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            semantic_tags = ['header', 'nav', 'main', 'section', 'article', 'aside', 'footer']
            interactive_tags = ['button', 'input', 'select', 'textarea', 'a']
            form_tags = ['form', 'input', 'select', 'textarea', 'label']
            media_tags = ['img', 'video', 'audio', 'canvas', 'svg']
            
            # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            total_tags = len(re.findall(r'<\w+', html_content))
            analysis["total_elements"] = total_tags
            
            # –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            for tag in semantic_tags:
                count = len(re.findall(f'<{tag}[^>]*>', html_content, re.IGNORECASE))
                analysis["semantic_elements"] += count
            
            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            for tag in interactive_tags:
                count = len(re.findall(f'<{tag}[^>]*>', html_content, re.IGNORECASE))
                analysis["interactive_elements"] += count
            
            # –≠–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º
            for tag in form_tags:
                count = len(re.findall(f'<{tag}[^>]*>', html_content, re.IGNORECASE))
                analysis["form_elements"] += count
            
            # –ú–µ–¥–∏–∞ —ç–ª–µ–º–µ–Ω—Ç—ã
            for tag in media_tags:
                count = len(re.findall(f'<{tag}[^>]*>', html_content, re.IGNORECASE))
                analysis["media_elements"] += count
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            accessibility_features = 0
            if 'alt=' in html_content:
                accessibility_features += 1
            if 'aria-' in html_content:
                accessibility_features += 1
            if 'role=' in html_content:
                accessibility_features += 1
            if '<label' in html_content.lower():
                accessibility_features += 1
            
            analysis["accessibility_features"] = accessibility_features
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            if total_tags > 0:
                semantic_ratio = analysis["semantic_elements"] / total_tags
                interactive_ratio = analysis["interactive_elements"] / total_tags
                accessibility_ratio = accessibility_features / 4  # –ú–∞–∫—Å–∏–º—É–º 4 —Ñ—É–Ω–∫—Ü–∏–∏
                
                analysis["structure_score"] = (semantic_ratio * 0.4 + 
                                             interactive_ratio * 0.4 + 
                                             accessibility_ratio * 0.2)
            
            return analysis
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ HTML: {e}")
            return {"total_elements": 0, "structure_score": 0.0}
    
    def analyze_css_styles(self, html_content: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ CSS —Å—Ç–∏–ª–µ–π"""
        try:
            analysis = {
                "has_external_css": False,
                "has_inline_styles": False,
                "responsive_design": False,
                "modern_css_features": 0,
                "css_score": 0.0
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ CSS
            analysis["has_external_css"] = '<link' in html_content and 'stylesheet' in html_content
            analysis["has_inline_styles"] = '<style' in html_content
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω
            analysis["responsive_design"] = (
                'viewport' in html_content and 
                ('media' in html_content or '@media' in html_content)
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ CSS —Ñ—É–Ω–∫—Ü–∏–∏
            modern_features = 0
            css_features = [
                'grid', 'flexbox', 'flex', 'transform', 'transition',
                'border-radius', 'box-shadow', 'gradient', 'backdrop-filter'
            ]
            
            for feature in css_features:
                if feature in html_content.lower():
                    modern_features += 1
            
            analysis["modern_css_features"] = modern_features
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º CSS –æ—Ü–µ–Ω–∫—É
            css_score = 0.0
            if analysis["has_external_css"] or analysis["has_inline_styles"]:
                css_score += 0.3
            if analysis["responsive_design"]:
                css_score += 0.4
            css_score += min(0.3, modern_features / len(css_features) * 0.3)
            
            analysis["css_score"] = css_score
            
            return analysis
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ CSS: {e}")
            return {"css_score": 0.0}
    
    def analyze_javascript(self, html_content: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ JavaScript"""
        try:
            analysis = {
                "has_external_js": False,
                "has_inline_js": False,
                "modern_js_features": 0,
                "framework_detected": None,
                "js_score": 0.0
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ JavaScript
            analysis["has_external_js"] = '<script src=' in html_content
            analysis["has_inline_js"] = '<script>' in html_content or '<script type=' in html_content
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ JS —Ñ—É–Ω–∫—Ü–∏–∏
            modern_features = 0
            js_features = [
                'async', 'await', 'fetch', 'const', 'let', 'arrow function',
                'addEventListener', 'querySelector', 'JSON.parse'
            ]
            
            for feature in js_features:
                if feature in html_content or (feature == 'arrow function' and '=>' in html_content):
                    modern_features += 1
            
            analysis["modern_js_features"] = modern_features
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏
            if 'chart.js' in html_content.lower():
                analysis["framework_detected"] = "Chart.js"
            elif 'react' in html_content.lower():
                analysis["framework_detected"] = "React"
            elif 'vue' in html_content.lower():
                analysis["framework_detected"] = "Vue.js"
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º JS –æ—Ü–µ–Ω–∫—É
            js_score = 0.0
            if analysis["has_external_js"] or analysis["has_inline_js"]:
                js_score += 0.4
            js_score += min(0.4, modern_features / len(js_features) * 0.4)
            if analysis["framework_detected"]:
                js_score += 0.2
            
            analysis["js_score"] = js_score
            
            return analysis
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ JavaScript: {e}")
            return {"js_score": 0.0}
    
    def calculate_accessibility_score(self, html_content: str, elements_analysis: Dict[str, Any]) -> float:
        """–†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
        try:
            score = 0.0
            max_score = 10.0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º lang –∞—Ç—Ä–∏–±—É—Ç
            if 'lang=' in html_content:
                score += 1.0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º alt —Ç–µ–≥–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            img_count = html_content.count('<img')
            alt_count = html_content.count('alt=')
            if img_count > 0 and alt_count >= img_count * 0.8:
                score += 2.0
            elif alt_count > 0:
                score += 1.0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º ARIA –∞—Ç—Ä–∏–±—É—Ç—ã
            if 'aria-' in html_content:
                score += 1.5
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º role –∞—Ç—Ä–∏–±—É—Ç—ã
            if 'role=' in html_content:
                score += 1.0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º label –¥–ª—è —Ñ–æ—Ä–º
            form_elements = elements_analysis.get("form_elements", 0)
            label_count = html_content.count('<label')
            if form_elements > 0 and label_count >= form_elements * 0.5:
                score += 1.5
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            h1_count = html_content.count('<h1')
            h2_count = html_content.count('<h2')
            h3_count = html_content.count('<h3')
            if h1_count >= 1 and (h2_count > 0 or h3_count > 0):
                score += 1.0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
            if 'color:' in html_content and 'background' in html_content:
                score += 1.0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            if 'tabindex' in html_content or 'focus' in html_content:
                score += 1.0
            
            return min(1.0, score / max_score)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: {e}")
            return 0.5
    
    def calculate_seo_score(self, html_content: str) -> float:
        """–†–∞—Å—á–µ—Ç SEO –æ—Ü–µ–Ω–∫–∏"""
        try:
            score = 0.0
            max_score = 8.0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º title
            title_match = re.search(r'<title[^>]*>([^<]+)</title>', html_content, re.IGNORECASE)
            if title_match and len(title_match.group(1).strip()) > 10:
                score += 2.0
            elif title_match:
                score += 1.0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º meta description
            if 'meta name="description"' in html_content.lower():
                score += 1.5
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º meta keywords
            if 'meta name="keywords"' in html_content.lower():
                score += 0.5
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ H1-H3
            if '<h1' in html_content.lower():
                score += 1.0
            if '<h2' in html_content.lower():
                score += 0.5
            if '<h3' in html_content.lower():
                score += 0.5
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if 'schema.org' in html_content or 'application/ld+json' in html_content:
                score += 1.0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Open Graph
            if 'og:' in html_content:
                score += 1.0
            
            return min(1.0, score / max_score)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ SEO: {e}")
            return 0.5
    
    def detect_ui_issues(self, html_analysis: Dict[str, Any], css_analysis: Dict[str, Any], 
                        js_analysis: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º UI"""
        issues = []
        
        try:
            # –ü—Ä–æ–±–ª–µ–º—ã HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            if html_analysis.get("total_elements", 0) < 10:
                issues.append({
                    "type": "insufficient_content",
                    "severity": "medium",
                    "description": "–ú–∞–ª–æ HTML —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ",
                    "recommendation": "–î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
                })
            
            if html_analysis.get("interactive_elements", 0) < 3:
                issues.append({
                    "type": "low_interactivity",
                    "severity": "high",
                    "description": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤",
                    "recommendation": "–î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∫–Ω–æ–ø–æ–∫, —Å—Å—ã–ª–æ–∫ –∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
                })
            
            # –ü—Ä–æ–±–ª–µ–º—ã CSS
            if not css_analysis.get("responsive_design", False):
                issues.append({
                    "type": "no_responsive_design",
                    "severity": "high",
                    "description": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω",
                    "recommendation": "–î–æ–±–∞–≤–∏—Ç—å CSS –º–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"
                })
            
            if css_analysis.get("modern_css_features", 0) < 3:
                issues.append({
                    "type": "outdated_css",
                    "severity": "medium",
                    "description": "–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ CSS —Ç–µ—Ö–Ω–∏–∫–∏",
                    "recommendation": "–û–±–Ω–æ–≤–∏—Ç—å CSS —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ (Grid, Flexbox, etc.)"
                })
            
            # –ü—Ä–æ–±–ª–µ–º—ã JavaScript
            if not js_analysis.get("has_external_js", False) and not js_analysis.get("has_inline_js", False):
                issues.append({
                    "type": "no_javascript",
                    "severity": "medium",
                    "description": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç JavaScript —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å",
                    "recommendation": "–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å –ø–æ–º–æ—â—å—é JavaScript"
                })
            
            if js_analysis.get("modern_js_features", 0) < 4:
                issues.append({
                    "type": "outdated_javascript",
                    "severity": "low",
                    "description": "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–π JavaScript",
                    "recommendation": "–û–±–Ω–æ–≤–∏—Ç—å JavaScript –∫–æ–¥ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏"
                })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º: {e}")
        
        return issues
    
    def generate_actionable_suggestions(self, issues: List[Dict[str, Any]], 
                                      html_analysis: Dict[str, Any]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
        suggestions = []
        
        try:
            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–±–ª–µ–º
            for issue in issues:
                if issue["severity"] == "high":
                    suggestions.append(f"üö® –ö–†–ò–¢–ò–ß–ù–û: {issue['recommendation']}")
                elif issue["severity"] == "medium":
                    suggestions.append(f"‚ö†Ô∏è –í–ê–ñ–ù–û: {issue['recommendation']}")
                else:
                    suggestions.append(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {issue['recommendation']}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            interactive_count = html_analysis.get("interactive_elements", 0)
            
            if interactive_count > 10:
                suggestions.append("üóÇÔ∏è –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
            elif interactive_count < 5:
                suggestions.append("‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            
            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            total_elements = html_analysis.get("total_elements", 0)
            if total_elements > 100:
                suggestions.append("‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å DOM - —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            
            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ UX
            suggestions.extend([
                "üé® –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞",
                "üìä –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö",
                "üîî –î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–π",
                "‚å®Ô∏è –£–ª—É—á—à–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã",
                "üåô –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º–Ω–æ–π/—Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã"
            ])
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {e}")
        
        return suggestions[:8]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    
    def perform_enhanced_analysis(self) -> Optional[EnhancedVisualAnalysis]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            logger.info(f"üîç –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞: {self.target_url}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            content_data = self.fetch_page_content()
            
            if not content_data:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                return None
            
            html_content = content_data["html_content"]
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            title_match = re.search(r'<title[^>]*>([^<]+)</title>', html_content, re.IGNORECASE)
            page_title = title_match.group(1).strip() if title_match else "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∏–¥—ã –∞–Ω–∞–ª–∏–∑–∞
            html_analysis = self.analyze_html_structure(html_content)
            css_analysis = self.analyze_css_styles(html_content)
            js_analysis = self.analyze_javascript(html_content)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫–∏
            accessibility_score = self.calculate_accessibility_score(html_content, html_analysis)
            seo_score = self.calculate_seo_score(html_content)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            performance_score = self.calculate_performance_score(content_data, html_analysis)
            
            # –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã
            ui_issues = self.detect_ui_issues(html_analysis, css_analysis, js_analysis)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            suggestions = self.generate_actionable_suggestions(ui_issues, html_analysis)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            confidence = self.calculate_analysis_confidence(html_analysis, css_analysis, js_analysis)
            
            analysis = EnhancedVisualAnalysis(
                timestamp=datetime.now().isoformat(),
                url=self.target_url,
                html_content=html_content[:1000] + "..." if len(html_content) > 1000 else html_content,
                page_title=page_title,
                elements_analysis=html_analysis,
                css_analysis=css_analysis,
                javascript_analysis=js_analysis,
                accessibility_score=accessibility_score,
                performance_score=performance_score,
                seo_score=seo_score,
                ui_issues=ui_issues,
                suggestions=suggestions,
                confidence=confidence
            )
            
            self.last_analysis = analysis
            self.analysis_history.append(analysis)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            if len(self.analysis_history) > 50:
                self.analysis_history = self.analysis_history[-25:]
            
            logger.info(f"‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: "
                       f"–≠–ª–µ–º–µ–Ω—Ç—ã: {html_analysis.get('total_elements', 0)}, "
                       f"–ü—Ä–æ–±–ª–µ–º—ã: {len(ui_issues)}, "
                       f"–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {accessibility_score:.2f}, "
                       f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {performance_score:.2f}")
            
            return analysis
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return None
    
    def calculate_performance_score(self, content_data: Dict[str, Any], html_analysis: Dict[str, Any]) -> float:
        """–†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            score = 1.0
            
            # –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞
            response_time = content_data.get("response_time", 1.0)
            if response_time > 2.0:
                score -= 0.3
            elif response_time > 1.0:
                score -= 0.1
            
            # –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            content_length = content_data.get("content_length", 0)
            if content_length > 100000:  # –ë–æ–ª—å—à–µ 100KB
                score -= 0.2
            elif content_length > 50000:  # –ë–æ–ª—å—à–µ 50KB
                score -= 0.1
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            total_elements = html_analysis.get("total_elements", 0)
            if total_elements > 200:
                score -= 0.2
            elif total_elements > 100:
                score -= 0.1
            
            return max(0.0, score)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return 0.7
    
    def calculate_analysis_confidence(self, html_analysis: Dict[str, Any], 
                                    css_analysis: Dict[str, Any], js_analysis: Dict[str, Any]) -> float:
        """–†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            confidence = 0.6  # –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞ —É—Å–ø–µ—à–Ω—ã–π –∞–Ω–∞–ª–∏–∑ HTML
            if html_analysis.get("total_elements", 0) > 0:
                confidence += 0.2
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞ –∞–Ω–∞–ª–∏–∑ CSS
            if css_analysis.get("css_score", 0) > 0:
                confidence += 0.1
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞ –∞–Ω–∞–ª–∏–∑ JavaScript
            if js_analysis.get("js_score", 0) > 0:
                confidence += 0.1
            
            return min(1.0, confidence)
            
        except Exception:
            return 0.7
    
    def get_analysis_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –∞–Ω–∞–ª–∏–∑–æ–≤"""
        try:
            if not self.analysis_history:
                return {"total_analyses": 0, "status": "no_data"}
            
            latest = self.analysis_history[-1]
            
            return {
                "total_analyses": len(self.analysis_history),
                "latest_analysis": {
                    "timestamp": latest.timestamp,
                    "page_title": latest.page_title,
                    "elements_count": latest.elements_analysis.get("total_elements", 0),
                    "interactive_elements": latest.elements_analysis.get("interactive_elements", 0),
                    "accessibility_score": latest.accessibility_score,
                    "performance_score": latest.performance_score,
                    "seo_score": latest.seo_score,
                    "issues_count": len(latest.ui_issues),
                    "suggestions_count": len(latest.suggestions),
                    "confidence": latest.confidence
                },
                "trends": {
                    "avg_accessibility": sum(a.accessibility_score for a in self.analysis_history) / len(self.analysis_history),
                    "avg_performance": sum(a.performance_score for a in self.analysis_history) / len(self.analysis_history),
                    "avg_issues": sum(len(a.ui_issues) for a in self.analysis_history) / len(self.analysis_history)
                }
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}")
            return {"error": str(e)}
    
    def start_continuous_analysis(self, interval: int = 30):
        """–ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        def analysis_loop():
            while self.enabled:
                try:
                    analysis = self.perform_enhanced_analysis()
                    if analysis:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
                        critical_issues = [i for i in analysis.ui_issues if i.get("severity") == "high"]
                        if critical_issues:
                            logger.warning(f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã UI: {len(critical_issues)}")
                            for issue in critical_issues:
                                logger.warning(f"  - {issue['description']}")
                    
                    time.sleep(interval)
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–Ω–∞–ª–∏–∑–∞: {e}")
                    time.sleep(interval * 2)
        
        thread = threading.Thread(target=analysis_loop, daemon=True)
        thread.start()
        logger.info(f"üîÑ –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval}—Å)")

def test_enhanced_analyzer():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    try:
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Enhanced Visual Analyzer")
        
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        analyzer = EnhancedVisualAnalyzer()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
        analysis = analyzer.perform_enhanced_analysis()
        
        if analysis:
            logger.info("‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            logger.info(f"  üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {analysis.page_title}")
            logger.info(f"  üî¢ –≠–ª–µ–º–µ–Ω—Ç–æ–≤: {analysis.elements_analysis.get('total_elements', 0)}")
            logger.info(f"  üñ±Ô∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö: {analysis.elements_analysis.get('interactive_elements', 0)}")
            logger.info(f"  ‚ôø –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {analysis.accessibility_score:.2f}")
            logger.info(f"  ‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {analysis.performance_score:.2f}")
            logger.info(f"  üîç SEO: {analysis.seo_score:.2f}")
            logger.info(f"  üö® –ü—Ä–æ–±–ª–µ–º: {len(analysis.ui_issues)}")
            logger.info(f"  üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {len(analysis.suggestions)}")
            logger.info(f"  üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis.confidence:.2f}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
            critical_issues = [i for i in analysis.ui_issues if i.get("severity") == "high"]
            if critical_issues:
                logger.warning("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:")
                for issue in critical_issues:
                    logger.warning(f"  - {issue['description']}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            logger.info("üí° –¢–æ–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:")
            for suggestion in analysis.suggestions[:3]:
                logger.info(f"  - {suggestion}")
            
            return True
        else:
            logger.error("‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    test_enhanced_analyzer()