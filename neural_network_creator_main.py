#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª —Å–∏—Å—Ç–µ–º—ã "–ù–µ–π—Ä–æ—Å–µ—Ç—å, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –µ–¥–∏–Ω—É—é –∞–≤—Ç–æ–Ω–æ–º–Ω—É—é —Å–∏—Å—Ç–µ–º—É
"""

import asyncio
import json
import logging
import time
import uuid
from typing import Dict, List, Any, Optional
from datetime import datetime
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
from neural_network_creator_agent import neural_network_creator
from neural_network_web_interface import web_interface
from integrated_neural_network_system import integrated_system
from autonomous_neural_network_trainer import autonomous_trainer
from neural_network_deployment_system import deployment_system
from neural_architecture_generator import architecture_generator
from ai_engine import ai_engine, generate_ai_response

logger = logging.getLogger(__name__)

class NeuralNetworkCreatorSystem:
    """–ì–ª–∞–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π"""
    
    def __init__(self):
        self.system_id = str(uuid.uuid4())
        self.system_name = "Neural Network Creator"
        self.version = "1.0.0"
        self.status = "initializing"
        self.components = {}
        self.active_projects = {}
        self.statistics = {
            "networks_created": 0,
            "networks_trained": 0,
            "networks_deployed": 0,
            "total_projects": 0,
            "uptime_start": datetime.now().isoformat()
        }
        self._setup_components()
        self._setup_directories()
    
    def _setup_components(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        self.components = {
            "neural_network_creator": neural_network_creator,
            "web_interface": web_interface,
            "integrated_system": integrated_system,
            "autonomous_trainer": autonomous_trainer,
            "deployment_system": deployment_system,
            "architecture_generator": architecture_generator,
            "ai_engine": ai_engine
        }
        
        logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(self.components)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    
    def _setup_directories(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        directories = [
            "/workspace/neural_networks",
            "/workspace/neural_networks/system_logs",
            "/workspace/neural_networks/projects",
            "/workspace/neural_networks/statistics",
            "/workspace/neural_networks/backups"
        ]
        
        for directory in directories:
            Path(directory).mkdir(parents=True, exist_ok=True)
    
    async def start_system(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        try:
            self.status = "starting"
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã Neural Network Creator...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            logger.info("üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
            web_runner = await web_interface.start_server()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI –¥–≤–∏–∂–æ–∫
            logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –¥–≤–∏–∂–∫–∞...")
            ai_status = ai_engine.get_status()
            logger.info(f"AI –¥–≤–∏–∂–æ–∫: {ai_status}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä
            logger.info("üéì –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞...")
            asyncio.create_task(autonomous_trainer.start_autonomous_training())
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
            logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è...")
            deployment_status = await deployment_system.get_deployment_status()
            logger.info(f"–°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: {deployment_status}")
            
            self.status = "running"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø—É—Å–∫–∞
            await self._save_system_statistics()
            
            logger.info("üéâ –°–∏—Å—Ç–µ–º–∞ Neural Network Creator —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!")
            logger.info("=" * 60)
            logger.info("üß† NEURAL NETWORK CREATOR - –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï")
            logger.info("=" * 60)
            logger.info("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:8081")
            logger.info("ü§ñ AI –¥–≤–∏–∂–æ–∫: –∞–∫—Ç–∏–≤–µ–Ω")
            logger.info("üéì –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä: –∞–∫—Ç–∏–≤–µ–Ω")
            logger.info("üöÄ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: –∞–∫—Ç–∏–≤–Ω–∞")
            logger.info("üß† –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä: –∞–∫—Ç–∏–≤–µ–Ω")
            logger.info("=" * 60)
            logger.info("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
            logger.info("   - –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π —Å –ø–æ–º–æ—â—å—é –ò–ò")
            logger.info("   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
            logger.info("   - –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∫–∞–∫ API —Å–µ—Ä–≤–∏—Å—ã")
            logger.info("   - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä")
            logger.info("   - –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –±–µ–∑ —É—á–∞—Å—Ç–∏—è —á–µ–ª–æ–≤–µ–∫–∞")
            logger.info("=" * 60)
            
            return web_runner
            
        except Exception as e:
            self.status = "error"
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
            raise
    
    async def create_neural_network_project(self, task_description: str, 
                                          project_name: str = None) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"""
        try:
            project_id = str(uuid.uuid4())
            project_name = project_name or f"project_{project_id[:8]}"
            
            logger.info(f"üéØ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: {project_name}")
            logger.info(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {task_description}")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
            project = {
                "id": project_id,
                "name": project_name,
                "description": task_description,
                "status": "creating",
                "created_at": datetime.now().isoformat(),
                "components_used": [],
                "results": {}
            }
            
            self.active_projects[project_id] = project
            
            # –≠—Ç–∞–ø 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
            logger.info("üß† –≠—Ç–∞–ø 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã...")
            architecture = await architecture_generator.generate_architecture(task_description)
            project["results"]["architecture"] = asdict(architecture)
            project["components_used"].append("architecture_generator")
            
            # –≠—Ç–∞–ø 2: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
            logger.info("üîß –≠—Ç–∞–ø 2: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...")
            network_result = await neural_network_creator._handle_create_network({
                "name": f"{project_name}_network",
                "type": architecture.layers[-1].get("activation", "classification"),
                "input_size": architecture.input_size,
                "output_size": architecture.output_size,
                "hidden_layers": [layer["output_size"] for layer in architecture.layers[:-1]]
            })
            project["results"]["network_creation"] = network_result
            project["components_used"].append("neural_network_creator")
            
            # –≠—Ç–∞–ø 3: –û–±—É—á–µ–Ω–∏–µ
            logger.info("üéì –≠—Ç–∞–ø 3: –û–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...")
            training_result = await neural_network_creator._handle_train_network({
                "network_name": network_result["network_name"]
            })
            project["results"]["training"] = training_result
            project["components_used"].append("autonomous_trainer")
            
            # –≠—Ç–∞–ø 4: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
            logger.info("üìä –≠—Ç–∞–ø 4: –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")
            visualization_result = await neural_network_creator._handle_visualize_network({
                "network_name": network_result["network_name"]
            })
            project["results"]["visualization"] = visualization_result
            
            # –≠—Ç–∞–ø 5: –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
            logger.info("üöÄ –≠—Ç–∞–ø 5: –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...")
            deployment_result = await deployment_system.deploy_neural_network(
                network_result["network_name"]
            )
            project["results"]["deployment"] = deployment_result
            project["components_used"].append("deployment_system")
            
            project["status"] = "completed"
            project["completed_at"] = datetime.now().isoformat()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.statistics["networks_created"] += 1
            self.statistics["networks_trained"] += 1
            self.statistics["networks_deployed"] += 1
            self.statistics["total_projects"] += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–µ–∫—Ç
            await self._save_project(project)
            
            logger.info(f"‚úÖ –ü—Ä–æ–µ–∫—Ç {project_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            logger.info(f"üåê API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å–∞–º: {deployment_result.get('endpoints', {})}")
            
            return {
                "message": f"–ü—Ä–æ–µ–∫—Ç '{project_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω",
                "project": project,
                "statistics": self.statistics
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {e}")
            if project_id in self.active_projects:
                self.active_projects[project_id]["status"] = "error"
                self.active_projects[project_id]["error"] = str(e)
            return {"error": str(e)}
    
    async def auto_create_network_with_ai(self, task_description: str) -> Dict[str, Any]:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ—Ö AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            logger.info(f"ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —Å –ò–ò: {task_description}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
            result = await integrated_system.auto_create_network_with_ai(task_description)
            
            if result.get("error"):
                return result
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.statistics["networks_created"] += 1
            self.statistics["networks_trained"] += 1
            self.statistics["total_projects"] += 1
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è: {e}")
            return {"error": str(e)}
    
    async def get_system_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            components_status = {}
            
            # –°—Ç–∞—Ç—É—Å AI –¥–≤–∏–∂–∫–∞
            ai_status = ai_engine.get_status()
            components_status["ai_engine"] = ai_status
            
            # –°—Ç–∞—Ç—É—Å –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π
            networks_status = await neural_network_creator._handle_list_networks({})
            components_status["neural_networks"] = networks_status
            
            # –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞
            trainer_status = await autonomous_trainer.get_training_status()
            components_status["autonomous_trainer"] = trainer_status
            
            # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
            deployment_status = await deployment_system.get_deployment_status()
            components_status["deployment_system"] = deployment_status
            
            # –°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
            integrated_status = await integrated_system.get_system_status()
            components_status["integrated_system"] = integrated_status
            
            return {
                "system_id": self.system_id,
                "system_name": self.system_name,
                "version": self.version,
                "status": self.status,
                "uptime": self._get_uptime(),
                "statistics": self.statistics,
                "active_projects": len(self.active_projects),
                "components": components_status,
                "timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
            return {"error": str(e)}
    
    def _get_uptime(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
        try:
            start_time = datetime.fromisoformat(self.statistics["uptime_start"])
            uptime = datetime.now() - start_time
            return str(uptime)
        except:
            return "unknown"
    
    async def _save_project(self, project: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            project_path = f"/workspace/neural_networks/projects/{project['id']}_project.json"
            with open(project_path, 'w', encoding='utf-8') as f:
                json.dump(project, f, indent=2, ensure_ascii=False)
            
            logger.info(f"üíæ –ü—Ä–æ–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {project_path}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {e}")
    
    async def _save_system_statistics(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            stats_path = f"/workspace/neural_networks/statistics/system_stats_{int(time.time())}.json"
            with open(stats_path, 'w', encoding='utf-8') as f:
                json.dump(self.statistics, f, indent=2, ensure_ascii=False)
            
            logger.info(f"üíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {stats_path}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    async def demo_creation(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"""
        try:
            logger.info("üé¨ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...")
            
            # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–ø—Ä–æ–µ–∫—Ç
            demo_result = await self.create_neural_network_project(
                "–°–æ–∑–¥–∞–π –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä—É–∫–æ–ø–∏—Å–Ω—ã—Ö —Ü–∏—Ñ—Ä (MNIST)",
                "demo_mnist_classifier"
            )
            
            if demo_result.get("error"):
                logger.error(f"‚ùå –î–µ–º–æ –Ω–µ —É–¥–∞–ª–æ—Å—å: {demo_result['error']}")
            else:
                logger.info("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                logger.info(f"üìä –°–æ–∑–¥–∞–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {self.statistics['total_projects']}")
                logger.info(f"üß† –°–æ–∑–¥–∞–Ω–æ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π: {self.statistics['networks_created']}")
                logger.info(f"üéì –û–±—É—á–µ–Ω–æ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π: {self.statistics['networks_trained']}")
                logger.info(f"üöÄ –†–∞–∑–≤–µ—Ä–Ω—É—Ç–æ —Å–µ—Ä–≤–∏—Å–æ–≤: {self.statistics['networks_deployed']}")
            
            return demo_result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            return {"error": str(e)}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã
neural_network_creator_system = NeuralNetworkCreatorSystem()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
        runner = await neural_network_creator_system.start_system()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
        logger.info("üé¨ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")
        demo_result = await neural_network_creator_system.demo_creation()
        
        if not demo_result.get("error"):
            logger.info("üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        status = await neural_network_creator_system.get_system_status()
        logger.info(f"üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {status['status']}")
        logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {status['uptime']}")
        logger.info(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {status['statistics']}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ
        logger.info("üîÑ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ...")
        while True:
            await asyncio.sleep(60)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if int(time.time()) % 300 == 0:  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                status = await neural_network_creator_system.get_system_status()
                logger.info(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {status['active_projects']}")
                logger.info(f"üß† –í—Å–µ–≥–æ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π: {status['statistics']['networks_created']}")
            
    except KeyboardInterrupt:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã Neural Network Creator...")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())