#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≥–µ–Ω—Ç–æ–≤
–†–∞–±–æ—Ç–∞–µ—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏
"""

import asyncio
import json
import logging
import os
import signal
import sys
import time
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Optional

from multi_agent_system import MultiAgentSystem
from ai_engine import ai_engine, generate_ai_response
from chat_server import app, manager, system_stats

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/home/mentor/simple_system.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class SimpleCloudSystem:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"""
    
    def __init__(self):
        self.running = False
        self.multi_agent_system = None
        self.startup_time = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGTERM, self._signal_handler)
        signal.signal(signal.SIGINT, self._signal_handler)
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
        self.running = False
        sys.exit(0)
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("‚òÅÔ∏è –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –æ–±–ª–∞—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
            
            # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –∞–≥–µ–Ω—Ç–æ–≤
            self.multi_agent_system = MultiAgentSystem()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º chat_server –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã
            self._patch_chat_server()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
            self._start_web_server()
            
            self.running = True
            self.startup_time = datetime.now()
            
            logger.info("‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            await self._main_loop()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
            raise
    
    def _patch_chat_server(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ chat_server"""
        try:
            import chat_server
            
            # –û–±–Ω–æ–≤–ª—è–µ–º multi_agent_system –≤ chat_server
            chat_server.multi_agent_system = self.multi_agent_system
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            async def process_user_message_patched(message: str, user_id: str = "user"):
                return await self.multi_agent_system.process_user_message(message, user_id)
            
            # –ù–ï –∑–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏–∏
            # chat_server.multi_agent_system.process_user_message = process_user_message_patched
            
            logger.info("‚úÖ Chat server –æ–±–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è chat_server: {e}")
    
    def _start_web_server(self):
        """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            import uvicorn
            import threading
            
            def run_server():
                uvicorn.run(
                    app,
                    host="0.0.0.0",
                    port=8080,
                    log_level="info"
                )
            
            server_thread = threading.Thread(target=run_server, daemon=True)
            server_thread.start()
            
            logger.info("üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:8080")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")
    
    async def _main_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª"""
        try:
            while self.running:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
                await self._health_check()
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
                await asyncio.sleep(30)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
    
    async def _health_check(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º AI –¥–≤–∏–∂–æ–∫
            ai_status = ai_engine.get_status()
            ai_healthy = ai_status.get("default_engine") != "none"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º—É –∞–≥–µ–Ω—Ç–æ–≤
            system_status = self.multi_agent_system.get_system_status()
            system_healthy = system_status.get("system_status") == "stopped"
            
            if ai_healthy and not system_healthy:
                logger.info("üíö –°–∏—Å—Ç–µ–º–∞ –∑–¥–æ—Ä–æ–≤–∞")
            else:
                logger.warning("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–∏—Å—Ç–µ–º–æ–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        return {
            "running": self.running,
            "startup_time": self.startup_time.isoformat() if self.startup_time else None,
            "system_status": self.multi_agent_system.get_system_status() if self.multi_agent_system else None,
            "ai_status": ai_engine.get_status()
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
simple_cloud_system = SimpleCloudSystem()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
    async def main():
        try:
            await simple_cloud_system.start()
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    asyncio.run(main())
