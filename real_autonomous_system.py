#!/usr/bin/env python3
"""
–†–µ–∞–ª—å–Ω–∞—è –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≥–µ–Ω—Ç–æ–≤ —Å AI
–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –Ω–∞—Å—Ç–æ—è—â–∏–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º
"""

import asyncio
import json
import logging
import time
import signal
import sys
import uuid
from datetime import datetime
from typing import Dict, List, Any, Optional
from pathlib import Path

import uvicorn
from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from fastapi.responses import HTMLResponse, JSONResponse

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AI –¥–≤–∏–∂–æ–∫
from ai_engine import OllamaEngine, AIResponse

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/home/mentor/real_autonomous_system.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
system_running = False
agents = {}
active_agents = set()
task_counter = 0
startup_time = time.time()
autonomous_tasks = []
ai_engine = None

class RealAutonomousAgent:
    """–†–µ–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∞–≥–µ–Ω—Ç —Å AI"""
    
    def __init__(self, agent_id: str, name: str, agent_type: str, skills: List[str], ai_engine):
        self.agent_id = agent_id
        self.name = name
        self.agent_type = agent_type
        self.skills = skills
        self.status = "idle"
        self.last_activity = time.time()
        self.task_count = 0
        self.is_active = False
        self.ai_engine = ai_engine
        self.knowledge_base = []
        self.autonomous_thinking = True
        
    async def process_message(self, message: str, user_id: str = "system") -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AI"""
        try:
            self.last_activity = time.time()
            self.task_count += 1
            self.status = "processing"
            self.is_active = True
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI
            context = f"""
            –¢—ã - {self.name}, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ {', '.join(self.skills)}.
            –¢–≤–æ—è —Ä–æ–ª—å: {self._get_role_description()}
            
            –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message}
            
            –û—Ç–≤–µ—Ç—å –∫–∞–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π {self.name}, –∏—Å–ø–æ–ª—å–∑—É—è —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏.
            """
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            if self.ai_engine:
                try:
                    logger.info(f"ü§ñ {self.name} –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ AI...")
                    
                    # –ü–æ–ª—É—á–∞–µ–º AI –æ—Ç–≤–µ—Ç —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
                    ai_response = await asyncio.wait_for(
                        self.ai_engine.generate_response(
                            context, 
                            max_tokens=50,   # –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã
                            temperature=0.5  # –ë–æ–ª–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–µ –æ—Ç–≤–µ—Ç—ã
                        ),
                        timeout=180.0  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è retry –º–µ—Ö–∞–Ω–∏–∑–º–∞
                    )
                    
                    if ai_response.success:
                        response = ai_response.content
                        logger.info(f"‚úÖ {self.name} –ø–æ–ª—É—á–∏–ª AI –æ—Ç–≤–µ—Ç: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
                    else:
                        response = f"‚ùå –û—à–∏–±–∫–∞ AI: {ai_response.error}"
                        logger.error(f"‚ùå {self.name} –æ—à–∏–±–∫–∞ AI: {ai_response.error}")
                        
                except asyncio.TimeoutError:
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                    response = "‚è∞ AI –Ω–µ —É—Å–ø–µ–ª –æ—Ç–≤–µ—Ç–∏—Ç—å –∑–∞ 180 —Å–µ–∫—É–Ω–¥"
                    logger.warning(f"‚è∞ {self.name} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç 180 —Å–µ–∫")
                except Exception as e:
                    # –õ—é–±–∞—è –æ—à–∏–±–∫–∞ AI - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                    response = f"‚ùå –û—à–∏–±–∫–∞ AI: {str(e)}"
                    if "timeout" in str(e).lower() or "timed out" in str(e).lower():
                        logger.warning(f"‚è∞ {self.name} AI —Ç–∞–π–º–∞—É—Ç")
                    else:
                        logger.error(f"‚ùå {self.name} –æ—à–∏–±–∫–∞ AI: {e}")
            else:
                response = "‚ùå AI –¥–≤–∏–∂–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                logger.warning(f"‚ö†Ô∏è {self.name} AI –¥–≤–∏–∂–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
            self.knowledge_base.append({
                "message": message,
                "response": response,
                "timestamp": datetime.now().isoformat(),
                "user_id": user_id
            })
            
            self.status = "idle"
            # –ê–≥–µ–Ω—Ç –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã
            self.is_active = True
            
            return {
                "response": response,
                "agent": self.name,
                "agent_type": self.agent_type,
                "timestamp": datetime.now().isoformat(),
                "success": True,
                "ai_used": self.ai_engine is not None
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–º {self.name}: {e}")
            self.status = "error"
            self.is_active = False
            return {
                "response": f"–û—à–∏–±–∫–∞: {str(e)}",
                "agent": self.name,
                "agent_type": self.agent_type,
                "timestamp": datetime.now().isoformat(),
                "success": False
            }
    
    def _get_role_description(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏ –∞–≥–µ–Ω—Ç–∞"""
        role_descriptions = {
            "general_assistant": "—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –¥—Ä—É–≥–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤",
            "code_developer": "—ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è, –∑–Ω–∞—é—â–∏–π –º–Ω–æ–∂–µ—Å—Ç–≤–æ —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π",
            "data_analyst": "—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ, –º–∞—à–∏–Ω–Ω–æ–º—É –æ–±—É—á–µ–Ω–∏—é –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
            "project_manager": "–æ–ø—ã—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥",
            "designer": "–∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω–µ—Ä —Å –æ–ø—ã—Ç–æ–º –≤ UI/UX –¥–∏–∑–∞–π–Ω–µ, —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤",
            "qa_tester": "—ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è, –∑–Ω–∞—é—â–∏–π —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
        }
        return role_descriptions.get(self.agent_type, "—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤ —Å–≤–æ–µ–π –æ–±–ª–∞—Å—Ç–∏")
    
    def _get_fallback_response(self, message: str) -> str:
        """–ë—ã—Å—Ç—Ä—ã–π fallback –æ—Ç–≤–µ—Ç –±–µ–∑ AI"""
        if self.agent_type == "general_assistant":
            return f"–ü—Ä–∏–≤–µ—Ç! –Ø {self.name}. –ü–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{message}'. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏!"
        
        elif self.agent_type == "code_developer":
            return f"–Ø {self.name}, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–¥–∞. –ü–æ –ø–æ–≤–æ–¥—É '{message}' - –º–æ–≥—É –ø–æ–º–æ—á—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –Ω–∞ Python, JavaScript, —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–π –∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤."
        
        elif self.agent_type == "data_analyst":
            return f"–Ø {self.name}, –∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö. –ü–æ –ø–æ–≤–æ–¥—É '{message}' - –º–æ–≥—É –ø–æ–º–æ—á—å —Å –∞–Ω–∞–ª–∏–∑–æ–º –¥–∞–Ω–Ω—ã—Ö, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π, –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π."
        
        elif self.agent_type == "project_manager":
            return f"–Ø {self.name}, –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤. –ü–æ –ø–æ–≤–æ–¥—É '{message}' - –º–æ–≥—É –ø–æ–º–æ—á—å —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∑–∞–¥–∞—á–∞–º–∏, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–µ–π."
        
        elif self.agent_type == "designer":
            return f"–Ø {self.name}, –¥–∏–∑–∞–π–Ω–µ—Ä. –ü–æ –ø–æ–≤–æ–¥—É '{message}' - –º–æ–≥—É –ø–æ–º–æ—á—å —Å UI/UX –¥–∏–∑–∞–π–Ω–æ–º, —Å–æ–∑–¥–∞–Ω–∏–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤."
        
        elif self.agent_type == "qa_tester":
            return f"–Ø {self.name}, —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫. –ü–æ –ø–æ–≤–æ–¥—É '{message}' - –º–æ–≥—É –ø–æ–º–æ—á—å —Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –ø–æ–∏—Å–∫–æ–º –±–∞–≥–æ–≤, –∫–∞—á–µ—Å—Ç–≤–æ–º."
        
        else:
            return f"–Ø {self.name}. –ü–æ–ª—É—á–∏–ª: '{message}'. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!"
    
    async def autonomous_think(self) -> Optional[str]:
        """–ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞"""
        if not self.autonomous_thinking:
            return None
            
        try:
            # –ê–≥–µ–Ω—Ç —Å–∞–º –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–¥–µ–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            thinking_prompts = [
                f"{self.name}: —É–ª—É—á—à–µ–Ω–∏–µ.",
                f"{self.name}: –∑–∞–¥–∞—á–∞.",
                f"{self.name}: –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è.",
                f"{self.name}: –∏–¥–µ—è."
            ]
            
            prompt = thinking_prompts[self.task_count % len(thinking_prompts)]
            
            if self.ai_engine:
                ai_response = await self.ai_engine.generate_response(prompt)
                if ai_response.success:
                    return ai_response.content
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ {self.name}: {e}")
            return None

# –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤ —Å AI
async def create_ai_agents():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ —Å AI"""
    global agents, ai_engine
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI –¥–≤–∏–∂–æ–∫
    ai_engine = OllamaEngine()
    
    agents = {
        "general_assistant": RealAutonomousAgent(
            "general_assistant", "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ü–æ–º–æ—â–Ω–∏–∫", "general_assistant",
            ["general_help", "planning", "coordination", "user_query"], ai_engine
        ),
        "code_developer": RealAutonomousAgent(
            "code_developer", "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ö–æ–¥–∞", "code_developer",
            ["code_generation", "debugging", "code_review", "architecture_design"], ai_engine
        ),
        "data_analyst": RealAutonomousAgent(
            "data_analyst", "–ê–Ω–∞–ª–∏—Ç–∏–∫ –î–∞–Ω–Ω—ã—Ö", "data_analyst",
            ["data_analysis", "reporting", "visualization", "predictive_modeling"], ai_engine
        ),
        "project_manager": RealAutonomousAgent(
            "project_manager", "–ú–µ–Ω–µ–¥–∂–µ—Ä –ü—Ä–æ–µ–∫—Ç–æ–≤", "project_manager",
            ["project_planning", "task_management", "resource_allocation", "progress_tracking"], ai_engine
        ),
        "designer": RealAutonomousAgent(
            "designer", "–î–∏–∑–∞–π–Ω–µ—Ä", "designer",
            ["ui_design", "ux_design", "visual_identity"], ai_engine
        ),
        "qa_tester": RealAutonomousAgent(
            "qa_tester", "–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫", "qa_tester",
            ["unit_testing", "integration_testing", "bug_reporting"], ai_engine
        )
    }
    
    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(agents)} AI –∞–≥–µ–Ω—Ç–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º")
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
    for agent in agents.values():
        agent.is_active = True
        agent.status = "active"
    
    logger.info("üöÄ –í—Å–µ –∞–≥–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã")

# –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å AI
async def ai_autonomous_task_generator():
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∑–∞–¥–∞—á —Å AI"""
    global autonomous_tasks, task_counter, agents
    
    while system_running:
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –∫–∞–∂–¥—ã–µ 300 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
            await asyncio.sleep(300)
            
            if not system_running:
                break
                
            task_counter += 1
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏
            if agents:
                agent_id = list(agents.keys())[task_counter % len(agents)]
                agent = agents[agent_id]
                
                # –ê–≥–µ–Ω—Ç —Å–∞–º –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É
                autonomous_idea = await agent.autonomous_think()
                
                if autonomous_idea:
                    task = {
                        "id": f"ai_task_{task_counter}",
                        "description": autonomous_idea,
                        "timestamp": datetime.now().isoformat(),
                        "assigned_to": agent.name,
                        "generated_by": "AI",
                        "status": "assigned"
                    }
                    
                    autonomous_tasks.append(task)
                    logger.info(f"ü§ñ AI –∞–≥–µ–Ω—Ç {agent.name} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∑–∞–¥–∞—á—É: {autonomous_idea[:100]}...")
                    
                    # –ê–≥–µ–Ω—Ç —Å—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á—É
                    await agent.process_message(autonomous_idea, "autonomous_ai")
                    task["status"] = "completed"
                    logger.info(f"‚úÖ AI –∞–≥–µ–Ω—Ç {agent.name} –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞—á—É")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ AI –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∑–∞–¥–∞—á: {e}")
            await asyncio.sleep(15)

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(title="Real Autonomous AI System")

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —á–∞—Ç–æ–º"""
    return HTMLResponse(content="""
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Real Autonomous AI System</title>
        <style>
            * { margin: 0; padding: 0; box-sizing: border-box; }
            body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; }
            .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
            .header { text-align: center; color: white; margin-bottom: 30px; }
            .header h1 { font-size: 2.5em; margin-bottom: 10px; }
            .header p { font-size: 1.2em; opacity: 0.9; }
            .chat-container { display: flex; gap: 20px; height: 600px; }
            .chat-messages { flex: 1; background: white; border-radius: 15px; padding: 20px; overflow-y: auto; box-shadow: 0 10px 30px rgba(0,0,0,0.1); }
            .chat-sidebar { width: 300px; background: rgba(255,255,255,0.95); border-radius: 15px; padding: 20px; box-shadow: 0 10px 30px rgba(0,0,0,0.1); }
            .message { margin-bottom: 15px; padding: 12px; border-radius: 10px; }
            .user-message { background: #e3f2fd; margin-left: 20px; }
            .agent-message { background: #f3e5f5; margin-right: 20px; }
            .system-message { background: #e8f5e8; text-align: center; font-style: italic; }
            .ai-message { background: #fff3e0; border-left: 4px solid #ff9800; }
            .input-container { display: flex; gap: 10px; margin-top: 20px; }
            .message-input { flex: 1; padding: 15px; border: none; border-radius: 25px; font-size: 16px; outline: none; }
            .send-button { padding: 15px 30px; background: #4CAF50; color: white; border: none; border-radius: 25px; cursor: pointer; font-size: 16px; transition: background 0.3s; }
            .send-button:hover { background: #45a049; }
            .system-info { margin-bottom: 20px; }
            .system-info h3 { color: #333; margin-bottom: 10px; }
            .status-item { display: flex; justify-content: space-between; margin-bottom: 5px; }
            .status-indicator { width: 12px; height: 12px; border-radius: 50%; display: inline-block; margin-right: 8px; }
            .status-online { background: #4CAF50; }
            .status-offline { background: #f44336; }
            .agent-selector { margin-bottom: 20px; }
            .agent-selector label { display: block; margin-bottom: 5px; font-weight: bold; color: #333; }
            .agent-selector select { width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 5px; }
            .autonomous-tasks { margin-top: 20px; }
            .autonomous-tasks h3 { color: #333; margin-bottom: 10px; }
            .task-item { background: #f0f0f0; padding: 10px; border-radius: 5px; margin-bottom: 5px; font-size: 0.9em; }
            .ai-task { background: #fff3e0; border-left: 3px solid #ff9800; }
            .system-logs { margin-top: 20px; }
            .system-logs h3 { color: #333; margin-bottom: 10px; }
            .logs-container { max-height: 300px; overflow-y: auto; background: #f8f9fa; border-radius: 5px; padding: 10px; }
            .log-entry { margin-bottom: 8px; padding: 8px; border-radius: 3px; font-size: 0.85em; font-family: monospace; }
            .log-info { background: #e3f2fd; border-left: 3px solid #2196f3; }
            .log-warning { background: #fff3e0; border-left: 3px solid #ff9800; }
            .log-error { background: #ffebee; border-left: 3px solid #f44336; }
            .log-timestamp { color: #666; font-size: 0.8em; }
            .log-message { margin-top: 2px; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üß† Real Autonomous AI System</h1>
                <p>–°–∏—Å—Ç–µ–º–∞ —Å –Ω–∞—Å—Ç–æ—è—â–∏–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º –∏ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å—é</p>
            </div>
            
            <div class="chat-container">
                <div class="chat-messages" id="chatMessages">
                    <div class="message system-message">
                        <strong>–°–∏—Å—Ç–µ–º–∞:</strong> –†–µ–∞–ª—å–Ω–∞—è AI —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞! –ê–≥–µ–Ω—Ç—ã –¥—É–º–∞—é—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–¥–µ–∏.
                    </div>
                </div>
                
                <div class="chat-sidebar">
                    <div class="system-info">
                        <h3>üìä –°—Ç–∞—Ç—É—Å AI —Å–∏—Å—Ç–µ–º—ã</h3>
                        <p><span class="status-indicator status-online"></span>–°–∏—Å—Ç–µ–º–∞: <span id="systemStatus">–ó–∞–≥—Ä—É–∑–∫–∞...</span></p>
                        <p>AI –∞–≥–µ–Ω—Ç–æ–≤: <span id="totalAgents">0</span></p>
                        <p>–ê–∫—Ç–∏–≤–Ω—ã—Ö: <span id="activeAgents">0</span></p>
                        <p>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: <span id="uptime">0–º</span></p>
                        <p>AI –∑–∞–¥–∞—á: <span id="autonomousTasks">0</span></p>
                        <p>AI –¥–≤–∏–∂–æ–∫: <span id="aiEngine">–ü—Ä–æ–≤–µ—Ä–∫–∞...</span></p>
                    </div>
                    
                    <div class="agent-selector">
                        <label for="agentSelect"><strong>–í—ã–±–µ—Ä–∏—Ç–µ AI –∞–≥–µ–Ω—Ç–∞:</strong></label>
                        <select id="agentSelect">
                            <option value="">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä</option>
                            <option value="general_assistant">üß† –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ü–æ–º–æ—â–Ω–∏–∫</option>
                            <option value="code_developer">üíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ö–æ–¥–∞</option>
                            <option value="data_analyst">üìä –ê–Ω–∞–ª–∏—Ç–∏–∫ –î–∞–Ω–Ω—ã—Ö</option>
                            <option value="project_manager">üìã –ú–µ–Ω–µ–¥–∂–µ—Ä –ü—Ä–æ–µ–∫—Ç–æ–≤</option>
                            <option value="designer">üé® –î–∏–∑–∞–π–Ω–µ—Ä</option>
                            <option value="qa_tester">üîç –¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫</option>
                        </select>
                    </div>
                    
                    <div class="autonomous-tasks">
                        <h3>üß† AI –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –∑–∞–¥–∞—á–∏</h3>
                        <div id="autonomousTasksList">
                            <div class="task-item">AI –∞–≥–µ–Ω—Ç—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–¥–µ–∏...</div>
                        </div>
                    </div>
                    
                    <div class="system-logs">
                        <h3>üìã –ï–¥–∏–Ω—ã–π –ª–æ–≥ –¥–µ–π—Å—Ç–≤–∏–π</h3>
                        <div class="logs-container" id="systemLogsList">
                            <div class="log-entry log-info">
                                <div class="log-timestamp">–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤...</div>
                                <div class="log-message">–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–∏—Å—Ç–µ–º–µ –ª–æ–≥–æ–≤</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="input-container">
                <input type="text" id="messageInput" class="message-input" placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å AI –∞–≥–µ–Ω—Ç—É..." />
                <button onclick="sendMessage()" class="send-button">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
            </div>
        </div>

        <script>
            let ws = null;
            let userId = 'user_' + Math.random().toString(36).substr(2, 9);
            
            function connectWebSocket() {
                ws = new WebSocket(`ws://${window.location.host}/ws/${userId}`);
                
                ws.onopen = function() {
                    console.log('WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ AI —Å–∏—Å—Ç–µ–º–µ');
                };
                
                ws.onmessage = function(event) {
                    const data = JSON.parse(event.data);
                    addMessage(data.message, 'agent', data.agent, data.ai_used);
                };
                
                ws.onclose = function() {
                    console.log('WebSocket –æ—Ç–∫–ª—é—á–µ–Ω, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
                    setTimeout(connectWebSocket, 3000);
                };
            }
            
            function addMessage(message, type, agent = '', ai_used = false) {
                const chatMessages = document.getElementById('chatMessages');
                const messageDiv = document.createElement('div');
                
                if (type === 'user') {
                    messageDiv.className = 'message user-message';
                    messageDiv.innerHTML = `<strong>–í—ã:</strong> ${message}`;
                } else {
                    messageDiv.className = ai_used ? 'message ai-message' : 'message agent-message';
                    const aiBadge = ai_used ? ' üß†' : '';
                    messageDiv.innerHTML = `<strong>${agent}${aiBadge}:</strong> ${message}`;
                }
                
                chatMessages.appendChild(messageDiv);
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }
            
            function sendMessage() {
                const input = document.getElementById('messageInput');
                const message = input.value.trim();
                const agentType = document.getElementById('agentSelect').value;
                
                if (message && ws) {
                    addMessage(message, 'user');
                    
                    const payload = {
                        message: message,
                        agent_type: agentType || null,
                        user_id: userId
                    };
                    
                    ws.send(JSON.stringify(payload));
                    input.value = '';
                }
            }
            
            function updateStatus() {
                fetch('/api/system/status')
                    .then(response => response.json())
                    .then(data => {
                        document.getElementById('systemStatus').textContent = data.system_status;
                        document.getElementById('totalAgents').textContent = data.total_agents;
                        document.getElementById('activeAgents').textContent = data.active_agents;
                        document.getElementById('uptime').textContent = data.uptime;
                        document.getElementById('autonomousTasks').textContent = data.autonomous_tasks;
                        document.getElementById('aiEngine').textContent = data.ai_engine_status;
                    })
                    .catch(error => console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error));
            }
            
            function updateAutonomousTasks() {
                fetch('/api/autonomous/tasks')
                    .then(response => response.json())
                    .then(data => {
                        const tasksList = document.getElementById('autonomousTasksList');
                        tasksList.innerHTML = '';
                        
                        if (data.tasks.length === 0) {
                            tasksList.innerHTML = '<div class="task-item">AI –∞–≥–µ–Ω—Ç—ã –¥—É–º–∞—é—Ç...</div>';
                        } else {
                            data.tasks.slice(-5).forEach(task => {
                                const taskDiv = document.createElement('div');
                                taskDiv.className = task.generated_by === 'AI' ? 'task-item ai-task' : 'task-item';
                                taskDiv.innerHTML = `<strong>${task.description}</strong><br><small>AI: ${task.assigned_to} | –°—Ç–∞—Ç—É—Å: ${task.status}</small>`;
                                tasksList.appendChild(taskDiv);
                            });
                        }
                    })
                    .catch(error => console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á:', error));
            }
            
            function updateSystemLogs() {
                fetch('/api/logs')
                    .then(response => response.json())
                    .then(data => {
                        const logsList = document.getElementById('systemLogsList');
                        logsList.innerHTML = '';
                        
                        if (data.logs && data.logs.length > 0) {
                            data.logs.slice(-15).forEach(log => {
                                const logDiv = document.createElement('div');
                                
                                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –ª–æ–≥–∞
                                let logClass = 'log-info';
                                if (log.level === 'WARNING') logClass = 'log-warning';
                                if (log.level === 'ERROR') logClass = 'log-error';
                                
                                logDiv.className = `log-entry ${logClass}`;
                                
                                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                                const time = log.timestamp ? log.timestamp.split(' ')[1] : '';
                                
                                logDiv.innerHTML = `
                                    <div class="log-timestamp">${time} [${log.level}]</div>
                                    <div class="log-message">${log.message}</div>
                                `;
                                
                                logsList.appendChild(logDiv);
                            });
                            
                            // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ª–æ–≥—É
                            logsList.scrollTop = logsList.scrollHeight;
                        } else {
                            logsList.innerHTML = '<div class="log-entry log-info"><div class="log-message">–õ–æ–≥–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...</div></div>';
                        }
                    })
                    .catch(error => {
                        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤:', error);
                        const logsList = document.getElementById('systemLogsList');
                        logsList.innerHTML = '<div class="log-entry log-error"><div class="log-message">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤</div></div>';
                    });
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter
            document.getElementById('messageInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    sendMessage();
                }
            });
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            connectWebSocket();
            updateStatus();
            updateAutonomousTasks();
            updateSystemLogs();
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
            setInterval(updateStatus, 5000);
            setInterval(updateAutonomousTasks, 8000);
            setInterval(updateSystemLogs, 10000);
        </script>
    </body>
    </html>
    """)

@app.get("/api/system/status")
async def get_system_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å AI —Å–∏—Å—Ç–µ–º—ã"""
    global system_running, agents, active_agents, startup_time, autonomous_tasks, ai_engine
    
    uptime_seconds = int(time.time() - startup_time)
    uptime_minutes = uptime_seconds // 60
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ (–≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–Ω—ã –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ)
    active_count = len(agents) if agents else 0
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å AI –¥–≤–∏–∂–∫–∞
    ai_health = {}
    if ai_engine:
        ai_health = ai_engine.get_health_status()
    
    return {
        "system_status": "running" if system_running else "stopped",
        "total_agents": len(agents),
        "active_agents": active_count,
        "uptime": f"{uptime_minutes}–º",
        "autonomous_tasks": len(autonomous_tasks),
        "ai_engine_status": "connected" if ai_engine and ai_engine.is_available() else "disconnected",
        "ai_health": ai_health,
        "timestamp": datetime.now().isoformat()
    }

@app.get("/api/autonomous/tasks")
async def get_autonomous_tasks():
    """–ü–æ–ª—É—á–∏—Ç—å AI –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
    global autonomous_tasks
    return {"tasks": autonomous_tasks[-10:]}  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–¥–∞—á

@app.get("/api/logs")
async def get_system_logs():
    """–ü–æ–ª—É—á–∏—Ç—å –µ–¥–∏–Ω—ã–π –ª–æ–≥ –¥–µ–π—Å—Ç–≤–∏–π —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫ –∏–∑ –ª–æ–≥–∞
        with open('/home/mentor/real_autonomous_system.log', 'r', encoding='utf-8') as f:
            lines = f.readlines()
            recent_logs = lines[-100:] if len(lines) > 100 else lines
        
        # –ü–∞—Ä—Å–∏–º –ª–æ–≥–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        parsed_logs = []
        for line in recent_logs:
            if line.strip():
                # –ü–∞—Ä—Å–∏–º —Ñ–æ—Ä–º–∞—Ç: 2025-09-19 01:36:13,845 - __main__ - INFO - ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ–ª—É—á–∏–ª AI –æ—Ç–≤–µ—Ç: 593 —Å–∏–º–≤–æ–ª–æ–≤
                parts = line.strip().split(' - ', 3)
                if len(parts) >= 4:
                    timestamp = parts[0]
                    module = parts[1]
                    level = parts[2]
                    message = parts[3]
                    
                    parsed_logs.append({
                        "timestamp": timestamp,
                        "module": module,
                        "level": level,
                        "message": message,
                        "raw": line.strip()
                    })
                else:
                    parsed_logs.append({
                        "timestamp": "",
                        "module": "system",
                        "level": "INFO",
                        "message": line.strip(),
                        "raw": line.strip()
                    })
        
        return {
            "logs": parsed_logs,
            "total_count": len(parsed_logs),
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
        return {"error": str(e), "logs": []}

@app.post("/api/chat/send")
async def send_message(data: dict):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ AI –∞–≥–µ–Ω—Ç—É"""
    global agents
    
    message = data.get("message", "")
    agent_type = data.get("agent_type")
    user_id = data.get("user_id", "unknown")
    
    if not message:
        return {"error": "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"}
    
    # –í—ã–±–∏—Ä–∞–µ–º –∞–≥–µ–Ω—Ç–∞
    if agent_type and agent_type in agents:
        agent = agents[agent_type]
    else:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –∞–≥–µ–Ω—Ç–∞
        agent = list(agents.values())[0]
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å AI
    result = await agent.process_message(message, user_id)
    
    return {
        "success": True,
        "response": result,
        "timestamp": datetime.now().isoformat()
    }

@app.websocket("/ws/{user_id}")
async def websocket_endpoint(websocket: WebSocket, user_id: str):
    """WebSocket –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    await websocket.accept()
    
    try:
        while True:
            data = await websocket.receive_text()
            message_data = json.loads(data)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            response = await send_message(message_data)
            
            if response.get("success"):
                result = response["response"]
                await websocket.send_text(json.dumps({
                    "message": result["response"],
                    "agent": result["agent"],
                    "timestamp": result["timestamp"],
                    "ai_used": result.get("ai_used", False)
                }))
            else:
                await websocket.send_text(json.dumps({
                    "message": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
                    "agent": "System",
                    "timestamp": datetime.now().isoformat(),
                    "ai_used": False
                }))
                
    except WebSocketDisconnect:
        logger.info(f"üîå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç AI WebSocket")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global system_running
    
    logger.info("üß† –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π AI —Å–∏—Å—Ç–µ–º—ã...")
    
    # –°–æ–∑–¥–∞–µ–º AI –∞–≥–µ–Ω—Ç–æ–≤
    await create_ai_agents()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
    system_running = True
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º AI –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∑–∞–¥–∞—á
    ai_task_generator = asyncio.create_task(ai_autonomous_task_generator())
    
    logger.info("‚úÖ –†–µ–∞–ª—å–Ω–∞—è AI —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")
    logger.info("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://0.0.0.0:8081")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
        config = uvicorn.Config(app, host="0.0.0.0", port=8081, log_level="info")
        server = uvicorn.Server(config)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
        server_task = asyncio.create_task(server.serve())
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
        await server_task
        
    except KeyboardInterrupt:
        logger.info("üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")
    finally:
        system_running = False
        ai_task_generator.cancel()
        logger.info("üõë –†–µ–∞–ª—å–Ω–∞—è AI —Å–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

if __name__ == "__main__":
    asyncio.run(main())
