#!/usr/bin/env python3
"""
Multi-Agent Autonomous JARVIS System
–ú–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω–∞—è –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ JARVIS —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–µ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
"""

import os
import sys
import json
import time
import asyncio
import threading
import logging
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Optional, Union
from dataclasses import dataclass, asdict
from enum import Enum
import uuid
from abc import ABC, abstractmethod

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/workspace/multi_agent_jarvis.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class AgentType(Enum):
    """–¢–∏–ø—ã –∞–≥–µ–Ω—Ç–æ–≤"""
    COORDINATOR = "coordinator"
    VISUAL_INTELLIGENCE = "visual_intelligence"
    TASK_EXECUTOR = "task_executor"
    MONITORING = "monitoring"
    SELF_IMPROVEMENT = "self_improvement"
    COMMUNICATION = "communication"
    SECURITY = "security"

class MessageType(Enum):
    """–¢–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏"""
    TASK_REQUEST = "task_request"
    TASK_RESPONSE = "task_response"
    STATUS_UPDATE = "status_update"
    COORDINATION = "coordination"
    ALERT = "alert"
    DATA_SHARING = "data_sharing"

@dataclass
class AgentMessage:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏"""
    id: str
    sender_id: str
    recipient_id: Optional[str]  # None –¥–ª—è broadcast
    message_type: MessageType
    content: Dict[str, Any]
    timestamp: str
    priority: int = 5
    requires_response: bool = False

@dataclass
class AgentCapability:
    """–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–∞"""
    name: str
    description: str
    input_types: List[str]
    output_types: List[str]
    performance_score: float = 0.0

@dataclass
class AgentStatus:
    """–°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞"""
    agent_id: str
    agent_type: AgentType
    status: str  # active, busy, idle, error
    last_activity: str
    tasks_completed: int
    performance_score: float
    capabilities: List[AgentCapability]
    current_task: Optional[str] = None

class MessageBus:
    """–®–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–µ–∂–∞–≥–µ–Ω—Ç–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"""
    
    def __init__(self):
        self.subscribers: Dict[str, List[callable]] = {}
        self.message_history: List[AgentMessage] = []
        self.lock = threading.Lock()
    
    def subscribe(self, agent_id: str, callback: callable):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        with self.lock:
            if agent_id not in self.subscribers:
                self.subscribers[agent_id] = []
            self.subscribers[agent_id].append(callback)
    
    def publish(self, message: AgentMessage):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        with self.lock:
            self.message_history.append(message)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            if len(self.message_history) > 1000:
                self.message_history = self.message_history[-500:]
            
            # –î–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if message.recipient_id:
                # –õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if message.recipient_id in self.subscribers:
                    for callback in self.subscribers[message.recipient_id]:
                        try:
                            callback(message)
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {e}")
            else:
                # Broadcast —Å–æ–æ–±—â–µ–Ω–∏–µ
                for agent_id, callbacks in self.subscribers.items():
                    if agent_id != message.sender_id:  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
                        for callback in callbacks:
                            try:
                                callback(message)
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ broadcast {message.id} –¥–ª—è {agent_id}: {e}")
    
    def get_message_history(self, agent_id: Optional[str] = None) -> List[AgentMessage]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        with self.lock:
            if agent_id:
                return [msg for msg in self.message_history 
                       if msg.sender_id == agent_id or msg.recipient_id == agent_id]
            return self.message_history.copy()

class BaseAgent(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –∞–≥–µ–Ω—Ç–∞"""
    
    def __init__(self, agent_id: str, agent_type: AgentType, message_bus: MessageBus):
        self.agent_id = agent_id
        self.agent_type = agent_type
        self.message_bus = message_bus
        self.status = AgentStatus(
            agent_id=agent_id,
            agent_type=agent_type,
            status="idle",
            last_activity=datetime.now().isoformat(),
            tasks_completed=0,
            performance_score=1.0,
            capabilities=self.get_capabilities()
        )
        self.running = True
        self.task_queue = []
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.message_bus.subscribe(agent_id, self.handle_message)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–≥–µ–Ω—Ç–∞
        self.start_agent_loop()
        
        logger.info(f"ü§ñ –ê–≥–µ–Ω—Ç {self.agent_id} ({self.agent_type.value}) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    @abstractmethod
    def get_capabilities(self) -> List[AgentCapability]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –∞–≥–µ–Ω—Ç–∞"""
        pass
    
    @abstractmethod
    async def process_task(self, task: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏"""
        pass
    
    def start_agent_loop(self):
        """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∞–≥–µ–Ω—Ç–∞"""
        def agent_loop():
            while self.running:
                try:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏
                    if self.task_queue:
                        task = self.task_queue.pop(0)
                        asyncio.run(self.execute_task(task))
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    self.update_status()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
                    if int(time.time()) % 30 == 0:  # –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                        self.send_status_update()
                    
                    time.sleep(1)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–≥–µ–Ω—Ç–∞ {self.agent_id}: {e}")
                    time.sleep(5)
        
        thread = threading.Thread(target=agent_loop, daemon=True)
        thread.start()
    
    async def execute_task(self, task: Dict[str, Any]):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        try:
            self.status.status = "busy"
            self.status.current_task = task.get("id", "unknown")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É
            result = await self.process_task(task)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if task.get("sender_id"):
                response = AgentMessage(
                    id=str(uuid.uuid4()),
                    sender_id=self.agent_id,
                    recipient_id=task["sender_id"],
                    message_type=MessageType.TASK_RESPONSE,
                    content={
                        "task_id": task.get("id"),
                        "result": result,
                        "status": "completed"
                    },
                    timestamp=datetime.now().isoformat()
                )
                self.message_bus.publish(response)
            
            self.status.tasks_completed += 1
            self.status.status = "idle"
            self.status.current_task = None
            
            logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç {self.agent_id} –∑–∞–≤–µ—Ä—à–∏–ª –∑–∞–¥–∞—á—É {task.get('id')}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task.get('id')} –∞–≥–µ–Ω—Ç–æ–º {self.agent_id}: {e}")
            self.status.status = "error"
    
    def handle_message(self, message: AgentMessage):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            if message.message_type == MessageType.TASK_REQUEST:
                self.task_queue.append(message.content)
            elif message.message_type == MessageType.COORDINATION:
                self.handle_coordination_message(message)
            elif message.message_type == MessageType.ALERT:
                self.handle_alert_message(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id} –∞–≥–µ–Ω—Ç–æ–º {self.agent_id}: {e}")
    
    def handle_coordination_message(self, message: AgentMessage):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        content = message.content
        
        if content.get("action") == "capability_request":
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è—Ö
            response = AgentMessage(
                id=str(uuid.uuid4()),
                sender_id=self.agent_id,
                recipient_id=message.sender_id,
                message_type=MessageType.COORDINATION,
                content={
                    "action": "capability_response",
                    "capabilities": [asdict(cap) for cap in self.status.capabilities],
                    "status": asdict(self.status)
                },
                timestamp=datetime.now().isoformat()
            )
            self.message_bus.publish(response)
    
    def handle_alert_message(self, message: AgentMessage):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
        logger.warning(f"üö® –ê–ª–µ—Ä—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {self.agent_id}: {message.content.get('message', 'Unknown alert')}")
    
    def send_status_update(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
        message = AgentMessage(
            id=str(uuid.uuid4()),
            sender_id=self.agent_id,
            recipient_id=None,  # Broadcast
            message_type=MessageType.STATUS_UPDATE,
            content=asdict(self.status),
            timestamp=datetime.now().isoformat()
        )
        self.message_bus.publish(message)
    
    def update_status(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–∞"""
        self.status.last_activity = datetime.now().isoformat()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        if self.status.tasks_completed > 0:
            self.status.performance_score = min(1.0, 0.5 + (self.status.tasks_completed * 0.01))

class CoordinatorAgent(BaseAgent):
    """–ê–≥–µ–Ω—Ç-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä"""
    
    def __init__(self, message_bus: MessageBus):
        self.agents_registry: Dict[str, AgentStatus] = {}
        self.task_assignments: Dict[str, str] = {}  # task_id -> agent_id
        super().__init__("coordinator", AgentType.COORDINATOR, message_bus)
    
    def get_capabilities(self) -> List[AgentCapability]:
        return [
            AgentCapability(
                name="task_coordination",
                description="–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∑–∞–¥–∞—á –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏",
                input_types=["task_request", "agent_status"],
                output_types=["task_assignment", "coordination_command"]
            ),
            AgentCapability(
                name="agent_management",
                description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞–º–∏",
                input_types=["agent_registration", "status_update"],
                output_types=["agent_command", "capability_request"]
            )
        ]
    
    async def process_task(self, task: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏"""
        task_type = task.get("type", "unknown")
        
        if task_type == "coordinate_task":
            return await self.coordinate_task(task)
        elif task_type == "manage_agents":
            return await self.manage_agents(task)
        elif task_type == "optimize_performance":
            return await self.optimize_performance(task)
        
        return {"status": "unknown_task_type", "type": task_type}
    
    async def coordinate_task(self, task: Dict[str, Any]) -> Dict[str, Any]:
        """–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        try:
            target_task = task.get("target_task", {})
            required_capabilities = task.get("required_capabilities", [])
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
            best_agent = self.find_best_agent(required_capabilities)
            
            if best_agent:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –∞–≥–µ–Ω—Ç—É
                task_message = AgentMessage(
                    id=str(uuid.uuid4()),
                    sender_id=self.agent_id,
                    recipient_id=best_agent,
                    message_type=MessageType.TASK_REQUEST,
                    content=target_task,
                    timestamp=datetime.now().isoformat(),
                    priority=task.get("priority", 5)
                )
                
                self.message_bus.publish(task_message)
                self.task_assignments[task_message.id] = best_agent
                
                return {
                    "status": "assigned",
                    "agent_id": best_agent,
                    "task_id": task_message.id
                }
            else:
                return {
                    "status": "no_suitable_agent",
                    "required_capabilities": required_capabilities
                }
                
        except Exception as e:
            return {"status": "error", "error": str(e)}
    
    def find_best_agent(self, required_capabilities: List[str]) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á–∏"""
        best_agent = None
        best_score = 0.0
        
        for agent_id, agent_status in self.agents_registry.items():
            if agent_status.status in ["idle", "active"]:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
                agent_capabilities = [cap.name for cap in agent_status.capabilities]
                matches = len(set(required_capabilities) & set(agent_capabilities))
                
                if matches > 0:
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É
                    score = matches / len(required_capabilities) * agent_status.performance_score
                    
                    if score > best_score:
                        best_score = score
                        best_agent = agent_id
        
        return best_agent
    
    async def manage_agents(self, task: Dict[str, Any]) -> Dict[str, Any]:
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞–º–∏"""
        action = task.get("action", "status")
        
        if action == "status":
            return {
                "agents_count": len(self.agents_registry),
                "agents": {aid: asdict(status) for aid, status in self.agents_registry.items()}
            }
        elif action == "restart_agent":
            agent_id = task.get("agent_id")
            if agent_id in self.agents_registry:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                restart_message = AgentMessage(
                    id=str(uuid.uuid4()),
                    sender_id=self.agent_id,
                    recipient_id=agent_id,
                    message_type=MessageType.COORDINATION,
                    content={"action": "restart"},
                    timestamp=datetime.now().isoformat()
                )
                self.message_bus.publish(restart_message)
                return {"status": "restart_sent", "agent_id": agent_id}
        
        return {"status": "unknown_action", "action": action}
    
    async def optimize_performance(self, task: Dict[str, Any]) -> Dict[str, Any]:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–æ–≤
            low_performance_agents = [
                agent_id for agent_id, status in self.agents_registry.items()
                if status.performance_score < 0.7
            ]
            
            # –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–≥—Ä—É–∑–∫—É
            rebalanced_tasks = 0
            for agent_id in low_performance_agents:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                optimize_message = AgentMessage(
                    id=str(uuid.uuid4()),
                    sender_id=self.agent_id,
                    recipient_id=agent_id,
                    message_type=MessageType.COORDINATION,
                    content={"action": "optimize_performance"},
                    timestamp=datetime.now().isoformat()
                )
                self.message_bus.publish(optimize_message)
                rebalanced_tasks += 1
            
            return {
                "status": "optimization_sent",
                "agents_optimized": rebalanced_tasks,
                "low_performance_agents": low_performance_agents
            }
            
        except Exception as e:
            return {"status": "error", "error": str(e)}
    
    def handle_message(self, message: AgentMessage):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞"""
        super().handle_message(message)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–µ—Å—Ç—Ä –∞–≥–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
        if message.message_type == MessageType.STATUS_UPDATE:
            agent_status_data = message.content
            agent_status = AgentStatus(**agent_status_data)
            self.agents_registry[message.sender_id] = agent_status

class VisualIntelligenceAgent(BaseAgent):
    """–ê–≥–µ–Ω—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞"""
    
    def __init__(self, message_bus: MessageBus):
        super().__init__("visual_intelligence", AgentType.VISUAL_INTELLIGENCE, message_bus)
        self.analysis_history = []
    
    def get_capabilities(self) -> List[AgentCapability]:
        return [
            AgentCapability(
                name="screenshot_analysis",
                description="–ê–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
                input_types=["image_data", "ui_state"],
                output_types=["analysis_result", "ui_issues"]
            ),
            AgentCapability(
                name="ui_optimization",
                description="–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
                input_types=["ui_issues", "user_feedback"],
                output_types=["ui_improvements", "optimization_plan"]
            )
        ]
    
    async def process_task(self, task: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        task_type = task.get("type", "unknown")
        
        if task_type == "analyze_interface":
            return await self.analyze_interface(task)
        elif task_type == "optimize_ui":
            return await self.optimize_ui(task)
        elif task_type == "detect_issues":
            return await self.detect_issues(task)
        
        return {"status": "unknown_task_type", "type": task_type}
    
    async def analyze_interface(self, task: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        try:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            interface_data = task.get("interface_data", {})
            
            analysis_result = {
                "timestamp": datetime.now().isoformat(),
                "elements_detected": 5,
                "issues_found": [
                    {
                        "type": "accessibility",
                        "severity": "medium",
                        "description": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç —Ç–µ–∫—Å—Ç–∞",
                        "location": {"x": 100, "y": 200}
                    }
                ],
                "suggestions": [
                    "–£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞",
                    "–î–æ–±–∞–≤–∏—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
                    "–£–ª—É—á—à–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"
                ],
                "ux_score": 0.85,
                "performance_impact": {
                    "loading_time": 1.2,
                    "responsiveness": 0.9
                }
            }
            
            self.analysis_history.append(analysis_result)
            
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç
            critical_issues = [i for i in analysis_result["issues_found"] if i["severity"] == "high"]
            if critical_issues:
                alert = AgentMessage(
                    id=str(uuid.uuid4()),
                    sender_id=self.agent_id,
                    recipient_id=None,  # Broadcast
                    message_type=MessageType.ALERT,
                    content={
                        "type": "critical_ui_issues",
                        "issues": critical_issues,
                        "requires_immediate_action": True
                    },
                    timestamp=datetime.now().isoformat(),
                    priority=9
                )
                self.message_bus.publish(alert)
            
            return {
                "status": "completed",
                "analysis": analysis_result
            }
            
        except Exception as e:
            return {"status": "error", "error": str(e)}
    
    async def optimize_ui(self, task: Dict[str, Any]) -> Dict[str, Any]:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è UI"""
        try:
            issues = task.get("issues", [])
            
            optimizations = []
            for issue in issues:
                if issue["type"] == "accessibility":
                    optimizations.append({
                        "type": "contrast_improvement",
                        "action": "–£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å –¥–æ 4.5:1",
                        "priority": "high"
                    })
                elif issue["type"] == "performance":
                    optimizations.append({
                        "type": "resource_optimization",
                        "action": "–°–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ CSS",
                        "priority": "medium"
                    })
            
            return {
                "status": "completed",
                "optimizations": optimizations,
                "estimated_improvement": 0.15
            }
            
        except Exception as e:
            return {"status": "error", "error": str(e)}
    
    async def detect_issues(self, task: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            recent_analyses = self.analysis_history[-5:] if self.analysis_history else []
            
            patterns = []
            if len(recent_analyses) >= 3:
                # –ò—â–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø—Ä–æ–±–ª–µ–º—ã
                all_issues = []
                for analysis in recent_analyses:
                    all_issues.extend(analysis.get("issues_found", []))
                
                issue_types = {}
                for issue in all_issues:
                    issue_type = issue["type"]
                    issue_types[issue_type] = issue_types.get(issue_type, 0) + 1
                
                for issue_type, count in issue_types.items():
                    if count >= 2:
                        patterns.append({
                            "type": issue_type,
                            "frequency": count,
                            "recommendation": f"–°–∏—Å—Ç–µ–º–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å {issue_type}, —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
                        })
            
            return {
                "status": "completed",
                "patterns_detected": patterns,
                "analysis_count": len(recent_analyses)
            }
            
        except Exception as e:
            return {"status": "error", "error": str(e)}

class TaskExecutorAgent(BaseAgent):
    """–ê–≥–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á"""
    
    def __init__(self, message_bus: MessageBus):
        super().__init__("task_executor", AgentType.TASK_EXECUTOR, message_bus)
    
    def get_capabilities(self) -> List[AgentCapability]:
        return [
            AgentCapability(
                name="general_task_execution",
                description="–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—â–∏—Ö –∑–∞–¥–∞—á",
                input_types=["task_definition", "parameters"],
                output_types=["task_result", "execution_log"]
            ),
            AgentCapability(
                name="automation_tasks",
                description="–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
                input_types=["automation_script", "schedule"],
                output_types=["automation_result", "status_report"]
            )
        ]
    
    async def process_task(self, task: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏"""
        task_type = task.get("type", "unknown")
        
        if task_type == "execute_script":
            return await self.execute_script(task)
        elif task_type == "data_processing":
            return await self.process_data(task)
        elif task_type == "file_operation":
            return await self.file_operation(task)
        
        return {"status": "unknown_task_type", "type": task_type}
    
    async def execute_script(self, task: Dict[str, Any]) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞"""
        try:
            script_content = task.get("script", "")
            parameters = task.get("parameters", {})
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
            result = {
                "status": "completed",
                "output": f"Script executed with parameters: {parameters}",
                "execution_time": 0.5,
                "exit_code": 0
            }
            
            return result
            
        except Exception as e:
            return {"status": "error", "error": str(e)}
    
    async def process_data(self, task: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            data = task.get("data", [])
            operation = task.get("operation", "analyze")
            
            if operation == "analyze":
                result = {
                    "status": "completed",
                    "analysis": {
                        "records_processed": len(data) if isinstance(data, list) else 1,
                        "processing_time": 0.3,
                        "insights": ["Data processed successfully"]
                    }
                }
            elif operation == "transform":
                result = {
                    "status": "completed",
                    "transformed_data": f"Transformed {len(data) if isinstance(data, list) else 1} records",
                    "transformation_rules_applied": 3
                }
            else:
                result = {"status": "unknown_operation", "operation": operation}
            
            return result
            
        except Exception as e:
            return {"status": "error", "error": str(e)}
    
    async def file_operation(self, task: Dict[str, Any]) -> Dict[str, Any]:
        """–û–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏"""
        try:
            operation = task.get("operation", "read")
            file_path = task.get("file_path", "")
            
            if operation == "read":
                result = {
                    "status": "completed",
                    "content": f"Content of {file_path}",
                    "file_size": 1024
                }
            elif operation == "write":
                content = task.get("content", "")
                result = {
                    "status": "completed",
                    "bytes_written": len(content),
                    "file_path": file_path
                }
            elif operation == "delete":
                result = {
                    "status": "completed",
                    "deleted": True,
                    "file_path": file_path
                }
            else:
                result = {"status": "unknown_operation", "operation": operation}
            
            return result
            
        except Exception as e:
            return {"status": "error", "error": str(e)}

class MultiAgentJarvis:
    """–ì–ª–∞–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω–æ–≥–æ JARVIS"""
    
    def __init__(self):
        self.message_bus = MessageBus()
        self.agents: Dict[str, BaseAgent] = {}
        self.system_stats = {
            "start_time": time.time(),
            "messages_processed": 0,
            "tasks_completed": 0,
            "agents_active": 0
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–æ–≤
        self.initialize_agents()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.start_monitoring()
        
        logger.info("üöÄ Multi-Agent JARVIS —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def initialize_agents(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤"""
        try:
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
            self.agents["coordinator"] = CoordinatorAgent(self.message_bus)
            self.agents["visual_intelligence"] = VisualIntelligenceAgent(self.message_bus)
            self.agents["task_executor"] = TaskExecutorAgent(self.message_bus)
            
            logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(self.agents)} –∞–≥–µ–Ω—Ç–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤: {e}")
    
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        def monitoring_loop():
            while True:
                try:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    self.update_system_stats()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –∞–≥–µ–Ω—Ç–æ–≤
                    self.check_agents_health()
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
                    if int(time.time()) % 60 == 0:
                        self.log_system_stats()
                    
                    time.sleep(10)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                    time.sleep(30)
        
        thread = threading.Thread(target=monitoring_loop, daemon=True)
        thread.start()
        logger.info("üìä –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω–∞")
    
    def update_system_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            self.system_stats["messages_processed"] = len(self.message_bus.message_history)
            self.system_stats["agents_active"] = len([
                agent for agent in self.agents.values() 
                if agent.status.status in ["active", "busy", "idle"]
            ])
            self.system_stats["tasks_completed"] = sum(
                agent.status.tasks_completed for agent in self.agents.values()
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def check_agents_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∞–≥–µ–Ω—Ç–æ–≤"""
        try:
            for agent_id, agent in self.agents.items():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                last_activity = datetime.fromisoformat(agent.status.last_activity)
                time_since_activity = (datetime.now() - last_activity).total_seconds()
                
                if time_since_activity > 300:  # 5 –º–∏–Ω—É—Ç –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    logger.warning(f"‚ö†Ô∏è –ê–≥–µ–Ω—Ç {agent_id} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω {time_since_activity:.0f} —Å–µ–∫—É–Ω–¥")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping
                    ping_message = AgentMessage(
                        id=str(uuid.uuid4()),
                        sender_id="system",
                        recipient_id=agent_id,
                        message_type=MessageType.COORDINATION,
                        content={"action": "ping"},
                        timestamp=datetime.now().isoformat()
                    )
                    self.message_bus.publish(ping_message)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –∞–≥–µ–Ω—Ç–æ–≤: {e}")
    
    def log_system_stats(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        uptime = time.time() - self.system_stats["start_time"]
        logger.info(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã: "
            f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime/3600:.1f}—á, "
            f"–ê–≥–µ–Ω—Ç—ã: {self.system_stats['agents_active']}, "
            f"–°–æ–æ–±—â–µ–Ω–∏—è: {self.system_stats['messages_processed']}, "
            f"–ó–∞–¥–∞—á–∏: {self.system_stats['tasks_completed']}"
        )
    
    async def submit_task(self, task_type: str, parameters: Dict[str, Any], priority: int = 5) -> str:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ –≤ —Å–∏—Å—Ç–µ–º—É"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏
            coordination_task = {
                "id": str(uuid.uuid4()),
                "type": "coordinate_task",
                "target_task": {
                    "id": str(uuid.uuid4()),
                    "type": task_type,
                    "parameters": parameters,
                    "priority": priority
                },
                "required_capabilities": self.get_required_capabilities(task_type),
                "sender_id": "system"
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É
            message = AgentMessage(
                id=str(uuid.uuid4()),
                sender_id="system",
                recipient_id="coordinator",
                message_type=MessageType.TASK_REQUEST,
                content=coordination_task,
                timestamp=datetime.now().isoformat(),
                priority=priority
            )
            
            self.message_bus.publish(message)
            
            logger.info(f"üì§ –ó–∞–¥–∞—á–∞ {task_type} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º—É")
            return coordination_task["target_task"]["id"]
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏: {e}")
            return ""
    
    def get_required_capabilities(self, task_type: str) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ–º—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –¥–ª—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏"""
        capability_map = {
            "analyze_interface": ["screenshot_analysis", "ui_optimization"],
            "execute_script": ["general_task_execution"],
            "data_processing": ["general_task_execution"],
            "optimize_ui": ["ui_optimization", "screenshot_analysis"],
            "file_operation": ["general_task_execution"]
        }
        
        return capability_map.get(task_type, ["general_task_execution"])
    
    def get_system_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        return {
            "system_stats": self.system_stats,
            "agents": {
                agent_id: asdict(agent.status) 
                for agent_id, agent in self.agents.items()
            },
            "message_bus": {
                "total_messages": len(self.message_bus.message_history),
                "subscribers": len(self.message_bus.subscribers)
            },
            "timestamp": datetime.now().isoformat()
        }

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω—É—é —Å–∏—Å—Ç–µ–º—É
        jarvis = MultiAgentJarvis()
        
        logger.info("üöÄ Multi-Agent JARVIS —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞!")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã
        await demo_multi_agent_system(jarvis)
        
        # –û–∂–∏–¥–∞–µ–º
        while True:
            await asyncio.sleep(60)
            
    except KeyboardInterrupt:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

async def demo_multi_agent_system(jarvis: MultiAgentJarvis):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –º–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    try:
        logger.info("üéØ –ù–∞—á–∞–ª–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏
        tasks = [
            ("analyze_interface", {"interface_data": {"url": "localhost:8080"}}),
            ("execute_script", {"script": "echo 'Hello from agent'", "parameters": {"env": "production"}}),
            ("data_processing", {"data": [1, 2, 3, 4, 5], "operation": "analyze"}),
            ("optimize_ui", {"issues": [{"type": "accessibility", "severity": "medium"}]})
        ]
        
        task_ids = []
        for task_type, parameters in tasks:
            task_id = await jarvis.submit_task(task_type, parameters, priority=7)
            task_ids.append(task_id)
            await asyncio.sleep(2)
        
        # –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
        logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á...")
        await asyncio.sleep(10)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        status = jarvis.get_system_status()
        logger.info(f"üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {json.dumps(status, indent=2, ensure_ascii=False)}")
        
        logger.info("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")

if __name__ == "__main__":
    asyncio.run(main())