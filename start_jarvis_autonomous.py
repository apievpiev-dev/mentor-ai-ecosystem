#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∑–∞–ø—É—Å–∫ JARVIS
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã JARVIS
"""

import os
import sys
import time
import signal
import subprocess
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/workspace/jarvis_autonomous.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class JarvisAutonomousLauncher:
    def __init__(self):
        self.process = None
        self.running = False
        self.base_path = Path("/workspace")
        self.venv_path = self.base_path / "jarvis_env"
        self.jarvis_script = self.base_path / "jarvis_core_fixed.py"
        
    def check_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        if not self.venv_path.exists():
            logger.error("‚ùå –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫—Ä–∏–ø—Ç JARVIS
        if not self.jarvis_script.exists():
            logger.error("‚ùå –°–∫—Ä–∏–ø—Ç JARVIS –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        logger.info("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã")
        return True
    
    def start_jarvis(self):
        """–ó–∞–ø—É—Å–∫ JARVIS"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ JARVIS...")
        
        try:
            # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
            cmd = [
                str(self.venv_path / "bin" / "python3"),
                str(self.jarvis_script)
            ]
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            self.process = subprocess.Popen(
                cmd,
                cwd=str(self.base_path),
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                preexec_fn=os.setsid
            )
            
            logger.info(f"‚úÖ JARVIS –∑–∞–ø—É—â–µ–Ω (PID: {self.process.pid})")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ JARVIS: {e}")
            return False
    
    def check_jarvis_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è JARVIS"""
        try:
            import requests
            response = requests.get("http://localhost:8080/api/system/status", timeout=5)
            return response.status_code == 200
        except:
            return False
    
    def monitor_jarvis(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ JARVIS"""
        logger.info("üëÅÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ JARVIS...")
        
        while self.running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
                if self.process and self.process.poll() is not None:
                    logger.warning("‚ö†Ô∏è JARVIS –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º...")
                    self.start_jarvis()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —á–µ—Ä–µ–∑ API
                if not self.check_jarvis_health():
                    logger.warning("‚ö†Ô∏è JARVIS –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ API –∑–∞–ø—Ä–æ—Å—ã")
                
                # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥
                time.sleep(30)
                
            except KeyboardInterrupt:
                logger.info("üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
                self.stop()
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(10)
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ JARVIS"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ JARVIS...")
        self.running = False
        
        if self.process:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª SIGTERM
                os.killpg(os.getpgid(self.process.pid), signal.SIGTERM)
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                try:
                    self.process.wait(timeout=10)
                except subprocess.TimeoutExpired:
                    # –ï—Å–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–∏–≤–∞–µ–º
                    os.killpg(os.getpgid(self.process.pid), signal.SIGKILL)
                    self.process.wait()
                
                logger.info("‚úÖ JARVIS –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ JARVIS: {e}")
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª"""
        logger.info("üéØ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ JARVIS...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        if not self.check_dependencies():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º JARVIS
        if not self.start_jarvis():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å JARVIS")
            return False
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
        logger.info("‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫–∞ JARVIS...")
        time.sleep(10)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ JARVIS –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
        if self.check_jarvis_health():
            logger.info("‚úÖ JARVIS —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            logger.info("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω: http://localhost:8080")
            logger.info("üìä API —Å—Ç–∞—Ç—É—Å–∞: http://localhost:8080/api/system/status")
        else:
            logger.warning("‚ö†Ô∏è JARVIS –∑–∞–ø—É—â–µ–Ω, –Ω–æ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.running = True
        self.monitor_jarvis()
        
        return True

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}")
    if 'launcher' in globals():
        launcher.stop()
    sys.exit(0)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global launcher
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ª–∞—É–Ω—á–µ—Ä
    launcher = JarvisAutonomousLauncher()
    
    try:
        launcher.run()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        launcher.stop()

if __name__ == "__main__":
    main()