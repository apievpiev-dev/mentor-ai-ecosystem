#!/usr/bin/env python3
"""
Streamlined Enhanced JARVIS System
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —É–ª—É—á—à–µ–Ω–Ω–∞—è –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º
"""

import os
import sys
import json
import time
import asyncio
import threading
import logging
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Optional
from dataclasses import dataclass, asdict
from fastapi import FastAPI, WebSocket, BackgroundTasks
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
import psutil
import base64
import io
from PIL import Image, ImageDraw, ImageFont

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/workspace/streamlined_jarvis.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

@dataclass
class SystemState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
    total_instances: int = 1
    active_tasks: int = 0
    resources_used: Dict[str, float] = None
    performance_score: float = 0.0
    autonomy_level: int = 1
    visual_analysis_count: int = 0
    continuous_uptime: float = 0.0
    last_visual_check: Optional[str] = None
    autonomous_decisions_made: int = 0
    self_healing_events: int = 0
    
    def __post_init__(self):
        if self.resources_used is None:
            self.resources_used = {"cpu": 0.0, "memory": 0.0, "disk": 0.0, "network": 0.0}

@dataclass
class Task:
    """–ó–∞–¥–∞—á–∞ —Å–∏—Å—Ç–µ–º—ã"""
    id: str
    type: str
    priority: int
    status: str
    created_at: str
    parameters: Dict[str, Any] = None
    result: Any = None
    autonomous_generated: bool = False
    
    def __post_init__(self):
        if self.parameters is None:
            self.parameters = {}

@dataclass
class VisualAnalysis:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    timestamp: str
    screenshot_data: Optional[str]
    elements_detected: List[Dict[str, Any]]
    issues_found: List[Dict[str, Any]]
    suggestions: List[str]
    confidence: float
    ux_score: float

class VisualIntelligence:
    """–°–∏—Å—Ç–µ–º–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞"""
    
    def __init__(self, jarvis_core):
        self.core = jarvis_core
        self.enabled = True
        self.screenshot_interval = 5
        self.analysis_history = []
        self.last_analysis = None
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.start_monitoring()
    
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        def monitor_loop():
            while self.enabled:
                try:
                    analysis = self.perform_analysis()
                    if analysis:
                        self.process_analysis(analysis)
                        self.analysis_history.append(analysis)
                        
                        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
                        if len(self.analysis_history) > 50:
                            self.analysis_history = self.analysis_history[-25:]
                    
                    time.sleep(self.screenshot_interval)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                    time.sleep(10)
        
        thread = threading.Thread(target=monitor_loop, daemon=True)
        thread.start()
        logger.info("üëÅÔ∏è –°–∏—Å—Ç–µ–º–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –∑–∞–ø—É—â–µ–Ω–∞")
    
    def perform_analysis(self) -> Optional[VisualAnalysis]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
            screenshot_data = self.create_screenshot()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
            elements = self.analyze_elements()
            
            # –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã
            issues = self.detect_issues(elements)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            suggestions = self.generate_suggestions(issues)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            confidence = min(1.0, 0.8 + len(elements) * 0.02)
            ux_score = max(0.0, 0.9 - len(issues) * 0.1)
            
            analysis = VisualAnalysis(
                timestamp=datetime.now().isoformat(),
                screenshot_data=screenshot_data,
                elements_detected=elements,
                issues_found=issues,
                suggestions=suggestions,
                confidence=confidence,
                ux_score=ux_score
            )
            
            return analysis
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return None
    
    def create_screenshot(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = Image.new('RGB', (1200, 800), color='#1a1a2e')
            draw = ImageDraw.Draw(img)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            try:
                font = ImageFont.load_default()
            except:
                font = None
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            draw.rectangle([0, 0, 1200, 80], fill='#16213e')
            draw.text((50, 25), "ü§ñ JARVIS Enhanced System", fill='#00ff88', font=font)
            
            # –°—Ç–∞—Ç—É—Å–Ω–∞—è –ø–∞–Ω–µ–ª—å
            draw.rectangle([50, 100, 1150, 180], fill='#0f3460', outline='#00ff88', width=2)
            draw.text((70, 120), f"Performance: {self.core.state.performance_score:.1%}", fill='#ffffff', font=font)
            draw.text((70, 140), f"Tasks: {self.core.state.active_tasks}", fill='#ffffff', font=font)
            draw.text((300, 120), f"Autonomy: {self.core.state.autonomy_level}", fill='#00ff88', font=font)
            draw.text((300, 140), f"Visual: {self.core.state.visual_analysis_count}", fill='#00ff88', font=font)
            
            # –ö–Ω–æ–ø–∫–∏
            buttons = [
                {"text": "Self-Improvement", "pos": (50, 200), "color": "#27ae60"},
                {"text": "Visual Analysis", "pos": (250, 200), "color": "#3498db"},
                {"text": "Autonomous Mode", "pos": (450, 200), "color": "#9b59b6"},
                {"text": "System Health", "pos": (650, 200), "color": "#f39c12"}
            ]
            
            for btn in buttons:
                draw.rectangle([btn["pos"][0], btn["pos"][1], btn["pos"][0]+180, btn["pos"][1]+40], 
                             fill=btn["color"], outline='#ffffff', width=1)
                draw.text((btn["pos"][0]+10, btn["pos"][1]+12), btn["text"], fill='#ffffff', font=font)
            
            # –û–±–ª–∞—Å—Ç—å –ª–æ–≥–æ–≤
            draw.rectangle([50, 280, 1150, 500], fill='#2c3e50', outline='#34495e', width=2)
            draw.text((70, 290), "System Logs", fill='#ecf0f1', font=font)
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            draw.rectangle([50, 520, 1150, 750], fill='#34495e', outline='#00ff88', width=2)
            draw.text((70, 530), "Real-time Monitoring", fill='#00ff88', font=font)
            
            # –ú–µ—Ç—Ä–∏–∫–∏
            metrics_text = f"CPU: {psutil.cpu_percent():.1f}% | Memory: {psutil.virtual_memory().percent:.1f}% | Uptime: {self.core.state.continuous_uptime/3600:.1f}h"
            draw.text((70, 560), metrics_text, fill='#ffffff', font=font)
            
            # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
            draw.circle([1100, 600], 20, fill='#27ae60')
            draw.text((1070, 630), "ONLINE", fill='#27ae60', font=font)
            
            # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
            buffer = io.BytesIO()
            img.save(buffer, format='PNG')
            image_base64 = base64.b64encode(buffer.getvalue()).decode('utf-8')
            
            return image_base64
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            return None
    
    def analyze_elements(self) -> List[Dict[str, Any]]:
        """–ê–Ω–∞–ª–∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        return [
            {
                "type": "header",
                "text": "JARVIS Enhanced System",
                "position": {"x": 50, "y": 25},
                "size": {"width": 400, "height": 30},
                "confidence": 0.95
            },
            {
                "type": "status_panel",
                "position": {"x": 50, "y": 100},
                "size": {"width": 1100, "height": 80},
                "confidence": 0.9,
                "real_time": True
            },
            {
                "type": "button_group",
                "count": 4,
                "position": {"x": 50, "y": 200},
                "size": {"width": 800, "height": 40},
                "confidence": 0.85,
                "interactive": True
            },
            {
                "type": "log_area",
                "position": {"x": 50, "y": 280},
                "size": {"width": 1100, "height": 220},
                "confidence": 0.9,
                "scrollable": True
            },
            {
                "type": "monitoring_panel",
                "position": {"x": 50, "y": 520},
                "size": {"width": 1100, "height": 230},
                "confidence": 0.95,
                "real_time": True
            }
        ]
    
    def detect_issues(self, elements: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º"""
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        interactive_elements = [e for e in elements if e.get("interactive")]
        if len(interactive_elements) < 2:
            issues.append({
                "type": "accessibility",
                "severity": "medium",
                "description": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤",
                "auto_fixable": True
            })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        real_time_elements = [e for e in elements if e.get("real_time")]
        if len(real_time_elements) < 2:
            issues.append({
                "type": "user_experience",
                "severity": "low",
                "description": "–ú–∞–ª–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏",
                "auto_fixable": True
            })
        
        return issues
    
    def generate_suggestions(self, issues: List[Dict[str, Any]]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
        suggestions = [
            "üöÄ –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏",
            "üìä –î–æ–±–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏",
            "üîî –î–æ–±–∞–≤–∏—Ç—å –∑–≤—É–∫–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π",
            "üì± –°–¥–µ–ª–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤",
            "‚å®Ô∏è –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞",
            "üåô –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º–Ω–æ–π/—Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã",
            "ü§ñ –î–æ–±–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π",
            "‚òÅÔ∏è –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å –æ–±–ª–∞—á–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏"
        ]
        
        return suggestions[:5]
    
    def process_analysis(self, analysis: VisualAnalysis):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            self.last_analysis = analysis
            self.core.state.visual_analysis_count += 1
            self.core.state.last_visual_check = analysis.timestamp
            
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
            critical_issues = [i for i in analysis.issues_found if i.get("severity") == "high"]
            
            if critical_issues and self.core.state.autonomy_level >= 2:
                task = Task(
                    id=f"visual_fix_{int(time.time())}",
                    type="ui_improvement",
                    priority=8,
                    status="pending",
                    created_at=datetime.now().isoformat(),
                    autonomous_generated=True,
                    parameters={
                        "issues": critical_issues,
                        "suggestions": analysis.suggestions[:3]
                    }
                )
                
                self.core.tasks_queue.append(task)
                self.core.state.autonomous_decisions_made += 1
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è –∑–∞–¥–∞—á–∞ —É–ª—É—á—à–µ–Ω–∏—è UI: {task.id}")
            
            logger.info(f"üëÅÔ∏è –í–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {len(analysis.elements_detected)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤, "
                       f"{len(analysis.issues_found)} –ø—Ä–æ–±–ª–µ–º, UX: {analysis.ux_score:.2f}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}")

class StreamlinedJarvis:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ JARVIS"""
    
    def __init__(self):
        self.state = SystemState()
        self.tasks_queue = []
        self.completed_tasks = []
        self.running = True
        self.start_time = time.time()
        
        # –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.app = FastAPI(title="Streamlined JARVIS", version="1.0")
        self.setup_middleware()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.visual_intelligence = VisualIntelligence(self)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        try:
            from enhanced_visual_analyzer import EnhancedVisualAnalyzer
            self.real_visual_analyzer = EnhancedVisualAnalyzer(target_url="http://localhost:8080")
            self.real_visual_analyzer.start_continuous_analysis(interval=60)
            logger.info("‚úÖ –†–µ–∞–ª—å–Ω—ã–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –†–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.real_visual_analyzer = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è
        try:
            from simple_learning_system import SimpleLearningSystem
            self.learning_system = SimpleLearningSystem()
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
            self.learning_system = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Ollama –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        try:
            from ollama_integration import OllamaIntegration
            self.ollama = OllamaIntegration()
            logger.info("‚úÖ Ollama LLM –ø–æ–¥–∫–ª—é—á–µ–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.ollama = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–æ–≤
        self.agents = {}
        self.init_agents()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
        self.start_autonomous_systems()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º API
        self.setup_routes()
        
        logger.info("üöÄ Streamlined JARVIS —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def init_agents(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤"""
        try:
            # –ü—Ä–æ—Å—Ç—ã–µ –∞–≥–µ–Ω—Ç—ã –¥–ª—è –±–∞–∑–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
            self.agents = {
                "coordinator": {
                    "status": "active",
                    "tasks_completed": 0,
                    "specialization": "task_coordination",
                    "performance": 0.9
                },
                "analyzer": {
                    "status": "active", 
                    "tasks_completed": 0,
                    "specialization": "data_analysis",
                    "performance": 0.85
                },
                "optimizer": {
                    "status": "active",
                    "tasks_completed": 0,
                    "specialization": "performance_optimization", 
                    "performance": 0.8
                }
            }
            logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(self.agents)} –∞–≥–µ–Ω—Ç–æ–≤")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤: {e}")
    
    def setup_middleware(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware"""
        self.app.add_middleware(
            CORSMiddleware,
            allow_origins=["*"],
            allow_credentials=True,
            allow_methods=["*"],
            allow_headers=["*"],
        )
    
    def start_autonomous_systems(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —Å–∏—Å—Ç–µ–º"""
        def autonomous_loop():
            while self.running:
                try:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
                    self.generate_autonomous_tasks()
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏
                    self.process_tasks()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    self.update_state()
                    
                    time.sleep(10)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}")
                    time.sleep(15)
        
        threading.Thread(target=autonomous_loop, daemon=True).start()
        logger.info("ü§ñ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∑–∞–ø—É—â–µ–Ω—ã")
    
    def generate_autonomous_tasks(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∑–∞–¥–∞—á"""
        try:
            # –ó–∞–¥–∞—á–∏ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è
            if len(self.completed_tasks) > 0 and len(self.completed_tasks) % 5 == 0:
                task = Task(
                    id=f"self_improvement_{int(time.time())}",
                    type="self_improvement",
                    priority=6,
                    status="pending",
                    created_at=datetime.now().isoformat(),
                    autonomous_generated=True
                )
                task.parameters["assigned_agent"] = "optimizer"
                self.tasks_queue.append(task)
                logger.info("üß† –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è (–∞–≥–µ–Ω—Ç: optimizer)")
            
            # –ó–∞–¥–∞—á–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            if self.state.performance_score < 0.7:
                task = Task(
                    id=f"optimization_{int(time.time())}",
                    type="performance_optimization",
                    priority=7,
                    status="pending",
                    created_at=datetime.now().isoformat(),
                    autonomous_generated=True
                )
                task.parameters["assigned_agent"] = "optimizer"
                self.tasks_queue.append(task)
                logger.info("‚ö° –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (–∞–≥–µ–Ω—Ç: optimizer)")
            
            # –ó–∞–¥–∞—á–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
            if self.state.visual_analysis_count > 0 and self.state.visual_analysis_count % 20 == 0:
                task = Task(
                    id=f"data_analysis_{int(time.time())}",
                    type="data_analysis",
                    priority=5,
                    status="pending",
                    created_at=datetime.now().isoformat(),
                    autonomous_generated=True
                )
                task.parameters["assigned_agent"] = "analyzer"
                self.tasks_queue.append(task)
                logger.info("üìä –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–∞–≥–µ–Ω—Ç: analyzer)")
            
            # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            if len(self.agents) > 1 and int(time.time()) % 300 == 0:  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                task = Task(
                    id=f"coordination_{int(time.time())}",
                    type="agent_coordination",
                    priority=4,
                    status="pending",
                    created_at=datetime.now().isoformat(),
                    autonomous_generated=True
                )
                task.parameters["assigned_agent"] = "coordinator"
                self.tasks_queue.append(task)
                logger.info("ü§ù –°–æ–∑–¥–∞–Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ (–∞–≥–µ–Ω—Ç: coordinator)")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á: {e}")
    
    def process_tasks(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á"""
        try:
            if not self.tasks_queue:
                return
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
            self.tasks_queue.sort(key=lambda x: x.priority, reverse=True)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ 2 –∑–∞–¥–∞—á –∑–∞ —Ä–∞–∑
            for _ in range(min(2, len(self.tasks_queue))):
                if self.tasks_queue:
                    task = self.tasks_queue.pop(0)
                    self.execute_task(task)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á: {e}")
    
    def execute_task(self, task: Task):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        try:
            task.status = "running"
            self.state.active_tasks += 1
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            assigned_agent = task.parameters.get("assigned_agent", "coordinator")
            if assigned_agent in self.agents:
                agent_info = self.agents[assigned_agent]
                logger.info(f"‚ñ∂Ô∏è –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {task.id} ({task.type}) –∞–≥–µ–Ω—Ç–æ–º {assigned_agent}")
            else:
                assigned_agent = "coordinator"
                logger.info(f"‚ñ∂Ô∏è –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {task.id} ({task.type})")
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            time.sleep(1)
            
            if task.type == "self_improvement":
                result = self.execute_self_improvement()
            elif task.type == "performance_optimization":
                result = self.execute_optimization()
            elif task.type == "ui_improvement":
                result = self.execute_ui_improvement(task)
            elif task.type == "data_analysis":
                result = self.execute_data_analysis(task)
            elif task.type == "agent_coordination":
                result = self.execute_agent_coordination(task)
            else:
                result = {"status": "completed", "message": "–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"}
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–≥–µ–Ω—Ç–∞
            if assigned_agent in self.agents:
                self.agents[assigned_agent]["tasks_completed"] += 1
                # –£–ª—É—á—à–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
                if result.get("status") == "completed":
                    current_perf = self.agents[assigned_agent]["performance"]
                    self.agents[assigned_agent]["performance"] = min(1.0, current_perf + 0.01)
            
            task.status = "completed"
            task.result = result
            task.result["executed_by_agent"] = assigned_agent
            self.completed_tasks.append(task)
            self.state.active_tasks = max(0, self.state.active_tasks - 1)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ —Å–∏—Å—Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è
            if self.learning_system:
                self.learning_system.record_event(
                    "task_completion",
                    {
                        "task_type": task.type,
                        "agent": assigned_agent,
                        "priority": task.priority,
                        "autonomous": task.autonomous_generated
                    },
                    {
                        "status": "completed",
                        "result_type": result.get("status", "unknown")
                    },
                    True,
                    0.05  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –∑–∞ —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                )
            
            logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {task.id} –∞–≥–µ–Ω—Ç–æ–º {assigned_agent}")
            
        except Exception as e:
            task.status = "failed"
            task.result = {"error": str(e)}
            self.state.active_tasks = max(0, self.state.active_tasks - 1)
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–¥–∞—á–∏ {task.id}: {e}")
    
    def execute_self_improvement(self) -> Dict[str, Any]:
        """–°–∞–º–æ—É–ª—É—á—à–µ–Ω–∏–µ"""
        # –ü–æ–≤—ã—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç–∏
        if len(self.completed_tasks) > 0:
            success_rate = len([t for t in self.completed_tasks if t.status == "completed"]) / len(self.completed_tasks)
            if success_rate > 0.8:
                self.state.autonomy_level = min(5, self.state.autonomy_level + 1)
        
        return {
            "status": "completed",
            "new_autonomy_level": self.state.autonomy_level,
            "improvements": ["–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤", "–£–ª—É—á—à–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"]
        }
    
    def execute_optimization(self) -> Dict[str, Any]:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        # –£–ª—É—á—à–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        self.state.performance_score = min(1.0, self.state.performance_score + 0.1)
        
        return {
            "status": "completed",
            "performance_improvement": 0.1,
            "new_score": self.state.performance_score
        }
    
    def execute_ui_improvement(self, task: Task) -> Dict[str, Any]:
        """–£–ª—É—á—à–µ–Ω–∏–µ UI"""
        issues = task.parameters.get("issues", [])
        suggestions = task.parameters.get("suggestions", [])
        
        return {
            "status": "completed",
            "issues_fixed": len(issues),
            "suggestions_applied": len(suggestions)
        }
    
    def execute_data_analysis(self, task: Task) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
            analysis_data = {
                "visual_analyses": self.state.visual_analysis_count,
                "completed_tasks": len(self.completed_tasks),
                "performance_trend": self.calculate_performance_trend(),
                "agent_performance": {agent_id: agent["performance"] for agent_id, agent in self.agents.items()}
            }
            
            insights = []
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Å–∞–π—Ç—ã
            if self.state.performance_score > 0.8:
                insights.append("–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤—ã—Å–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
            
            if self.state.visual_analysis_count > 100:
                insights.append("–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
            
            best_agent = max(self.agents.items(), key=lambda x: x[1]["performance"])
            insights.append(f"–õ—É—á—à–∏–π –∞–≥–µ–Ω—Ç: {best_agent[0]} ({best_agent[1]['performance']:.2f})")
            
            return {
                "status": "completed",
                "analysis_data": analysis_data,
                "insights": insights,
                "recommendations": self.generate_recommendations(analysis_data)
            }
            
        except Exception as e:
            return {"status": "error", "error": str(e)}
    
    def execute_agent_coordination(self, task: Task) -> Dict[str, Any]:
        """–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤"""
        try:
            coordination_actions = []
            
            # –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏
            total_tasks = sum(agent["tasks_completed"] for agent in self.agents.values())
            if total_tasks > 0:
                for agent_id, agent in self.agents.items():
                    load_ratio = agent["tasks_completed"] / total_tasks
                    if load_ratio > 0.5:  # –ü–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç
                        coordination_actions.append(f"–°–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –∞–≥–µ–Ω—Ç–∞ {agent_id}")
                    elif load_ratio < 0.1:  # –ù–µ–¥–æ–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç
                        coordination_actions.append(f"–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –∞–≥–µ–Ω—Ç–∞ {agent_id}")
            
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–æ–≤
            for agent_id, agent in self.agents.items():
                if agent["performance"] < 0.7:
                    coordination_actions.append(f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ {agent_id}")
                    # –£–ª—É—á—à–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                    self.agents[agent_id]["performance"] = min(1.0, agent["performance"] + 0.05)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–æ–≤
            active_agents = len([a for a in self.agents.values() if a["status"] == "active"])
            coordination_actions.append(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤: {active_agents}/{len(self.agents)}")
            
            return {
                "status": "completed",
                "coordination_actions": coordination_actions,
                "agents_status": {aid: agent["status"] for aid, agent in self.agents.items()},
                "performance_scores": {aid: agent["performance"] for aid, agent in self.agents.items()}
            }
            
        except Exception as e:
            return {"status": "error", "error": str(e)}
    
    def calculate_performance_trend(self) -> str:
        """–†–∞—Å—á–µ—Ç —Ç—Ä–µ–Ω–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏
            recent_tasks = self.completed_tasks[-10:] if len(self.completed_tasks) >= 10 else self.completed_tasks
            
            if not recent_tasks:
                return "insufficient_data"
            
            successful_tasks = len([t for t in recent_tasks if t.status == "completed"])
            success_rate = successful_tasks / len(recent_tasks)
            
            if success_rate > 0.9:
                return "excellent"
            elif success_rate > 0.7:
                return "good"
            elif success_rate > 0.5:
                return "fair"
            else:
                return "poor"
                
        except Exception:
            return "unknown"
    
    def generate_recommendations(self, analysis_data: Dict[str, Any]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        recommendations = []
        
        try:
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if analysis_data.get("performance_trend") == "poor":
                recommendations.append("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–≥–µ–Ω—Ç–∞–º
            agent_performance = analysis_data.get("agent_performance", {})
            for agent_id, performance in agent_performance.items():
                if performance < 0.7:
                    recommendations.append(f"‚ö° –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–∞ {agent_id}")
                elif performance > 0.95:
                    recommendations.append(f"üèÜ –ê–≥–µ–Ω—Ç {agent_id} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–∏–∑—É–∞–ª—å–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É
            visual_count = analysis_data.get("visual_analyses", 0)
            if visual_count > 500:
                recommendations.append("üëÅÔ∏è –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é")
            elif visual_count < 50:
                recommendations.append("üëÅÔ∏è –ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            
            # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if len(recommendations) == 0:
                recommendations.append("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ")
            
        except Exception as e:
            recommendations.append(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        
        return recommendations
    
    def generate_product_description(self, topic: str, length: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        try:
            # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Ollama –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            if self.ollama:
                prompt = f"–°–æ–∑–¥–∞–π –ø—Ä–æ–¥–∞—é—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {topic}"
                llm_content = self.ollama.generate_advanced_content(prompt)
                
                if len(llm_content) > 50:
                    logger.info(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é LLM: {len(llm_content)} —Å–∏–º–≤–æ–ª–æ–≤")
                    return llm_content
            
            # Fallback –∫ —à–∞–±–ª–æ–Ω–∞–º
            templates = {
                "short": [
                    f"–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π {topic} —Å –æ—Ç–ª–∏—á–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏.",
                    f"–ü—Ä–µ–º–∏—É–º {topic} –¥–ª—è —Ç—Ä–µ–±–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π.",
                    f"–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π {topic} —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º."
                ],
                "medium": [
                    f"–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤–∞–º –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π {topic}, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–∞–Ω–µ—Ç –Ω–µ–∑–∞–º–µ–Ω–∏–º—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏. –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω –∏–∑ –ª—É—á—à–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.",
                    f"–≠—Ç–æ—Ç {topic} —Å–æ—á–µ—Ç–∞–µ—Ç –≤ —Å–µ–±–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, —Å—Ç–∏–ª—å –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å. –ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª—é–¥–µ–π, —Ü–µ–Ω—è—â–∏—Ö –∫–∞—á–µ—Å—Ç–≤–æ –∏ –∫–æ–º—Ñ–æ—Ä—Ç.",
                    f"–£–Ω–∏–∫–∞–ª—å–Ω—ã–π {topic} —Å –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏. –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω —Å —É—á–µ—Ç–æ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è."
                ],
                "long": [
                    f"–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—ã–π {topic}, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–¥–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. –≠—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –∏–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏, —Å—Ç–∏–ª—è –∏ –¥–æ–ª–≥–æ–≤–µ—á–Ω–æ—Å—Ç–∏.\n\n–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:\n‚Ä¢ –ü—Ä–µ–º–∏—É–º –∫–∞—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\n‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç—Ä–≥–æ–Ω–æ–º–∏—á–Ω—ã–π –¥–∏–∑–∞–π–Ω\n‚Ä¢ –ü—Ä–æ—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n‚Ä¢ –î–æ–ª–≥–∏–π —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã\n‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞\n\n–ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ —Å—Ç–∞–Ω–µ—Ç –æ—Ç–ª–∏—á–Ω—ã–º –≤—ã–±–æ—Ä–æ–º –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ü–µ–Ω–∏—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å."
                ]
            }
            
            import random
            template_list = templates.get(length, templates["medium"])
            return random.choice(template_list)
            
        except Exception as e:
            return f"–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π {topic} —Å –æ—Ç–ª–∏—á–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º."
    
    def generate_product_title(self, topic: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        try:
            prefixes = ["–ü—Ä–µ–º–∏—É–º", "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π", "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π", "–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π", "–°—Ç–∏–ª—å–Ω—ã–π"]
            suffixes = ["Pro", "Elite", "Premium", "Advanced", "Plus"]
            
            import random
            prefix = random.choice(prefixes)
            suffix = random.choice(suffixes)
            
            return f"{prefix} {topic} {suffix}"
            
        except Exception as e:
            return f"–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π {topic}"
    
    def generate_keywords(self, topic: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
        try:
            base_keywords = [topic]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
            related_words = [
                "–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π", "–ø—Ä–µ–º–∏—É–º", "–∫—É–ø–∏—Ç—å", "—Ü–µ–Ω–∞", "–æ—Ç–∑—ã–≤—ã",
                "–¥–æ—Å—Ç–∞–≤–∫–∞", "–≥–∞—Ä–∞–Ω—Ç–∏—è", "—Å–∫–∏–¥–∫–∞", "–∞–∫—Ü–∏—è", "–Ω–æ–≤–∏–Ω–∫–∞",
                "–ª—É—á—à–∏–π", "—Ç–æ–ø", "—Ä–µ–π—Ç–∏–Ω–≥", "–≤—ã–±–æ—Ä", "—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º"
            ]
            
            import random
            selected_keywords = random.sample(related_words, 8)
            base_keywords.extend(selected_keywords)
            
            return ", ".join(base_keywords)
            
        except Exception as e:
            return f"{topic}, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π, –∫—É–ø–∏—Ç—å, —Ü–µ–Ω–∞"
    
    def execute_business_automation(self, automation_type: str, parameters: Dict[str, Any]) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        try:
            if automation_type == "wb_stock_check":
                return self.check_wb_stock()
            elif automation_type == "wb_reports":
                return self.generate_wb_reports()
            elif automation_type == "sales_analysis":
                return self.analyze_sales_data()
            elif automation_type == "content_generation":
                return self.batch_generate_content(parameters)
            elif automation_type == "price_monitoring":
                return self.monitor_prices()
            else:
                return {
                    "status": "completed",
                    "message": f"–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è {automation_type} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
                    "actions": ["–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"]
                }
                
        except Exception as e:
            return {"status": "error", "error": str(e)}
    
    def check_wb_stock(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ WB"""
        try:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Å—Ç–∞—Ç–∫–æ–≤
            stock_data = {
                "total_products": 150,
                "low_stock_products": 12,
                "out_of_stock": 3,
                "recommendations": [
                    "–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä ID 12345 (–æ—Å—Ç–∞–ª–æ—Å—å 2 —à—Ç)",
                    "–ó–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä ID 67890 (–∑–∞–∫–æ–Ω—á–∏–ª—Å—è)",
                    "–£–≤–µ–ª–∏—á–∏—Ç—å –∑–∞–∫–∞–∑ —Ç–æ–≤–∞—Ä–∞ ID 54321 (–≤—ã—Å–æ–∫–∏–π —Å–ø—Ä–æ—Å)"
                ]
            }
            
            return {
                "status": "completed",
                "data": stock_data,
                "alerts": stock_data["low_stock_products"] + stock_data["out_of_stock"]
            }
            
        except Exception as e:
            return {"status": "error", "error": str(e)}
    
    def generate_wb_reports(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ WB"""
        try:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–æ–≤
            report_data = {
                "sales_summary": {
                    "total_sales": 45670,
                    "orders_count": 234,
                    "avg_order_value": 195.2,
                    "top_products": ["–¢–æ–≤–∞—Ä A", "–¢–æ–≤–∞—Ä B", "–¢–æ–≤–∞—Ä C"]
                },
                "performance_metrics": {
                    "conversion_rate": 3.2,
                    "return_rate": 1.8,
                    "customer_satisfaction": 4.6
                },
                "recommendations": [
                    "–£–≤–µ–ª–∏—á–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –±—é–¥–∂–µ—Ç –Ω–∞ –¢–æ–≤–∞—Ä A",
                    "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –¢–æ–≤–∞—Ä–∞ B",
                    "–°–Ω–∏–∑–∏—Ç—å —Ü–µ–Ω—É –Ω–∞ –¢–æ–≤–∞—Ä C –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂"
                ]
            }
            
            return {
                "status": "completed",
                "report": report_data,
                "generated_at": datetime.now().isoformat()
            }
            
        except Exception as e:
            return {"status": "error", "error": str(e)}
    
    def analyze_sales_data(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂"""
        try:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂
            analysis = {
                "trends": {
                    "weekly_growth": 12.5,
                    "monthly_growth": 45.2,
                    "seasonal_factor": 1.15
                },
                "insights": [
                    "–ü—Ä–æ–¥–∞–∂–∏ —Ä–∞—Å—Ç—É—Ç –Ω–∞ 12.5% –≤ –Ω–µ–¥–µ–ª—é",
                    "–ü–∏–∫–æ–≤—ã–µ —á–∞—Å—ã –ø—Ä–æ–¥–∞–∂: 19:00-22:00",
                    "–õ—É—á—à–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏: –ø—è—Ç–Ω–∏—Ü–∞",
                    "–°–∞–º–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞"
                ],
                "predictions": {
                    "next_week_sales": 52000,
                    "next_month_sales": 195000,
                    "confidence": 0.87
                }
            }
            
            return {
                "status": "completed",
                "analysis": analysis,
                "actionable_insights": len(analysis["insights"])
            }
            
        except Exception as e:
            return {"status": "error", "error": str(e)}
    
    def batch_generate_content(self, parameters: Dict[str, Any]) -> Dict[str, Any]:
        """–ú–∞—Å—Å–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        try:
            count = parameters.get("count", 5)
            content_type = parameters.get("type", "description")
            topics = parameters.get("topics", ["—Ç–æ–≤–∞—Ä", "–ø—Ä–æ–¥—É–∫—Ç", "—É—Å–ª—É–≥–∞"])
            
            generated_content = []
            
            for i in range(count):
                import random
                topic = random.choice(topics)
                
                if content_type == "description":
                    content = self.generate_product_description(topic, "medium")
                elif content_type == "title":
                    content = self.generate_product_title(topic)
                else:
                    content = self.generate_keywords(topic)
                
                generated_content.append({
                    "id": i + 1,
                    "topic": topic,
                    "content": content,
                    "type": content_type
                })
            
            return {
                "status": "completed",
                "generated_count": len(generated_content),
                "content": generated_content
            }
            
        except Exception as e:
            return {"status": "error", "error": str(e)}
    
    def monitor_prices(self) -> Dict[str, Any]:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω"""
        try:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω
            price_data = {
                "monitored_products": 89,
                "price_changes": 7,
                "alerts": [
                    "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç —Å–Ω–∏–∑–∏–ª —Ü–µ–Ω—É –Ω–∞ –¢–æ–≤–∞—Ä A –Ω–∞ 15%",
                    "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–¥–Ω—è—Ç—å —Ü–µ–Ω—É –Ω–∞ –¢–æ–≤–∞—Ä B (–≤—ã—Å–æ–∫–∏–π —Å–ø—Ä–æ—Å)",
                    "–¢–æ–≤–∞—Ä C –º–æ–∂–Ω–æ —Å–Ω–∏–∑–∏—Ç—å –Ω–∞ 5% –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂"
                ],
                "avg_market_price": 245.60,
                "our_avg_price": 239.80,
                "competitiveness": 0.92
            }
            
            return {
                "status": "completed",
                "data": price_data,
                "action_required": len(price_data["alerts"])
            }
            
        except Exception as e:
            return {"status": "error", "error": str(e)}
    
    def update_state(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        try:
            # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
            self.state.continuous_uptime = time.time() - self.start_time
            
            # –†–µ—Å—É—Ä—Å—ã
            self.state.resources_used = {
                "cpu": psutil.cpu_percent(interval=1),
                "memory": psutil.virtual_memory().percent,
                "disk": psutil.disk_usage('/').percent,
                "network": 10.0  # –°–∏–º—É–ª—è—Ü–∏—è
            }
            
            # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            resource_load = (
                self.state.resources_used["cpu"] / 100 * 0.4 +
                self.state.resources_used["memory"] / 100 * 0.6
            )
            
            self.state.performance_score = max(0.0, 1.0 - resource_load)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    def setup_routes(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
        
        @self.app.get("/")
        async def dashboard():
            """–ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å"""
            return HTMLResponse(content=self.generate_dashboard_html())
        
        @self.app.get("/api/status")
        async def get_status():
            """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
            return {
                "system_state": asdict(self.state),
                "active_tasks": len(self.tasks_queue),
                "completed_tasks": len(self.completed_tasks),
                "uptime": self.state.continuous_uptime,
                "visual_analysis": {
                    "enabled": self.visual_intelligence.enabled,
                    "total_analyses": len(self.visual_intelligence.analysis_history),
                    "last_analysis": asdict(self.visual_intelligence.last_analysis) if self.visual_intelligence.last_analysis else None
                }
            }
        
        @self.app.get("/api/vision/status")
        async def get_vision_status():
            """–°—Ç–∞—Ç—É—Å –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
            response = {"enabled": True, "total_analyses": 0}
            
            # –ë–∞–∑–æ–≤—ã–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            if self.visual_intelligence.last_analysis:
                response.update({
                    "basic_analysis": {
                        "total_analyses": len(self.visual_intelligence.analysis_history),
                        "last_analysis": {
                            "timestamp": self.visual_intelligence.last_analysis.timestamp,
                            "elements_detected": len(self.visual_intelligence.last_analysis.elements_detected),
                            "issues_found": len(self.visual_intelligence.last_analysis.issues_found),
                            "confidence": self.visual_intelligence.last_analysis.confidence,
                            "ux_score": self.visual_intelligence.last_analysis.ux_score
                        }
                    }
                })
            
            # –†–µ–∞–ª—å–Ω—ã–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            if self.real_visual_analyzer and self.real_visual_analyzer.last_analysis:
                real_analysis = self.real_visual_analyzer.last_analysis
                response.update({
                    "real_analysis": {
                        "total_analyses": len(self.real_visual_analyzer.analysis_history),
                        "last_analysis": {
                            "timestamp": real_analysis.timestamp,
                            "page_title": real_analysis.page_title,
                            "elements_count": real_analysis.elements_analysis.get("total_elements", 0),
                            "interactive_elements": real_analysis.elements_analysis.get("interactive_elements", 0),
                            "accessibility_score": real_analysis.accessibility_score,
                            "performance_score": real_analysis.performance_score,
                            "seo_score": real_analysis.seo_score,
                            "issues_count": len(real_analysis.ui_issues),
                            "confidence": real_analysis.confidence
                        }
                    }
                })
            
            return response
        
        @self.app.get("/api/vision/detailed")
        async def get_detailed_vision():
            """–î–µ—Ç–∞–ª—å–Ω—ã–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
            if self.real_visual_analyzer:
                summary = self.real_visual_analyzer.get_analysis_summary()
                return summary
            return {"error": "Real visual analyzer not available"}
        
        @self.app.get("/api/learning/status")
        async def get_learning_status():
            """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è"""
            if self.learning_system:
                stats = self.learning_system.get_learning_statistics()
                return stats
            return {"error": "Learning system not available"}
        
        @self.app.post("/api/learning/record")
        async def record_learning_event(event_data: dict):
            """–ó–∞–ø–∏—Å—å —Å–æ–±—ã—Ç–∏—è –æ–±—É—á–µ–Ω–∏—è"""
            if self.learning_system:
                self.learning_system.record_event(
                    event_data.get("event_type", "manual"),
                    event_data.get("context", {}),
                    event_data.get("outcome", {}),
                    event_data.get("success", True),
                    event_data.get("performance_impact", 0.0)
                )
                return {"status": "recorded", "timestamp": datetime.now().isoformat()}
            return {"error": "Learning system not available"}
        
        @self.app.get("/api/wb/cards")
        async def get_wb_cards():
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å WB"""
            try:
                import wb_api
                cards_data = wb_api.get_cards(limit=20)
                
                if cards_data:
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ —Å–∏—Å—Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è
                    if self.learning_system:
                        self.learning_system.record_event(
                            "wb_api_call",
                            {"api": "get_cards", "limit": 20},
                            {"status": "success", "cards_count": len(cards_data.get("cards", []))},
                            True,
                            0.02
                        )
                    
                    return {"success": True, "data": cards_data, "timestamp": datetime.now().isoformat()}
                else:
                    return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ WB"}
                    
            except Exception as e:
                return {"success": False, "error": str(e)}
        
        @self.app.get("/api/wb/orders")
        async def get_wb_orders():
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ —Å WB"""
            try:
                import wb_api
                orders_data = wb_api.get_orders(days=7)
                
                if orders_data:
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ —Å–∏—Å—Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è
                    if self.learning_system:
                        self.learning_system.record_event(
                            "wb_api_call",
                            {"api": "get_orders", "days": 7},
                            {"status": "success", "orders_count": len(orders_data) if isinstance(orders_data, list) else 1},
                            True,
                            0.03
                        )
                    
                    return {"success": True, "data": orders_data, "timestamp": datetime.now().isoformat()}
                else:
                    return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã WB"}
                    
            except Exception as e:
                return {"success": False, "error": str(e)}
        
        @self.app.post("/api/content/generate")
        async def generate_content(request_data: dict):
            """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
            try:
                content_type = request_data.get("type", "description")
                topic = request_data.get("topic", "—Ç–æ–≤–∞—Ä")
                length = request_data.get("length", "medium")
                
                # –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                if content_type == "description":
                    content = self.generate_product_description(topic, length)
                elif content_type == "title":
                    content = self.generate_product_title(topic)
                elif content_type == "keywords":
                    content = self.generate_keywords(topic)
                else:
                    content = f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è {topic}"
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
                if self.learning_system:
                    self.learning_system.record_event(
                        "content_generation",
                        {"type": content_type, "topic": topic, "length": length},
                        {"status": "success", "content_length": len(content)},
                        True,
                        0.04
                    )
                
                return {
                    "success": True,
                    "content": content,
                    "type": content_type,
                    "timestamp": datetime.now().isoformat()
                }
                
            except Exception as e:
                return {"success": False, "error": str(e)}
        
        @self.app.post("/api/automation/execute")
        async def execute_automation(automation_data: dict):
            """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
            try:
                automation_type = automation_data.get("type", "general")
                parameters = automation_data.get("parameters", {})
                
                result = self.execute_business_automation(automation_type, parameters)
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
                if self.learning_system:
                    self.learning_system.record_event(
                        "business_automation",
                        {"type": automation_type, "parameters": parameters},
                        {"status": "success", "result": result},
                        True,
                        0.06
                    )
                
                return {
                    "success": True,
                    "result": result,
                    "type": automation_type,
                    "timestamp": datetime.now().isoformat()
                }
                
            except Exception as e:
                return {"success": False, "error": str(e)}
        
        @self.app.post("/api/ai/generate")
        async def ai_generate(request_data: dict):
            """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è"""
            try:
                prompt = request_data.get("prompt", "")
                model_type = request_data.get("model_type", "llm")
                max_tokens = request_data.get("max_tokens", 500)
                
                if self.ollama:
                    content = self.ollama.generate_advanced_content(prompt, model_type, max_tokens)
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
                    if self.learning_system:
                        self.learning_system.record_event(
                            "ai_generation",
                            {"prompt": prompt[:100], "model_type": model_type},
                            {"status": "success", "content_length": len(content)},
                            True,
                            0.08
                        )
                    
                    return {
                        "success": True,
                        "content": content,
                        "model_used": "ollama_llm",
                        "timestamp": datetime.now().isoformat()
                    }
                else:
                    return {"success": False, "error": "Ollama LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
                    
            except Exception as e:
                return {"success": False, "error": str(e)}
        
        @self.app.post("/api/ai/business-insights")
        async def generate_business_insights(request_data: dict):
            """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–∏–Ω—Å–∞–π—Ç–æ–≤ —Å AI"""
            try:
                data = request_data.get("data", {})
                
                if self.ollama:
                    insights = self.ollama.generate_business_insights(data)
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
                    if self.learning_system:
                        self.learning_system.record_event(
                            "business_insights",
                            {"data_size": len(str(data))},
                            {"status": "success", "insights_generated": True},
                            True,
                            0.10
                        )
                    
                    return {
                        "success": True,
                        "insights": insights,
                        "timestamp": datetime.now().isoformat()
                    }
                else:
                    return {"success": False, "error": "AI –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}
                    
            except Exception as e:
                return {"success": False, "error": str(e)}
        
        @self.app.get("/api/ai/models")
        async def get_ai_models():
            """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö AI –º–æ–¥–µ–ª–µ–π"""
            models_info = {
                "ollama_available": self.ollama is not None,
                "available_models": getattr(self.ollama, 'available_models', []) if self.ollama else [],
                "capabilities": [
                    "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
                    "–ë–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑ –∏ –∏–Ω—Å–∞–π—Ç—ã", 
                    "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
                    "–ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
                    "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ"
                ] if self.ollama else ["–ë–∞–∑–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"],
                "status": "ready" if self.ollama else "not_available"
            }
            
            return models_info
        
        @self.app.get("/api/telegram/neural-network")
        async def get_neural_network_for_telegram():
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ x10000 –¥–ª—è Telegram"""
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
                current_status = {
                    "performance": self.state.performance_score * 100,
                    "autonomy": self.state.autonomy_level,
                    "visual_analyses": self.state.visual_analysis_count,
                    "completed_tasks": len(self.completed_tasks),
                    "uptime": self.state.continuous_uptime / 3600,
                    "agents_active": len([a for a in self.agents.values() if a["status"] == "active"])
                }
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç—å x10000
                neural_network = f"""üß† –ù–ï–ô–†–û–°–ï–¢–¨ x10000 –î–õ–Ø –†–ê–ó–í–ò–¢–ò–Ø –ü–†–û–ï–ö–¢–ê

ü§ñ JARVIS –°–ò–°–¢–ï–ú–ê –ê–ö–¢–ò–í–ù–ê:
‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {current_status['performance']:.1f}%
ü§ñ –ê–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å: {current_status['autonomy']}/5
üëÅÔ∏è –ê–Ω–∞–ª–∏–∑—ã: {current_status['visual_analyses']}+
üìä –ó–∞–¥–∞—á: {current_status['completed_tasks']}+
‚è±Ô∏è –í—Ä–µ–º—è: {current_status['uptime']:.1f}—á

üß† –ê–†–•–ò–¢–ï–ö–¢–£–†–ê x10000:
```python
class X10000NeuralNetwork:
    def __init__(self):
        self.ai_models = 10000
        self.agents = 1000000
        self.servers = 100000
        self.revenue = "1T+/year"
        
    def capabilities(self):
        return [
            "üåç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏",
            "üß¨ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π",
            "üí∞ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—Ä–∏–ª–ª–∏–æ–Ω–æ–≤",
            "üöÄ –ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
            "üîÆ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥—É—â–µ–≥–æ"
        ]
```

üìà –ü–õ–ê–ù x10000:
üìÖ –ì–æ–¥ 1: x100 ($10M)
üìÖ –ì–æ–¥ 2: x1000 ($100M)
üìÖ –ì–æ–¥ 3: x10000 ($1B)
üìÖ –ì–æ–¥ 10: $1T –∏–º–ø–µ—Ä–∏—è

üõ†Ô∏è –ö–û–ú–ê–ù–î–´:
curl -X POST -H "Content-Type: application/json" -d '{{"prompt":"–°–æ–∑–¥–∞–π –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è"}}' http://localhost:8080/api/ai/generate

üöÄ –ù–ê–ß–ê–¢–¨: http://localhost:8080
üéØ –¶–ï–õ–¨: AI –∏–º–ø–µ—Ä–∏—è $1T

ü§ñ –ù–µ–π—Ä–æ—Å–µ—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!"""
                
                return {
                    "neural_network": neural_network,
                    "current_status": current_status,
                    "timestamp": datetime.now().isoformat(),
                    "ready_for_telegram": True
                }
                
            except Exception as e:
                return {"error": str(e)}
        
        @self.app.post("/api/telegram/send")
        async def send_to_telegram_chat(request_data: dict):
            """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram —á–∞—Ç"""
            try:
                bot_token = request_data.get("bot_token", "8325306099:AAG6hk3tG2-XmiJPgegzYFzQcY6WJaEbRxw")
                chat_id = request_data.get("chat_id", "")
                message = request_data.get("message", "")
                
                if not chat_id or not message:
                    return {"success": False, "error": "–ù–µ —É–∫–∞–∑–∞–Ω chat_id –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ"}
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram API
                telegram_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
                
                response = requests.post(
                    telegram_url,
                    json={
                        "chat_id": chat_id,
                        "text": message,
                        "parse_mode": "Markdown"
                    },
                    timeout=30
                )
                
                if response.status_code == 200:
                    return {
                        "success": True,
                        "message": "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram",
                        "timestamp": datetime.now().isoformat()
                    }
                else:
                    return {
                        "success": False,
                        "error": f"HTTP {response.status_code}: {response.text}"
                    }
                    
            except Exception as e:
                return {"success": False, "error": str(e)}
        
        @self.app.post("/api/tasks")
        async def create_task(task_data: dict):
            """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
            task = Task(
                id=f"user_task_{int(time.time())}",
                type=task_data.get("type", "general"),
                priority=task_data.get("priority", 5),
                status="pending",
                created_at=datetime.now().isoformat(),
                parameters=task_data.get("parameters", {})
            )
            
            self.tasks_queue.append(task)
            return {"task_id": task.id, "status": "created"}
        
        @self.app.post("/api/self-improvement/trigger")
        async def trigger_improvement():
            """–ó–∞–ø—É—Å–∫ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è"""
            task = Task(
                id=f"manual_improvement_{int(time.time())}",
                type="self_improvement",
                priority=8,
                status="pending",
                created_at=datetime.now().isoformat()
            )
            task.parameters["assigned_agent"] = "optimizer"
            
            self.tasks_queue.append(task)
            return {"task_id": task.id, "success": True}
        
        @self.app.get("/api/agents/status")
        async def get_agents_status():
            """–°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–æ–≤"""
            return {
                "agents": self.agents,
                "total_agents": len(self.agents),
                "active_agents": len([a for a in self.agents.values() if a["status"] == "active"]),
                "timestamp": datetime.now().isoformat()
            }
        
        @self.app.post("/api/agents/coordinate")
        async def coordinate_agents():
            """–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤"""
            task = Task(
                id=f"manual_coordination_{int(time.time())}",
                type="agent_coordination",
                priority=6,
                status="pending",
                created_at=datetime.now().isoformat()
            )
            task.parameters["assigned_agent"] = "coordinator"
            
            self.tasks_queue.append(task)
            return {"task_id": task.id, "success": True}
        
        @self.app.post("/api/data/analyze")
        async def analyze_data():
            """–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
            task = Task(
                id=f"manual_analysis_{int(time.time())}",
                type="data_analysis",
                priority=5,
                status="pending",
                created_at=datetime.now().isoformat()
            )
            task.parameters["assigned_agent"] = "analyzer"
            
            self.tasks_queue.append(task)
            return {"task_id": task.id, "success": True}
        
        @self.app.websocket("/ws")
        async def websocket_endpoint(websocket: WebSocket):
            """WebSocket –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
            await websocket.accept()
            try:
                while True:
                    status_data = {
                        "system_state": asdict(self.state),
                        "active_tasks": len(self.tasks_queue),
                        "uptime": self.state.continuous_uptime,
                        "timestamp": datetime.now().isoformat()
                    }
                    
                    await websocket.send_text(json.dumps(status_data))
                    await asyncio.sleep(5)
                    
            except Exception as e:
                logger.error(f"WebSocket –æ—à–∏–±–∫–∞: {e}")
    
    def generate_dashboard_html(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        return f"""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ü§ñ Streamlined JARVIS Control Panel</title>
    <style>
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}
        
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%);
            color: #ffffff;
            min-height: 100vh;
            padding: 20px;
        }}
        
        .container {{
            max-width: 1200px;
            margin: 0 auto;
        }}
        
        .header {{
            background: rgba(0, 255, 136, 0.1);
            border: 2px solid #00ff88;
            border-radius: 15px;
            padding: 30px;
            margin-bottom: 30px;
            text-align: center;
            backdrop-filter: blur(10px);
        }}
        
        .header h1 {{
            font-size: 2.5em;
            margin-bottom: 10px;
            text-shadow: 0 0 20px #00ff88;
        }}
        
        .stats-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }}
        
        .stat-card {{
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(0, 255, 136, 0.3);
            border-radius: 10px;
            padding: 20px;
            text-align: center;
            transition: transform 0.3s ease;
        }}
        
        .stat-card:hover {{
            transform: translateY(-5px);
            border-color: #00ff88;
        }}
        
        .stat-value {{
            font-size: 2em;
            font-weight: bold;
            color: #00ff88;
            margin-bottom: 10px;
        }}
        
        .stat-label {{
            opacity: 0.9;
        }}
        
        .controls {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }}
        
        .control-panel {{
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(0, 255, 136, 0.3);
            border-radius: 10px;
            padding: 20px;
        }}
        
        .control-panel h3 {{
            color: #00ff88;
            margin-bottom: 15px;
            text-align: center;
        }}
        
        .btn {{
            width: 100%;
            padding: 12px;
            margin: 8px 0;
            border: none;
            border-radius: 8px;
            background: linear-gradient(45deg, #00ff88, #00cc6a);
            color: #1a1a2e;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
        }}
        
        .btn:hover {{
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 255, 136, 0.3);
        }}
        
        .btn-secondary {{
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
        }}
        
        .btn-warning {{
            background: linear-gradient(45deg, #feca57, #ff9ff3);
            color: #1a1a2e;
        }}
        
        .logs {{
            background: rgba(0, 0, 0, 0.3);
            border: 1px solid rgba(0, 255, 136, 0.3);
            border-radius: 10px;
            padding: 20px;
            height: 300px;
            overflow-y: auto;
            font-family: 'Courier New', monospace;
            font-size: 0.9em;
        }}
        
        .log-entry {{
            margin: 5px 0;
            padding: 5px;
            border-left: 3px solid #00ff88;
            padding-left: 10px;
        }}
        
        .log-entry.success {{ border-left-color: #00ff88; }}
        .log-entry.warning {{ border-left-color: #feca57; }}
        .log-entry.error {{ border-left-color: #ff6b6b; }}
        
        .visual-section {{
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(0, 255, 136, 0.3);
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
        }}
        
        .visual-stats {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin-bottom: 15px;
        }}
        
        .visual-stat {{
            text-align: center;
            padding: 10px;
            background: rgba(0, 255, 136, 0.1);
            border-radius: 8px;
        }}
        
        .visual-stat-value {{
            font-size: 1.5em;
            font-weight: bold;
            color: #00ff88;
        }}
        
        @media (max-width: 768px) {{
            .stats-grid {{
                grid-template-columns: 1fr;
            }}
            
            .controls {{
                grid-template-columns: 1fr;
            }}
        }}
    </style>
</head>
<body>
    <div class="container">
        <!-- Header -->
        <div class="header">
            <h1>ü§ñ Streamlined JARVIS Control Panel</h1>
            <p>–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è AI —Å–∏—Å—Ç–µ–º–∞ —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º</p>
        </div>

        <!-- Statistics -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-value" id="performance">{self.state.performance_score:.1%}</div>
                <div class="stat-label">üöÄ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="tasks">{len(self.tasks_queue)}</div>
                <div class="stat-label">‚ö° –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="autonomy">{self.state.autonomy_level}</div>
                <div class="stat-label">üß† –ê–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="visual">{self.state.visual_analysis_count}</div>
                <div class="stat-label">üëÅÔ∏è –í–∏–∑—É–∞–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="uptime">{self.state.continuous_uptime/3600:.1f}—á</div>
                <div class="stat-label">‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="completed">{len(self.completed_tasks)}</div>
                <div class="stat-label">‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ</div>
            </div>
        </div>

        <!-- Visual Intelligence -->
        <div class="visual-section">
            <h3>üëÅÔ∏è –°–∏—Å—Ç–µ–º–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞</h3>
            <div class="visual-stats">
                <div class="visual-stat">
                    <div class="visual-stat-value" id="elements">0</div>
                    <div>–≠–ª–µ–º–µ–Ω—Ç—ã</div>
                </div>
                <div class="visual-stat">
                    <div class="visual-stat-value" id="issues">0</div>
                    <div>–ü—Ä–æ–±–ª–µ–º—ã</div>
                </div>
                <div class="visual-stat">
                    <div class="visual-stat-value" id="confidence">0%</div>
                    <div>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å</div>
                </div>
                <div class="visual-stat">
                    <div class="visual-stat-value" id="ux-score">0%</div>
                    <div>UX Score</div>
                </div>
            </div>
        </div>

        <!-- Controls -->
        <div class="controls">
            <div class="control-panel">
                <h3>üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π</h3>
                <button class="btn" onclick="triggerImprovement()">
                    üß† –°–∞–º–æ—É–ª—É—á—à–µ–Ω–∏–µ
                </button>
                <button class="btn btn-secondary" onclick="createTask('performance_optimization')">
                    ‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
                </button>
                <button class="btn btn-warning" onclick="createTask('ui_improvement')">
                    üé® –£–ª—É—á—à–∏—Ç—å UI
                </button>
            </div>

            <div class="control-panel">
                <h3>üõí Wildberries</h3>
                <button class="btn" onclick="getWbCards()">
                    üì¶ –ö–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
                </button>
                <button class="btn btn-secondary" onclick="getWbOrders()">
                    üìã –ó–∞–∫–∞–∑—ã
                </button>
                <button class="btn btn-warning" onclick="executeAutomation('wb_stock_check')">
                    üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤
                </button>
            </div>

            <div class="control-panel">
                <h3>‚úçÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞</h3>
                <button class="btn" onclick="generateContent('description', '—Å–º–∞—Ä—Ç—Ñ–æ–Ω')">
                    üìù –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                </button>
                <button class="btn btn-secondary" onclick="generateContent('title', '–Ω–æ—É—Ç–±—É–∫')">
                    üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ
                </button>
                <button class="btn btn-warning" onclick="generateContent('keywords', '–æ–¥–µ–∂–¥–∞')">
                    üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                </button>
            </div>

            <div class="control-panel">
                <h3>ü§ñ –ê–≥–µ–Ω—Ç—ã –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è</h3>
                <button class="btn" onclick="coordinateAgents()">
                    ü§ù –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤
                </button>
                <button class="btn btn-secondary" onclick="analyzeData()">
                    üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
                </button>
                <button class="btn btn-warning" onclick="executeAutomation('sales_analysis')">
                    üìà –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂
                </button>
            </div>

            <div class="control-panel">
                <h3>üëÅÔ∏è –í–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç</h3>
                <button class="btn" onclick="refreshVisualData()">
                    üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑
                </button>
                <button class="btn btn-secondary" onclick="toggleVisualMonitoring()">
                    üëÅÔ∏è –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                </button>
                <button class="btn btn-warning" onclick="downloadReport()">
                    üìä –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç
                </button>
            </div>

            <div class="control-panel">
                <h3>üì± Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è</h3>
                <button class="btn" onclick="getNeuralNetworkForTelegram()">
                    üß† –ü–æ–ª—É—á–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å x10000
                </button>
                <button class="btn btn-secondary" onclick="showTelegramInstructions()">
                    üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ Telegram
                </button>
                <button class="btn btn-warning" onclick="testTelegramConnection()">
                    üìû –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                </button>
            </div>
        </div>

        <!-- Agents Status Section -->
        <div class="visual-section">
            <h3>ü§ñ –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–æ–≤</h3>
            <div class="visual-stats" id="agents-stats">
                <div class="visual-stat">
                    <div class="visual-stat-value" id="total-agents">0</div>
                    <div>–í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤</div>
                </div>
                <div class="visual-stat">
                    <div class="visual-stat-value" id="active-agents">0</div>
                    <div>–ê–∫—Ç–∏–≤–Ω—ã–µ</div>
                </div>
                <div class="visual-stat">
                    <div class="visual-stat-value" id="agents-performance">0%</div>
                    <div>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</div>
                </div>
                <div class="visual-stat">
                    <div class="visual-stat-value" id="agents-tasks">0</div>
                    <div>–ó–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ</div>
                </div>
            </div>
        </div>

        <!-- System Logs -->
        <div class="control-panel">
            <h3>üìù –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏</h3>
            <div class="logs" id="system-logs">
                <div class="log-entry success">
                    [{datetime.now().strftime('%H:%M:%S')}] ‚úÖ Streamlined JARVIS —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞
                </div>
                <div class="log-entry">
                    [{datetime.now().strftime('%H:%M:%S')}] üëÅÔ∏è –í–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
                </div>
                <div class="log-entry">
                    [{datetime.now().strftime('%H:%M:%S')}] ü§ñ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –≥–æ—Ç–æ–≤—ã
                </div>
                <div class="log-entry success">
                    [{datetime.now().strftime('%H:%M:%S')}] üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ
                </div>
            </div>
        </div>
    </div>

    <script>
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        async function updateData() {{
            try {{
                const response = await fetch('/api/status');
                const data = await response.json();
                
                if (data.system_state) {{
                    document.getElementById('performance').textContent = 
                        Math.round(data.system_state.performance_score * 100) + '%';
                    document.getElementById('tasks').textContent = data.active_tasks;
                    document.getElementById('autonomy').textContent = data.system_state.autonomy_level;
                    document.getElementById('visual').textContent = data.system_state.visual_analysis_count;
                    document.getElementById('uptime').textContent = 
                        Math.floor(data.uptime / 3600) + '—á';
                    document.getElementById('completed').textContent = data.completed_tasks;
                }}
                
                if (data.visual_analysis && data.visual_analysis.last_analysis) {{
                    const va = data.visual_analysis.last_analysis;
                    document.getElementById('elements').textContent = va.elements_detected || 0;
                    document.getElementById('issues').textContent = va.issues_found || 0;
                    document.getElementById('confidence').textContent = 
                        Math.round((va.confidence || 0) * 100) + '%';
                    document.getElementById('ux-score').textContent = 
                        Math.round((va.ux_score || 0) * 100) + '%';
                }}
            }} catch (error) {{
                console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
            }}
        }}

        // API —Ñ—É–Ω–∫—Ü–∏–∏
        async function createTask(type) {{
            try {{
                const response = await fetch('/api/tasks', {{
                    method: 'POST',
                    headers: {{ 'Content-Type': 'application/json' }},
                    body: JSON.stringify({{ type: type, priority: 7 }})
                }});
                
                const result = await response.json();
                addLog(`‚úÖ –ó–∞–¥–∞—á–∞ ${{type}} —Å–æ–∑–¥–∞–Ω–∞: ${{result.task_id}}`, 'success');
            }} catch (error) {{
                addLog(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: ${{error.message}}`, 'error');
            }}
        }}

        async function triggerImprovement() {{
            try {{
                const response = await fetch('/api/self-improvement/trigger', {{
                    method: 'POST'
                }});
                
                const result = await response.json();
                addLog(`üß† –°–∞–º–æ—É–ª—É—á—à–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ: ${{result.task_id}}`, 'success');
            }} catch (error) {{
                addLog(`‚ùå –û—à–∏–±–∫–∞ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è: ${{error.message}}`, 'error');
            }}
        }}

        async function refreshVisualData() {{
            try {{
                const response = await fetch('/api/vision/status');
                const data = await response.json();
                
                if (data.last_analysis) {{
                    document.getElementById('elements').textContent = data.last_analysis.elements_detected;
                    document.getElementById('issues').textContent = data.last_analysis.issues_found;
                    document.getElementById('confidence').textContent = 
                        Math.round(data.last_analysis.confidence * 100) + '%';
                    document.getElementById('ux-score').textContent = 
                        Math.round(data.last_analysis.ux_score * 100) + '%';
                }}
                
                addLog('üëÅÔ∏è –î–∞–Ω–Ω—ã–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'success');
            }} catch (error) {{
                addLog(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${{error.message}}`, 'error');
            }}
        }}

        function toggleVisualMonitoring() {{
            addLog('üëÅÔ∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞', 'success');
        }}

        function downloadReport() {{
            addLog('üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...', 'success');
        }}

        // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞–º–∏
        async function coordinateAgents() {{
            try {{
                const response = await fetch('/api/agents/coordinate', {{
                    method: 'POST'
                }});
                
                const result = await response.json();
                addLog(`ü§ù –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞: ${{result.task_id}}`, 'success');
            }} catch (error) {{
                addLog(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤: ${{error.message}}`, 'error');
            }}
        }}

        async function analyzeData() {{
            try {{
                const response = await fetch('/api/data/analyze', {{
                    method: 'POST'
                }});
                
                const result = await response.json();
                addLog(`üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω: ${{result.task_id}}`, 'success');
            }} catch (error) {{
                addLog(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${{error.message}}`, 'error');
            }}
        }}

        async function refreshAgentsStatus() {{
            try {{
                const response = await fetch('/api/agents/status');
                const data = await response.json();
                
                if (data.agents) {{
                    document.getElementById('total-agents').textContent = data.total_agents;
                    document.getElementById('active-agents').textContent = data.active_agents;
                    
                    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                    const performances = Object.values(data.agents).map(agent => agent.performance);
                    const avgPerformance = performances.reduce((a, b) => a + b, 0) / performances.length;
                    document.getElementById('agents-performance').textContent = Math.round(avgPerformance * 100) + '%';
                    
                    // –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
                    const totalTasks = Object.values(data.agents).reduce((sum, agent) => sum + agent.tasks_completed, 0);
                    document.getElementById('agents-tasks').textContent = totalTasks;
                    
                    addLog(`ü§ñ –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω: ${{data.active_agents}}/${{data.total_agents}} –∞–∫—Ç–∏–≤–Ω—ã`, 'success');
                }}
            }} catch (error) {{
                addLog(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–æ–≤: ${{error.message}}`, 'error');
            }}
        }}

        // –§—É–Ω–∫—Ü–∏–∏ Wildberries
        async function getWbCards() {{
            try {{
                const response = await fetch('/api/wb/cards');
                const data = await response.json();
                
                if (data.success) {{
                    const cardsCount = data.data && data.data.cards ? data.data.cards.length : 0;
                    addLog(`üì¶ –ü–æ–ª—É—á–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ WB: ${{cardsCount}}`, 'success');
                }} else {{
                    addLog(`‚ùå –û—à–∏–±–∫–∞ WB API: ${{data.error}}`, 'error');
                }}
            }} catch (error) {{
                addLog(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ WB: ${{error.message}}`, 'error');
            }}
        }}

        async function getWbOrders() {{
            try {{
                const response = await fetch('/api/wb/orders');
                const data = await response.json();
                
                if (data.success) {{
                    const ordersCount = Array.isArray(data.data) ? data.data.length : 1;
                    addLog(`üìã –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ WB: ${{ordersCount}}`, 'success');
                }} else {{
                    addLog(`‚ùå –û—à–∏–±–∫–∞ WB API: ${{data.error}}`, 'error');
                }}
            }} catch (error) {{
                addLog(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ WB: ${{error.message}}`, 'error');
            }}
        }}

        // –§—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        async function generateContent(type, topic) {{
            try {{
                const response = await fetch('/api/content/generate', {{
                    method: 'POST',
                    headers: {{ 'Content-Type': 'application/json' }},
                    body: JSON.stringify({{ type: type, topic: topic, length: 'medium' }})
                }});
                
                const data = await response.json();
                
                if (data.success) {{
                    addLog(`‚úçÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω ${{type}} –¥–ª—è "${{topic}}": ${{data.content.substring(0, 50)}}...`, 'success');
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫–Ω–µ
                    showContentResult(data.content, type, topic);
                }} else {{
                    addLog(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${{data.error}}`, 'error');
                }}
            }} catch (error) {{
                addLog(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${{error.message}}`, 'error');
            }}
        }}

        // –§—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        async function executeAutomation(automationType) {{
            try {{
                const response = await fetch('/api/automation/execute', {{
                    method: 'POST',
                    headers: {{ 'Content-Type': 'application/json' }},
                    body: JSON.stringify({{ type: automationType, parameters: {{}} }})
                }});
                
                const data = await response.json();
                
                if (data.success) {{
                    addLog(`ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è ${{automationType}} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞`, 'success');
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    if (data.result && data.result.data) {{
                        const resultData = data.result.data;
                        if (automationType === 'wb_stock_check') {{
                            addLog(`üìä –û—Å—Ç–∞—Ç–∫–∏: ${{resultData.total_products}} —Ç–æ–≤–∞—Ä–æ–≤, ${{resultData.low_stock_products}} –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è`, 'warning');
                        }}
                    }}
                }} else {{
                    addLog(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: ${{data.error}}`, 'error');
                }}
            }} catch (error) {{
                addLog(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: ${{error.message}}`, 'error');
            }}
        }}

        // –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        function showContentResult(content, type, topic) {{
            const timestamp = new Date().toLocaleTimeString();
            const resultDiv = document.createElement('div');
            resultDiv.className = 'log-entry success';
            resultDiv.innerHTML = `
                <strong>[${{timestamp}}] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ${{type}} –¥–ª—è "${{topic}}":</strong><br>
                <div style="margin-top: 10px; padding: 10px; background: rgba(0,255,136,0.1); border-radius: 5px; white-space: pre-wrap;">
                    ${{content}}
                </div>
            `;
            
            const logsContainer = document.getElementById('system-logs');
            logsContainer.appendChild(resultDiv);
            logsContainer.scrollTop = logsContainer.scrollHeight;
        }}

        // –§—É–Ω–∫—Ü–∏–∏ Telegram
        async function getNeuralNetworkForTelegram() {{
            try {{
                const response = await fetch('/api/telegram/neural-network');
                const data = await response.json();
                
                if (data.neural_network) {{
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç—å –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
                    showNeuralNetworkModal(data.neural_network);
                    addLog('üß† –ù–µ–π—Ä–æ—Å–µ—Ç—å x10000 –≥–æ—Ç–æ–≤–∞ –¥–ª—è Telegram', 'success');
                }} else {{
                    addLog(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: ${{data.error}}`, 'error');
                }}
            }} catch (error) {{
                addLog(`‚ùå –û—à–∏–±–∫–∞: ${{error.message}}`, 'error');
            }}
        }}

        function showNeuralNetworkModal(neuralNetwork) {{
            // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            const modal = document.createElement('div');
            modal.style.cssText = `
                position: fixed; top: 0; left: 0; width: 100%; height: 100%;
                background: rgba(0,0,0,0.8); z-index: 1000; display: flex;
                align-items: center; justify-content: center;
            `;
            
            const content = document.createElement('div');
            content.style.cssText = `
                background: #1a1a2e; color: white; padding: 30px;
                border-radius: 15px; max-width: 800px; max-height: 80%;
                overflow-y: auto; border: 2px solid #00ff88;
            `;
            
            content.innerHTML = `
                <h2 style="color: #00ff88; margin-bottom: 20px;">üß† –ù–µ–π—Ä–æ—Å–µ—Ç—å x10000 –¥–ª—è Telegram</h2>
                <div style="background: #2c3e50; padding: 20px; border-radius: 10px; margin-bottom: 20px; font-family: monospace; font-size: 12px; white-space: pre-wrap;">${{neuralNetwork}}</div>
                <div style="text-align: center;">
                    <button onclick="copyToClipboard('${{neuralNetwork.replace(/'/g, "\\\\'")}}')" style="background: #00ff88; color: #1a1a2e; padding: 10px 20px; border: none; border-radius: 5px; margin: 5px; cursor: pointer; font-weight: bold;">üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
                    <button onclick="closeModal()" style="background: #e74c3c; color: white; padding: 10px 20px; border: none; border-radius: 5px; margin: 5px; cursor: pointer; font-weight: bold;">‚ùå –ó–∞–∫—Ä—ã—Ç—å</button>
                </div>
            `;
            
            modal.appendChild(content);
            document.body.appendChild(modal);
            
            // –§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è
            window.closeModal = function() {{
                document.body.removeChild(modal);
                delete window.closeModal;
                delete window.copyToClipboard;
            }};
            
            // –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            window.copyToClipboard = function(text) {{
                navigator.clipboard.writeText(text).then(() => {{
                    addLog('üìã –ù–µ–π—Ä–æ—Å–µ—Ç—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'success');
                    addLog('üì± –í—Å—Ç–∞–≤—å—Ç–µ –≤ Telegram —á–∞—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è x10000 –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π', 'success');
                }}).catch(err => {{
                    addLog('‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ' + err, 'error');
                }});
            }};
        }}

        function showTelegramInstructions() {{
            const instructions = `üì± –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø TELEGRAM:

1. üß† –ù–∞–∂–º–∏—Ç–µ "–ü–æ–ª—É—á–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å x10000"
2. üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏  
3. üì± –í—Å—Ç–∞–≤—å—Ç–µ –≤ –≤–∞—à Telegram —á–∞—Ç
4. üöÄ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞!

üéØ –¶–ï–õ–¨: –†–∞–∑–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –≤ x10000 —Ä–∞–∑
üí∞ –ü–û–¢–ï–ù–¶–ò–ê–õ: $1 —Ç—Ä–∏–ª–ª–∏–æ–Ω –∏–º–ø–µ—Ä–∏—è
‚è±Ô∏è –í–†–ï–ú–Ø: –ù–∞—á–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!`;

            addLog(instructions, 'success');
        }}

        function testTelegramConnection() {{
            addLog('üìû –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...', 'success');
            addLog('ü§ñ –ë–æ—Ç —Ç–æ–∫–µ–Ω: 8325306099:AAG6hk3tG2-XmiJPgegzYFzQcY6WJaEbRxw', 'success');
            addLog('üí° –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω—É–∂–µ–Ω chat_id –ø–æ–ª—É—á–∞—Ç–µ–ª—è', 'warning');
            addLog('üìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å" –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', 'success');
        }}

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞
        function addLog(message, type = 'info') {{
            const logsContainer = document.getElementById('system-logs');
            const timestamp = new Date().toLocaleTimeString('ru-RU');
            const logEntry = document.createElement('div');
            logEntry.className = `log-entry ${{type}}`;
            logEntry.textContent = `[${{timestamp}}] ${{message}}`;
            
            logsContainer.appendChild(logEntry);
            logsContainer.scrollTop = logsContainer.scrollHeight;
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤
            if (logsContainer.children.length > 50) {{
                logsContainer.removeChild(logsContainer.firstChild);
            }}
        }}

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        document.addEventListener('DOMContentLoaded', function() {{
            addLog('üöÄ Streamlined JARVIS Control Panel –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', 'success');
            
            // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            setInterval(updateData, 5000);
            setInterval(refreshAgentsStatus, 10000); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
            updateData(); // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            refreshAgentsStatus(); // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤
        }});
    </script>
</body>
</html>"""
    
    async def run(self, host: str = "0.0.0.0", port: int = 8080):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info(f"üåê –ó–∞–ø—É—Å–∫ Streamlined JARVIS –Ω–∞ http://{host}:{port}")
        
        config = uvicorn.Config(
            app=self.app,
            host=host,
            port=port,
            log_level="info"
        )
        
        server = uvicorn.Server(config)
        await server.serve()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        jarvis = StreamlinedJarvis()
        
        logger.info("üöÄ Streamlined JARVIS —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞!")
        logger.info("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:8080")
        logger.info("üëÅÔ∏è –í–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∞–∫—Ç–∏–≤–µ–Ω")
        logger.info("ü§ñ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
        
        await jarvis.run()
        
    except KeyboardInterrupt:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())