#!/usr/bin/env python3
"""
–û–±–ª–∞—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã –æ–Ω–ª–∞–π–Ω
–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Å–µ—Ä–≤–µ—Ä —Å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–æ–º –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
"""

import asyncio
import json
import logging
import os
import signal
import sys
import time
import subprocess
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Optional
import threading
import schedule

from integrated_agent_system import integrated_system
from ai_engine import ai_engine
from ai_manager_agent import ai_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/home/mentor/cloud_system.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class CloudAgentSystem:
    """–û–±–ª–∞—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.running = False
        self.auto_restart = True
        self.health_check_interval = 300  # 5 –º–∏–Ω—É—Ç
        self.backup_interval = 3600  # 1 —á–∞—Å
        self.system_state_file = Path("/home/mentor/system_state.json")
        self.pid_file = Path("/home/mentor/cloud_system.pid")
        self.health_status = "unknown"
        self.last_health_check = None
        self.startup_time = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGTERM, self._signal_handler)
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGHUP, self._signal_handler)
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
        self.running = False
        self._save_system_state()
        sys.exit(0)
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –æ–±–ª–∞—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("‚òÅÔ∏è –ó–∞–ø—É—Å–∫ –æ–±–ª–∞—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–≥–µ–Ω—Ç–æ–≤...")
            
            # –°–æ–∑–¥–∞–µ–º PID —Ñ–∞–π–ª
            with open(self.pid_file, 'w') as f:
                f.write(str(os.getpid()))
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
            await self._load_system_state()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
            await integrated_system.start()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º AI –º–µ–Ω–µ–¥–∂–µ—Ä
            await self._start_ai_manager()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            self._start_monitoring()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
            self._start_scheduler()
            
            self.running = True
            self.startup_time = datetime.now()
            self.health_status = "healthy"
            
            logger.info("‚úÖ –û–±–ª–∞—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≥–µ–Ω—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞")
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            await self._main_loop()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±–ª–∞—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}")
            raise
    
    async def _start_ai_manager(self):
        """–ó–∞–ø—É—Å–∫ AI –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        try:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º AI –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ —Å–∏—Å—Ç–µ–º–µ
            integrated_system.multi_agent_system.agents[ai_manager.agent_id] = ai_manager
            ai_manager.set_shared_memory(integrated_system.shared_memory)
            integrated_system.coordinator.register_agent(ai_manager)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥–µ–ª–∏
            await ai_manager.auto_install_models()
            
            logger.info("‚úÖ AI –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–ø—É—â–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ AI –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
    
    def _start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã"""
        def monitor_loop():
            while self.running:
                try:
                    self._health_check()
                    time.sleep(self.health_check_interval)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                    time.sleep(60)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
        monitor_thread = threading.Thread(target=monitor_loop, daemon=True)
        monitor_thread.start()
        logger.info("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã –∑–∞–ø—É—â–µ–Ω")
    
    def _start_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
        def scheduler_loop():
            while self.running:
                try:
                    schedule.run_pending()
                    time.sleep(60)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
                    time.sleep(60)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        schedule.every().hour.do(self._backup_system)
        schedule.every().day.at("02:00").do(self._cleanup_logs)
        schedule.every().day.at("03:00").do(self._optimize_models)
        
        scheduler_thread = threading.Thread(target=scheduler_loop, daemon=True)
        scheduler_thread.start()
        logger.info("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω")
    
    async def _main_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–∏—Å—Ç–µ–º—ã"""
        try:
            while self.running:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
                if self.health_status != "healthy":
                    await self._recover_system()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await self._update_system_state()
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
                await asyncio.sleep(30)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            if self.auto_restart:
                logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã...")
                await self._restart_system()
    
    def _health_check(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å AI –¥–≤–∏–∂–∫–∞
            ai_status = ai_engine.get_status()
            ai_healthy = ai_status.get("default_engine") != "none"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
            system_status = integrated_system.get_system_status()
            system_healthy = system_status.get("system_status") == "running"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
            memory_usage = self._get_memory_usage()
            disk_usage = self._get_disk_usage()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if ai_healthy and system_healthy and memory_usage < 90 and disk_usage < 90:
                self.health_status = "healthy"
            elif memory_usage > 95 or disk_usage > 95:
                self.health_status = "critical"
            else:
                self.health_status = "warning"
            
            self.last_health_check = datetime.now()
            
            logger.info(f"üíö –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: {self.health_status} (–ø–∞–º—è—Ç—å: {memory_usage}%, –¥–∏—Å–∫: {disk_usage}%)")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
            self.health_status = "error"
    
    async def _recover_system(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("üîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...")
            
            if self.health_status == "critical":
                # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
                await self._restart_system()
            elif self.health_status == "warning":
                # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ - –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
                await self._optimize_system()
            elif self.health_status == "error":
                # –û—à–∏–±–∫–∞ - –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
                await self._full_restart()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã: {e}")
    
    async def _restart_system(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã...")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É
            await integrated_system.stop()
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
            await asyncio.sleep(5)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–Ω–æ–≤–æ
            await integrated_system.start()
            
            self.health_status = "healthy"
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")
    
    async def _optimize_system(self):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...")
            
            # –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
            await self._cleanup_memory()
            
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
            await self._optimize_models()
            
            self.health_status = "healthy"
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
    
    async def _full_restart(self):
        """–ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("üîÑ –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self._save_system_state()
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ
            await integrated_system.stop()
            
            # –ñ–¥–µ–º
            await asyncio.sleep(10)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–Ω–æ–≤–æ
            await self.start()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")
    
    async def _cleanup_memory(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏"""
        try:
            # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ AI
            if hasattr(ai_engine, 'clear_cache'):
                ai_engine.clear_cache()
            
            # –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
            self._cleanup_logs()
            
            logger.info("üßπ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏: {e}")
    
    def _cleanup_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤"""
        try:
            log_dir = Path("/home/mentor")
            for log_file in log_dir.glob("*.log"):
                if log_file.stat().st_size > 100 * 1024 * 1024:  # 100MB
                    # –†–æ—Ç–∏—Ä—É–µ–º –ª–æ–≥
                    backup_name = f"{log_file.stem}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
                    log_file.rename(log_dir / backup_name)
                    
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—É—Å—Ç–æ–π –ª–æ–≥
                    log_file.touch()
            
            logger.info("üìù –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤: {e}")
    
    async def _optimize_models(self):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è AI –º–æ–¥–µ–ª–µ–π"""
        try:
            if ai_manager:
                result = await ai_manager._handle_optimize_models({})
                logger.info(f"ü§ñ –ú–æ–¥–µ–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {result.get('message', '')}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π: {e}")
    
    def _backup_system(self):
        """–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            backup_dir = Path("/home/mentor/backups")
            backup_dir.mkdir(exist_ok=True)
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_file = backup_dir / f"system_backup_{timestamp}.json"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
            state = {
                "timestamp": timestamp,
                "system_status": integrated_system.get_system_status(),
                "ai_status": ai_engine.get_status(),
                "health_status": self.health_status,
                "startup_time": self.startup_time.isoformat() if self.startup_time else None
            }
            
            with open(backup_file, 'w', encoding='utf-8') as f:
                json.dump(state, f, ensure_ascii=False, indent=2)
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
            backups = sorted(backup_dir.glob("system_backup_*.json"))
            for old_backup in backups[:-10]:
                old_backup.unlink()
            
            logger.info(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_file}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
    
    async def _update_system_state(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            state = {
                "timestamp": datetime.now().isoformat(),
                "running": self.running,
                "health_status": self.health_status,
                "startup_time": self.startup_time.isoformat() if self.startup_time else None,
                "last_health_check": self.last_health_check.isoformat() if self.last_health_check else None,
                "system_status": integrated_system.get_system_status(),
                "ai_status": ai_engine.get_status()
            }
            
            with open(self.system_state_file, 'w', encoding='utf-8') as f:
                json.dump(state, f, ensure_ascii=False, indent=2)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    async def _load_system_state(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            if self.system_state_file.exists():
                with open(self.system_state_file, 'r', encoding='utf-8') as f:
                    state = json.load(f)
                
                logger.info(f"üìÇ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {state.get('timestamp', 'unknown')}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    def _save_system_state(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            state = {
                "timestamp": datetime.now().isoformat(),
                "running": False,
                "health_status": self.health_status,
                "shutdown_time": datetime.now().isoformat()
            }
            
            with open(self.system_state_file, 'w', encoding='utf-8') as f:
                json.dump(state, f, ensure_ascii=False, indent=2)
            
            # –£–¥–∞–ª—è–µ–º PID —Ñ–∞–π–ª
            if self.pid_file.exists():
                self.pid_file.unlink()
            
            logger.info("üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    def _get_memory_usage(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏"""
        try:
            result = subprocess.run(['free', '-m'], capture_output=True, text=True)
            if result.returncode == 0:
                lines = result.stdout.split('\n')
                mem_line = lines[1].split()
                used = int(mem_line[2])
                total = int(mem_line[1])
                return (used / total) * 100
        except:
            pass
        return 0.0
    
    def _get_disk_usage(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞"""
        try:
            result = subprocess.run(['df', '-h', '/'], capture_output=True, text=True)
            if result.returncode == 0:
                lines = result.stdout.split('\n')
                if len(lines) > 1:
                    parts = lines[1].split()
                    if len(parts) > 4:
                        usage = parts[4].replace('%', '')
                        return float(usage)
        except:
            pass
        return 0.0
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±–ª–∞—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        return {
            "running": self.running,
            "health_status": self.health_status,
            "startup_time": self.startup_time.isoformat() if self.startup_time else None,
            "last_health_check": self.last_health_check.isoformat() if self.last_health_check else None,
            "memory_usage": self._get_memory_usage(),
            "disk_usage": self._get_disk_usage(),
            "auto_restart": self.auto_restart,
            "system_status": integrated_system.get_system_status() if integrated_system else None
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±–ª–∞—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
cloud_system = CloudAgentSystem()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –æ–±–ª–∞—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    async def main():
        try:
            await cloud_system.start()
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            cloud_system._save_system_state()
    
    asyncio.run(main())
