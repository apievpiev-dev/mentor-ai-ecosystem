#!/usr/bin/env python3
"""
Simple Web Interface for Neural Network System
–ü—Ä–æ—Å—Ç–æ–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import json
import logging
from datetime import datetime
from typing import Dict, List, Any
import threading
import time

from fastapi import FastAPI, WebSocket, WebSocketDisconnect, HTTPException
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.middleware.cors import CORSMiddleware
import uvicorn

from simple_neural_system import simple_neural_system

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="Simple Neural Network System",
    description="–ü—Ä–æ—Å—Ç–∞—è –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π",
    version="1.0.0"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ú–µ–Ω–µ–¥–∂–µ—Ä WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
class ConnectionManager:
    def __init__(self):
        self.active_connections: List[WebSocket] = []
    
    async def connect(self, websocket: WebSocket):
        await websocket.accept()
        self.active_connections.append(websocket)
        logger.info(f"üîå –ù–æ–≤–æ–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ. –í—Å–µ–≥–æ: {len(self.active_connections)}")
    
    def disconnect(self, websocket: WebSocket):
        if websocket in self.active_connections:
            self.active_connections.remove(websocket)
        logger.info(f"üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ. –û—Å—Ç–∞–ª–æ—Å—å: {len(self.active_connections)}")
    
    async def broadcast(self, message: Dict[str, Any]):
        if self.active_connections:
            message_str = json.dumps(message, ensure_ascii=False)
            disconnected = []
            
            for connection in self.active_connections:
                try:
                    await connection.send_text(message_str)
                except:
                    disconnected.append(connection)
            
            for connection in disconnected:
                self.disconnect(connection)

manager = ConnectionManager()

# –ó–∞–ø—É—Å–∫ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≤ —Ñ–æ–Ω–µ
neural_system_task = None
neural_system_running = False

async def start_neural_system():
    """–ó–∞–ø—É—Å–∫ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≤ —Ñ–æ–Ω–µ"""
    global neural_system_running
    neural_system_running = True
    
    try:
        await simple_neural_system.start()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}")
        neural_system_running = False

async def background_monitoring():
    """–§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"""
    while True:
        try:
            if neural_system_running:
                # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
                system_stats = {
                    "type": "system_update",
                    "timestamp": datetime.now().isoformat(),
                    "neural_system": simple_neural_system.get_system_status()
                }
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
                await manager.broadcast(system_stats)
            
            await asyncio.sleep(5)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            await asyncio.sleep(10)

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    global neural_system_task
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –≤ —Ñ–æ–Ω–µ
    neural_system_task = asyncio.create_task(start_neural_system())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    asyncio.create_task(background_monitoring())
    
    logger.info("‚úÖ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

@app.on_event("shutdown")
async def shutdown_event():
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
    logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
    
    simple_neural_system.stop()
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    for connection in manager.active_connections:
        try:
            await connection.close()
        except:
            pass

@app.get("/", response_class=HTMLResponse)
async def get_main_page():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    html_content = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üß† Simple Neural Network System</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            min-height: 100vh;
        }
        
        .header {
            background: rgba(0, 0, 0, 0.3);
            padding: 20px;
            text-align: center;
            backdrop-filter: blur(10px);
        }
        
        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 30px 20px;
        }
        
        .dashboard {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .card {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 25px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: transform 0.3s ease;
        }
        
        .card:hover {
            transform: translateY(-5px);
        }
        
        .card h3 {
            font-size: 1.5rem;
            margin-bottom: 15px;
            color: #fff;
        }
        
        .status {
            display: inline-block;
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 0.9rem;
            font-weight: bold;
            margin-bottom: 15px;
        }
        
        .status.healthy {
            background: #27ae60;
        }
        
        .status.warning {
            background: #f39c12;
        }
        
        .status.error {
            background: #e74c3c;
        }
        
        .metric {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
            padding: 8px 0;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .metric:last-child {
            border-bottom: none;
        }
        
        .metric-label {
            opacity: 0.8;
        }
        
        .metric-value {
            font-weight: bold;
        }
        
        .controls {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 30px;
        }
        
        .control-group {
            margin-bottom: 20px;
        }
        
        .control-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
        }
        
        .control-group select, .control-group textarea, .control-group input {
            width: 100%;
            padding: 10px;
            border: none;
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.2);
            color: white;
            font-size: 1rem;
        }
        
        .control-group input::placeholder, .control-group textarea::placeholder {
            color: rgba(255, 255, 255, 0.7);
        }
        
        .btn {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-right: 10px;
            margin-bottom: 10px;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }
        
        .btn.success {
            background: linear-gradient(45deg, #27ae60, #2ecc71);
        }
        
        .log-area {
            background: rgba(0, 0, 0, 0.5);
            border-radius: 10px;
            padding: 20px;
            height: 300px;
            overflow-y: auto;
            font-family: 'Courier New', monospace;
            font-size: 0.9rem;
            line-height: 1.4;
        }
        
        .log-entry {
            margin-bottom: 5px;
            padding: 5px;
            border-radius: 3px;
        }
        
        .log-entry.info {
            background: rgba(52, 152, 219, 0.2);
        }
        
        .log-entry.success {
            background: rgba(39, 174, 96, 0.2);
        }
        
        .log-entry.error {
            background: rgba(231, 76, 60, 0.2);
        }
        
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.7; }
            100% { opacity: 1; }
        }
        
        .loading {
            animation: pulse 2s infinite;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>üß† Simple Neural Network System</h1>
        <p>–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π - –†–∞–±–æ—Ç–∞–µ—Ç 24/7</p>
    </div>
    
    <div class="container">
        <div class="dashboard">
            <div class="card">
                <h3>üß† –ù–µ–π—Ä–æ–Ω–Ω–∞—è –°–∏—Å—Ç–µ–º–∞</h3>
                <div class="status healthy" id="system-status">–ê–∫—Ç–∏–≤–Ω–∞</div>
                <div class="metric">
                    <span class="metric-label">–ó–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏:</span>
                    <span class="metric-value" id="queue-size">0</span>
                </div>
                <div class="metric">
                    <span class="metric-label">–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á:</span>
                    <span class="metric-value" id="completed-tasks">0</span>
                </div>
                <div class="metric">
                    <span class="metric-label">–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:</span>
                    <span class="metric-value" id="success-rate">100%</span>
                </div>
                <div class="metric">
                    <span class="metric-label">–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è:</span>
                    <span class="metric-value" id="avg-time">0.0—Å</span>
                </div>
            </div>
            
            <div class="card">
                <h3>ü§ñ –ù–µ–π—Ä–æ–Ω–Ω—ã–π –ê–≥–µ–Ω—Ç</h3>
                <div class="status healthy" id="agent-status">–ì–æ—Ç–æ–≤</div>
                <div class="metric">
                    <span class="metric-label">–°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞:</span>
                    <span class="metric-value" id="agent-state">idle</span>
                </div>
                <div class="metric">
                    <span class="metric-label">–û–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π:</span>
                    <span class="metric-value" id="trained-models">0</span>
                </div>
                <div class="metric">
                    <span class="metric-label">–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</span>
                    <span class="metric-value" id="last-activity">-</span>
                </div>
            </div>
        </div>
        
        <div class="controls">
            <h3>üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ù–µ–π—Ä–æ–Ω–Ω–æ–π –°–∏—Å—Ç–µ–º–æ–π</h3>
            
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px;">
                <div>
                    <div class="control-group">
                        <label for="task-type">–¢–∏–ø –∑–∞–¥–∞—á–∏:</label>
                        <select id="task-type">
                            <option value="data_analysis">–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö</option>
                            <option value="pattern_recognition">–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤</option>
                            <option value="neural_processing">–ù–µ–π—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞</option>
                            <option value="model_training">–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏</option>
                        </select>
                    </div>
                    
                    <div class="control-group">
                        <label for="task-priority">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1-10):</label>
                        <input type="number" id="task-priority" min="1" max="10" value="5">
                    </div>
                    
                    <div class="control-group">
                        <label for="task-data">–î–∞–Ω–Ω—ã–µ (JSON):</label>
                        <textarea id="task-data" rows="4" placeholder='{"data": [1, 2, 3], "analysis_type": "statistical"}'></textarea>
                    </div>
                    
                    <button class="btn success" onclick="addTask()">üöÄ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É</button>
                </div>
                
                <div>
                    <div class="control-group">
                        <label>–ë—ã—Å—Ç—Ä—ã–µ –∑–∞–¥–∞—á–∏:</label>
                        <button class="btn" onclick="quickDataAnalysis()">üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö</button>
                        <button class="btn" onclick="quickPatternRecognition()">üîç –ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤</button>
                        <button class="btn" onclick="quickNeuralProcessing()">üß† –ù–µ–π—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞</button>
                        <button class="btn" onclick="quickModelTraining()">üéØ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏</button>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card">
            <h3>üìã –°–∏—Å—Ç–µ–º–Ω—ã–µ –õ–æ–≥–∏</h3>
            <div class="log-area" id="system-logs">
                <div class="log-entry info">üöÄ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...</div>
            </div>
        </div>
    </div>
    
    <script>
        // WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        const ws = new WebSocket(`ws://${window.location.host}/ws`);
        
        ws.onopen = function(event) {
            addLog('üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'info');
        };
        
        ws.onmessage = function(event) {
            const data = JSON.parse(event.data);
            
            if (data.type === 'system_update') {
                updateSystemStatus(data);
            } else if (data.type === 'log') {
                addLog(data.message, data.level);
            }
        };
        
        ws.onclose = function(event) {
            addLog('üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ', 'error');
        };
        
        function updateSystemStatus(data) {
            if (data.neural_system) {
                const ns = data.neural_system;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
                document.getElementById('queue-size').textContent = ns.task_queue_size || 0;
                document.getElementById('completed-tasks').textContent = ns.completed_tasks || 0;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
                if (ns.performance_metrics) {
                    const total = ns.performance_metrics.total_tasks || 1;
                    const success = ns.performance_metrics.successful_tasks || 0;
                    const successRate = ((success / total) * 100).toFixed(1);
                    document.getElementById('success-rate').textContent = successRate + '%';
                    document.getElementById('avg-time').textContent = (ns.performance_metrics.average_processing_time || 0).toFixed(2) + 's';
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
                const systemStatus = document.getElementById('system-status');
                systemStatus.textContent = ns.running ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞';
                systemStatus.className = 'status ' + (ns.running ? 'healthy' : 'error');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–µ
                if (ns.agent) {
                    document.getElementById('agent-state').textContent = ns.agent.status || 'idle';
                    document.getElementById('trained-models').textContent = ns.agent.trained_models || 0;
                    
                    const agentStatus = document.getElementById('agent-status');
                    agentStatus.textContent = ns.agent.status === 'idle' ? '‚úÖ –ì–æ—Ç–æ–≤' : 'üîÑ –†–∞–±–æ—Ç–∞–µ—Ç';
                    agentStatus.className = 'status healthy';
                }
                
                document.getElementById('last-activity').textContent = new Date().toLocaleTimeString();
            }
        }
        
        function addLog(message, level = 'info') {
            const logArea = document.getElementById('system-logs');
            const timestamp = new Date().toLocaleTimeString();
            const logEntry = document.createElement('div');
            logEntry.className = `log-entry ${level}`;
            logEntry.textContent = `[${timestamp}] ${message}`;
            
            logArea.appendChild(logEntry);
            logArea.scrollTop = logArea.scrollHeight;
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤
            while (logArea.children.length > 50) {
                logArea.removeChild(logArea.firstChild);
            }
        }
        
        function addTask() {
            const taskType = document.getElementById('task-type').value;
            const priority = parseInt(document.getElementById('task-priority').value);
            const taskDataStr = document.getElementById('task-data').value;
            
            let taskData;
            try {
                taskData = JSON.parse(taskDataStr || '{}');
            } catch (e) {
                addLog('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–∞–Ω–Ω—ã—Ö', 'error');
                return;
            }
            
            fetch('/api/add_task', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    task_type: taskType,
                    priority: priority,
                    input_data: taskData
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    addLog(`‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: ${data.task_id}`, 'success');
                    document.getElementById('task-data').value = '';
                } else {
                    addLog(`‚ùå –û—à–∏–±–∫–∞: ${data.error}`, 'error');
                }
            })
            .catch(error => {
                addLog(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error}`, 'error');
            });
        }
        
        function quickDataAnalysis() {
            document.getElementById('task-type').value = 'data_analysis';
            document.getElementById('task-data').value = JSON.stringify({
                data: [1, 5, 3, 9, 2, 8, 4, 7, 6, 10],
                analysis_type: "statistical"
            }, null, 2);
            addTask();
        }
        
        function quickPatternRecognition() {
            document.getElementById('task-type').value = 'pattern_recognition';
            document.getElementById('task-data').value = JSON.stringify({
                patterns: ["ABAB", "CDCD", "ABAB", "EFEF", "ABAB", "CDCD"]
            }, null, 2);
            addTask();
        }
        
        function quickNeuralProcessing() {
            document.getElementById('task-type').value = 'neural_processing';
            document.getElementById('task-data').value = JSON.stringify({
                input_data: {
                    text: "–¢–µ—Å—Ç–æ–≤–∞—è –Ω–µ–π—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
                    numbers: [1, 2, 3, 4, 5]
                }
            }, null, 2);
            addTask();
        }
        
        function quickModelTraining() {
            document.getElementById('task-type').value = 'model_training';
            document.getElementById('task-data').value = JSON.stringify({
                model_name: "test_model_" + Date.now(),
                training_data: [
                    {"input": [1, 2], "output": 3},
                    {"input": [2, 3], "output": 5},
                    {"input": [3, 4], "output": 7},
                    {"input": [4, 5], "output": 9}
                ]
            }, null, 2);
            addTask();
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        addLog('üöÄ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–≥—Ä—É–∂–µ–Ω', 'info');
        addLog('üß† –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ', 'info');
    </script>
</body>
</html>
"""
    return html_content

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """WebSocket endpoint"""
    await manager.connect(websocket)
    try:
        while True:
            data = await websocket.receive_text()
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ping/pong
            try:
                message = json.loads(data)
                if message.get("type") == "ping":
                    await websocket.send_text(json.dumps({
                        "type": "pong",
                        "timestamp": datetime.now().isoformat()
                    }))
            except:
                pass
    except WebSocketDisconnect:
        manager.disconnect(websocket)

@app.get("/api/status")
async def get_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    return JSONResponse(simple_neural_system.get_system_status())

@app.post("/api/add_task")
async def add_task(task_data: Dict[str, Any]):
    """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"""
    try:
        task_type = task_data.get("task_type", "neural_processing")
        priority = task_data.get("priority", 5)
        input_data = task_data.get("input_data", {})
        
        task_id = simple_neural_system.add_task(task_type, input_data, priority)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        await manager.broadcast({
            "type": "task_added",
            "task_id": task_id,
            "task_type": task_type,
            "priority": priority
        })
        
        return JSONResponse({
            "success": True,
            "task_id": task_id,
            "message": "–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å"
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        return JSONResponse({
            "success": False,
            "error": str(e)
        })

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return JSONResponse({
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "neural_system_running": neural_system_running
    })

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=8081,
        log_level="info"
    )