#!/usr/bin/env python3
"""
API –¥–ª—è —á–∞—Ç–∞ JARVIS
"""

from fastapi import FastAPI, HTTPException
from fastapi.responses import HTMLResponse
from pydantic import BaseModel
import json
import time
import asyncio
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

class ChatMessage(BaseModel):
    message: str
    user_id: str = "anonymous"

class ChatAPI:
    def __init__(self, jarvis_core):
        self.jarvis = jarvis_core
        self.app = FastAPI(title="JARVIS Chat API")
        self.setup_endpoints()
    
    def setup_endpoints(self):
        @self.app.get("/")
        async def chat_interface():
            """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞"""
            try:
                with open("/home/mentor/jarvis_data/templates/chat.html", "r", encoding="utf-8") as f:
                    return HTMLResponse(f.read())
            except FileNotFoundError:
                return HTMLResponse("<h1>–ß–∞—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</h1>")
        
        @self.app.post("/api/chat/send")
        async def send_message(message: ChatMessage):
            """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç JARVIS"""
            try:
                if not message.message.strip():
                    raise HTTPException(status_code=400, detail="–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                from jarvis_core import Task
                
                task = Task(
                    id=f"chat_{int(time.time())}",
                    type="user_message",
                    parameters={
                        "message": message.message,
                        "user_id": message.user_id,
                        "timestamp": datetime.now().isoformat()
                    }
                )
                
                self.jarvis.tasks_queue.append(task)
                
                # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–¥–æ 10 —Å–µ–∫—É–Ω–¥)
                for _ in range(100):
                    if task.status == "completed":
                        break
                    await asyncio.sleep(0.1)
                
                if task.status == "completed":
                    return task.result
                else:
                    raise HTTPException(status_code=408, detail="–¢–∞–π–º–∞—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                raise HTTPException(status_code=500, detail=str(e))
        
        @self.app.get("/api/chat/status")
        async def chat_status():
            """–°—Ç–∞—Ç—É—Å —á–∞—Ç–∞"""
            try:
                return {
                    "chat_active": True,
                    "websocket_active": False,
                    "messages_processed": len([t for t in self.jarvis.completed_tasks if t.type == "user_message"]),
                    "pending_messages": len([t for t in self.jarvis.tasks_queue if t.type == "user_message"]),
                    "jarvis_status": self.jarvis.state.system_state if hasattr(self.jarvis, 'state') else "unknown"
                }
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —á–∞—Ç–∞: {e}")
                return {
                    "chat_active": False,
                    "error": str(e)
                }
        
        @self.app.get("/api/chat/history")
        async def chat_history():
            """–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
            try:
                history = []
                for task in self.jarvis.completed_tasks[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
                    if task.type == "user_message" and task.result:
                        history.append({
                            "timestamp": task.parameters.get("timestamp"),
                            "user_message": task.parameters.get("message"),
                            "jarvis_response": task.result.get("message", ""),
                            "user_id": task.parameters.get("user_id")
                        })
                return {"history": history}
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: {e}")
                return {"history": [], "error": str(e)}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å JARVIS
def setup_chat_api(jarvis_core, port=8082):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ API —á–∞—Ç–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ä—Ç—É"""
    chat_api = ChatAPI(jarvis_core)
    
    import uvicorn
    from threading import Thread
    
    def run_chat_api():
        uvicorn.run(chat_api.app, host="0.0.0.0", port=port, log_level="info")
    
    chat_thread = Thread(target=run_chat_api, daemon=True)
    chat_thread.start()
    
    logger.info(f"üí¨ Chat API –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    return chat_api

if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
    import sys
    sys.path.append('/home/mentor')
    
    from jarvis_core import JarvisCore
    
    jarvis = JarvisCore()
    chat_api = setup_chat_api(jarvis, port=8082)
    
    # –î–µ—Ä–∂–∏–º –ø—Ä–æ–≥—Ä–∞–º–º—É –∑–∞–ø—É—â–µ–Ω–Ω–æ–π
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        logger.info("Chat API –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
