#!/usr/bin/env python3
"""
–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤ - –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –∞–≥–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—Ç—å
"""

import asyncio
import requests
import logging
import time
import json
from typing import Dict, List, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class ForceAgentWork:
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, server_url="http://localhost:8080"):
        self.server_url = server_url
        self.running = False
        self.agents = [
            "general_assistant",
            "code_developer", 
            "data_analyst",
            "project_manager",
            "designer",
            "qa_tester"
        ]
        
        # –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        self.force_tasks = {
            "general_assistant": "–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã",
            "code_developer": "–ü—Ä–æ–≤–µ—Ä—å –∫–æ–¥ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫",
            "data_analyst": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã",
            "project_manager": "–°–æ–∑–¥–∞–π –ø–ª–∞–Ω –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
            "designer": "–ü—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
            "qa_tester": "–ü—Ä–æ–≤–µ—Ä—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å API"
        }
    
    async def force_agent_work(self, agent_type: str):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞"""
        try:
            task = self.force_tasks.get(agent_type, "–í—ã–ø–æ–ª–Ω–∏ –∑–∞–¥–∞—á—É")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
            url = f"{self.server_url}/api/chat/send"
            data = {
                "message": task,
                "user_id": "force_worker",
                "agent_type": agent_type
            }
            
            logger.info(f"üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ {agent_type}")
            
            response = requests.post(url, json=data, timeout=10)
            
            if response.status_code == 200:
                result = response.json()
                logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç {agent_type} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {result.get('success', False)}")
                
                # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                await asyncio.sleep(5)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–∞–ª –ª–∏ –∞–≥–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã–º
                status_response = requests.get(f"{self.server_url}/api/system/status", timeout=5)
                if status_response.status_code == 200:
                    status_data = status_response.json()
                    active_agents = status_data.get("active_agents", 0)
                    logger.info(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤: {active_agents}")
                
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞ {agent_type}: {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞ {agent_type}: {e}")
            return False
    
    async def force_all_agents(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        logger.info("üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤...")
        
        for agent_type in self.agents:
            await self.force_agent_work(agent_type)
            await asyncio.sleep(3)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–∞—Ü–∏—è–º–∏
    
    async def continuous_force_work(self):
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏...")
        
        cycle = 0
        
        while self.running:
            try:
                cycle += 1
                logger.info(f"üîÑ –¶–∏–∫–ª –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ #{cycle}")
                
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
                await self.force_all_agents()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
                try:
                    status_response = requests.get(f"{self.server_url}/api/system/status", timeout=5)
                    if status_response.status_code == 200:
                        status_data = status_response.json()
                        active_agents = status_data.get("active_agents", 0)
                        active_tasks = status_data.get("coordination_status", {}).get("active_tasks", 0)
                        logger.info(f"üìä –°—Ç–∞—Ç—É—Å: {active_agents} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤, {active_tasks} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
                
                # –ñ–¥–µ–º 2 –º–∏–Ω—É—Ç—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º
                await asyncio.sleep(120)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {e}")
                await asyncio.sleep(30)
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤...")
        self.running = True
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
        await self.force_all_agents()
        
        # –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—É—é –∞–∫—Ç–∏–≤–∞—Ü–∏—é
        await self.continuous_force_work()
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤...")
        self.running = False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    force_worker = ForceAgentWork()
    
    try:
        await force_worker.start()
    except KeyboardInterrupt:
        logger.info("üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
        force_worker.stop()

if __name__ == "__main__":
    asyncio.run(main())


