#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ —Ä–∞–±–æ—á–µ–π –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import logging
import signal
import sys
import time
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/home/mentor/start_working_system.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class WorkingSystemLauncher:
    """–ó–∞–ø—É—Å–∫–∞—Ç–æ—Ä —Ä–∞–±–æ—á–µ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self, host="0.0.0.0", port=8080):
        self.host = host
        self.port = port
        self.running = False
        self.server_process = None
        
    async def start_system(self):
        """–ó–∞–ø—É—Å–∫ —Ä–∞–±–æ—á–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞–±–æ—á–µ–π –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–±–æ—á–∏–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
            import uvicorn
            from working_chat_server import app
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            config = uvicorn.Config(
                app=app,
                host=self.host,
                port=self.port,
                log_level="info",
                access_log=True
            )
            
            server = uvicorn.Server(config)
            
            logger.info(f"üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {self.host}:{self.port}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
            self.server_process = asyncio.create_task(server.serve())
            
            self.running = True
            logger.info("‚úÖ –†–∞–±–æ—á–∞—è –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–∞–±–æ—á–µ–π —Å–∏—Å—Ç–µ–º—ã: {e}")
            return False
    
    async def stop_system(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–±–æ—á–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–±–æ—á–µ–π –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
            
            self.running = False
            
            if self.server_process:
                self.server_process.cancel()
                try:
                    await self.server_process
                except asyncio.CancelledError:
                    pass
            
            logger.info("‚úÖ –†–∞–±–æ—á–∞—è –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞–±–æ—á–µ–π —Å–∏—Å—Ç–µ–º—ã: {e}")
    
    def run(self, host="0.0.0.0", port=8080):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"""
        self.host = host
        self.port = port
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        def signal_handler(signum, frame):
            logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}")
            asyncio.create_task(self.stop_system())
            sys.exit(0)
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
        # –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
            loop.run_until_complete(self.start_system())
            
            # –î–µ—Ä–∂–∏–º —Å–∏—Å—Ç–µ–º—É —Ä–∞–±–æ—Ç–∞—é—â–µ–π
            while self.running:
                time.sleep(1)
                
        except KeyboardInterrupt:
            logger.info("üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
            loop.run_until_complete(self.stop_system())
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            loop.run_until_complete(self.stop_system())
        finally:
            loop.close()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ —Ä–∞–±–æ—á–µ–π –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
    parser.add_argument("host", nargs="?", default="0.0.0.0", help="–•–æ—Å—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    parser.add_argument("port", nargs="?", type=int, default=8080, help="–ü–æ—Ä—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    
    args = parser.parse_args()
    
    launcher = WorkingSystemLauncher(args.host, args.port)
    launcher.run(args.host, args.port)

if __name__ == "__main__":
    main()
