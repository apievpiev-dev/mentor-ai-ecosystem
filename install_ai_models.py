#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö AI –º–æ–¥–µ–ª–µ–π –≤ JARVIS
"""

import subprocess
import sys
import time
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class AIModelInstaller:
    def __init__(self):
        self.available_models = {
            "llama3.2:3b": {
                "name": "Llama 3.2 3B",
                "size": "2GB",
                "description": "–û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—â–∏—Ö –∑–∞–¥–∞—á"
            },
            "gemma2:2b": {
                "name": "Gemma 2 2B", 
                "size": "1.6GB",
                "description": "–ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞—á"
            },
            "codellama:7b": {
                "name": "CodeLlama 7B",
                "size": "4GB", 
                "description": "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"
            },
            "mistral:7b": {
                "name": "Mistral 7B",
                "size": "4GB",
                "description": "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞"
            },
            "llama3.1:8b": {
                "name": "Llama 3.1 8B",
                "size": "5GB",
                "description": "–ú–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á"
            },
            "phi3:3.8b": {
                "name": "Phi-3 3.8B",
                "size": "2.3GB",
                "description": "–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –º–æ–¥–µ–ª—å Microsoft"
            }
        }
    
    def check_ollama(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Ollama"""
        try:
            result = subprocess.run(["ollama", "--version"], 
                                  capture_output=True, text=True, timeout=5)
            if result.returncode == 0:
                logger.info("‚úÖ Ollama —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return True
            else:
                logger.error("‚ùå Ollama –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Ollama: {e}")
            return False
    
    def get_installed_models(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        try:
            result = subprocess.run(["ollama", "list"], 
                                  capture_output=True, text=True, timeout=10)
            if result.returncode == 0:
                models = []
                lines = result.stdout.strip().split('\n')[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                for line in lines:
                    if line.strip():
                        model_name = line.split()[0]
                        models.append(model_name)
                return models
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π")
                return []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {e}")
            return []
    
    def install_model(self, model_name):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏"""
        if model_name not in self.available_models:
            logger.error(f"‚ùå –ú–æ–¥–µ–ª—å {model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö")
            return False
        
        model_info = self.available_models[model_name]
        logger.info(f"üì• –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º {model_info['name']} ({model_info['size']})...")
        logger.info(f"üìù {model_info['description']}")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
            process = subprocess.Popen(
                ["ollama", "pull", model_name],
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True,
                bufsize=1,
                universal_newlines=True
            )
            
            # –í—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            for line in process.stdout:
                if "pulling" in line or "downloading" in line:
                    print(f"\r{line.strip()}", end="", flush=True)
            
            process.wait()
            
            if process.returncode == 0:
                logger.info(f"\n‚úÖ –ú–æ–¥–µ–ª—å {model_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                return True
            else:
                logger.error(f"\n‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ {model_name}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {model_name}: {e}")
            return False
    
    def test_model(self, model_name):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        logger.info(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å {model_name}...")
        
        try:
            result = subprocess.run(
                ["ollama", "run", model_name, "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"],
                capture_output=True, text=True, timeout=30
            )
            
            if result.returncode == 0:
                response = result.stdout.strip()
                logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç: {response[:100]}...")
                return True
            else:
                logger.error(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
    
    def show_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π"""
        installed_models = self.get_installed_models()
        
        print("\nü§ñ –£—Å—Ç–∞–Ω–æ–≤—â–∏–∫ AI –º–æ–¥–µ–ª–µ–π –¥–ª—è JARVIS")
        print("=" * 50)
        
        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
        for i, (model_id, info) in enumerate(self.available_models.items(), 1):
            status = "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞" if model_id in installed_models else "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
            print(f"{i}. {info['name']} ({info['size']}) - {status}")
            print(f"   {info['description']}")
            print()
        
        print("0. –í—ã—Ö–æ–¥")
        print("a. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –º–æ–¥–µ–ª–∏")
        print("t. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏")
        
        return input("\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏: ").strip()
    
    def install_all_models(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π"""
        logger.info("üöÄ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏...")
        
        installed_count = 0
        total_count = len(self.available_models)
        
        for model_id, info in self.available_models.items():
            logger.info(f"\nüì• –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º {info['name']}...")
            if self.install_model(model_id):
                installed_count += 1
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
                self.test_model(model_id)
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {model_id}")
        
        logger.info(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {installed_count}/{total_count} –º–æ–¥–µ–ª–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    def test_all_models(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        installed_models = self.get_installed_models()
        
        if not installed_models:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        logger.info(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(installed_models)} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...")
        
        for model in installed_models:
            self.test_model(model)
            print()
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞ AI –º–æ–¥–µ–ª–µ–π...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Ollama
        if not self.check_ollama():
            logger.error("‚ùå Ollama –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Ollama —Å–Ω–∞—á–∞–ª–∞.")
            return False
        
        while True:
            choice = self.show_menu()
            
            if choice == "0":
                logger.info("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            elif choice == "a":
                self.install_all_models()
            elif choice == "t":
                self.test_all_models()
            elif choice.isdigit():
                model_index = int(choice) - 1
                model_ids = list(self.available_models.keys())
                
                if 0 <= model_index < len(model_ids):
                    model_id = model_ids[model_index]
                    self.install_model(model_id)
                    self.test_model(model_id)
                else:
                    logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏")
            else:
                logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    installer = AIModelInstaller()
    
    try:
        installer.run()
    except KeyboardInterrupt:
        logger.info("\nüëã –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()