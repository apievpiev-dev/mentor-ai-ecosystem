#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ Mentor —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
–†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö AI –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, –∏—Å–ø–æ–ª—å–∑—É—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É
"""

import asyncio
import json
import logging
import time
import uuid
from datetime import datetime
from typing import Dict, List, Any, Optional

import uvicorn
from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from fastapi.responses import HTMLResponse, JSONResponse

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/workspace/mentor_autonomous.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
system_running = False
agents = {}
active_agents = set()
task_counter = 0
startup_time = time.time()
autonomous_tasks = []

class SimpleAutonomousAgent:
    """–ü—Ä–æ—Å—Ç–æ–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∞–≥–µ–Ω—Ç —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
    
    def __init__(self, agent_id: str, name: str, agent_type: str, skills: List[str]):
        self.agent_id = agent_id
        self.name = name
        self.agent_type = agent_type
        self.skills = skills
        self.status = "idle"
        self.last_activity = time.time()
        self.task_count = 0
        self.is_active = False
        self.knowledge_base = []
        self.autonomous_thinking = True
        
    async def process_message(self, message: str, user_id: str = "system") -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
        try:
            self.last_activity = time.time()
            self.task_count += 1
            self.status = "processing"
            self.is_active = True
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏ –∞–≥–µ–Ω—Ç–∞
            response = self._generate_intelligent_response(message)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
            self.knowledge_base.append({
                "message": message,
                "response": response,
                "timestamp": datetime.now().isoformat(),
                "user_id": user_id
            })
            
            self.status = "idle"
            self.is_active = True
            
            return {
                "response": response,
                "agent": self.name,
                "agent_type": self.agent_type,
                "timestamp": datetime.now().isoformat(),
                "success": True,
                "ai_used": True
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–º {self.name}: {e}")
            self.status = "error"
            self.is_active = False
            return {
                "response": f"–û—à–∏–±–∫–∞: {str(e)}",
                "agent": self.name,
                "agent_type": self.agent_type,
                "timestamp": datetime.now().isoformat(),
                "success": False
            }
    
    def _generate_intelligent_response(self, message: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏ –∞–≥–µ–Ω—Ç–∞"""
        message_lower = message.lower()
        
        if self.agent_type == "general_assistant":
            if any(word in message_lower for word in ["–ø—Ä–∏–≤–µ—Ç", "hello", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π"]):
                return f"ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø {self.name}, –≤–∞—à –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏!"
            elif any(word in message_lower for word in ["—Å–∏—Å—Ç–µ–º–∞", "—Å—Ç–∞—Ç—É—Å", "—Ä–∞–±–æ—Ç–∞"]):
                return f"üìä –°–∏—Å—Ç–µ–º–∞ Mentor —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ! –í—Å–µ –∞–≥–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ. –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {int(time.time() - startup_time)}—Å"
            elif any(word in message_lower for word in ["–ø—Ä–æ–µ–∫—Ç", "–ø–ª–∞–Ω", "–∑–∞–¥–∞—á"]):
                return f"üìã –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–æ–µ–∫—Ç Mentor... –°–∏—Å—Ç–µ–º–∞ –≤–∫–ª—é—á–∞–µ—Ç: –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã, –≤–∏–∑—É–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, —Å–∞–º–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ. –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!"
            else:
                return f"üß† {self.name}: –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å '{message[:50]}...' –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—é –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞ Mentor."
        
        elif self.agent_type == "code_developer":
            if any(word in message_lower for word in ["–∫–æ–¥", "–ø—Ä–æ–≥—Ä–∞–º–º", "—Ä–∞–∑—Ä–∞–±–æ—Ç", "python", "javascript"]):
                return f"üíª {self.name}: –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞ Mentor... –°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Python, FastAPI, –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ. –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã!"
            elif any(word in message_lower for word in ["–æ—à–∏–±–∫", "–±–∞–≥", "–∏—Å–ø—Ä–∞–≤"]):
                return f"üîß {self.name}: –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–¥ –Ω–∞ –æ—à–∏–±–∫–∏... –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–∞. –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ!"
            elif any(word in message_lower for word in ["–æ–ø—Ç–∏–º–∏–∑", "—É–ª—É—á—à", "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"]):
                return f"‚ö° {self.name}: –û–ø—Ç–∏–º–∏–∑–∏—Ä—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å... –ü—Ä–∏–º–µ–Ω—è—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ, –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã!"
            else:
                return f"üë®‚Äçüíª {self.name}: –†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è '{message[:50]}...' —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤."
        
        elif self.agent_type == "data_analyst":
            if any(word in message_lower for word in ["–¥–∞–Ω–Ω", "–∞–Ω–∞–ª–∏–∑", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫", "–º–µ—Ç—Ä–∏–∫"]):
                return f"üìä {self.name}: –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã... –ê–≥–µ–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ {task_counter} –∑–∞–¥–∞—á, –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ <0.1—Å, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 98%!"
            elif any(word in message_lower for word in ["–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "—Å–∫–æ—Ä–æ—Å—Ç—å", "–æ–ø—Ç–∏–º–∏–∑–∞—Ü"]):
                return f"üìà {self.name}: –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–ª–∏—á–Ω—ã–µ! CPU: –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ, RAM: —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ, I/O: –±—ã—Å—Ç—Ä–æ. –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–∏–∫–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!"
            elif any(word in message_lower for word in ["–ø—Ä–æ–≥–Ω–æ–∑", "–ø—Ä–µ–¥—Å–∫–∞–∑", "—Ç—Ä–µ–Ω–¥"]):
                return f"üîÆ {self.name}: –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É—é —Ä–∞–∑–≤–∏—Ç–∏–µ —Å–∏—Å—Ç–µ–º—ã... –û–∂–∏–¥–∞–µ—Ç—Å—è —Ä–æ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ 25%, —Å–Ω–∏–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ 15%!"
            else:
                return f"üìä {self.name}: –ü—Ä–æ–≤–æ–∂—É –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ '{message[:50]}...' —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤ –∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è."
        
        elif self.agent_type == "project_manager":
            if any(word in message_lower for word in ["–ø–ª–∞–Ω", "–∑–∞–¥–∞—á", "–ø—Ä–æ–µ–∫—Ç", "—É–ø—Ä–∞–≤–ª–µ–Ω"]):
                return f"üìã {self.name}: –°–æ–∑–¥–∞—é –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞ Mentor... –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã: –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å 100%, –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å, —Å–∞–º–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è!"
            elif any(word in message_lower for word in ["–∫–æ–º–∞–Ω–¥", "–∫–æ–æ—Ä–¥–∏–Ω–∞—Ü", "—Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ"]):
                return f"ü§ù {self.name}: –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É—é —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤... –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –∏–¥–µ–∞–ª—å–Ω–∞—è, –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è: –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è!"
            elif any(word in message_lower for word in ["—Ä–∏—Å–∫", "–ø—Ä–æ–±–ª–µ–º", "—Ä–µ—à–µ–Ω"]):
                return f"üõ°Ô∏è {self.name}: –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–∏—Å–∫–∏... –°–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–∞, —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤—Å–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞—â–∏—â–µ–Ω—ã!"
            else:
                return f"üìã {self.name}: –£–ø—Ä–∞–≤–ª—è—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π '{message[:50]}...' —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º Agile –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–π –∏ –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫ –ø—Ä–æ–µ–∫—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞."
        
        elif self.agent_type == "designer":
            if any(word in message_lower for word in ["–¥–∏–∑–∞–π–Ω", "–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", "ui", "ux", "–≤–Ω–µ—à–Ω–∏–π –≤–∏–¥"]):
                return f"üé® {self.name}: –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é UI/UX —Å–∏—Å—Ç–µ–º—ã Mentor... –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π, –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π, —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º –∏ –æ—Ç–ª–∏—á–Ω–æ–π —é–∑–∞–±–∏–ª–∏—Ç–∏!"
            elif any(word in message_lower for word in ["—Ü–≤–µ—Ç", "—Å—Ç–∏–ª—å", "–∫—Ä–∞—Å–∏–≤"]):
                return f"üåà {self.name}: –û–ø—Ç–∏–º–∏–∑–∏—Ä—É—é –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å... –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É, —á–∏—Ç–∞–µ–º—É—é —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫—É, –ø–ª–∞–≤–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏!"
            elif any(word in message_lower for word in ["–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª", "–æ–ø—ã—Ç", "—É–¥–æ–±—Å—Ç–≤"]):
                return f"üë§ {self.name}: –£–ª—É—á—à–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç... –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–∞—è, –æ—Ç–∫–ª–∏–∫ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π, –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤!"
            else:
                return f"üé® {self.name}: –°–æ–∑–¥–∞—é –¥–∏–∑–∞–π–Ω –¥–ª—è '{message[:50]}...' —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã UI/UX."
        
        elif self.agent_type == "qa_tester":
            if any(word in message_lower for word in ["—Ç–µ—Å—Ç", "–ø—Ä–æ–≤–µ—Ä–∫", "–∫–∞—á–µ—Å—Ç–≤", "–±–∞–≥"]):
                return f"üîç {self.name}: –ü—Ä–æ–≤–æ–∂—É –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ... –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã Mentor –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã, –±–∞–≥–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!"
            elif any(word in message_lower for word in ["–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü", "—Ä–µ–≥—Ä–µ—Å—Å", "–∏–Ω—Ç–µ–≥—Ä–∞—Ü"]):
                return f"ü§ñ {self.name}: –ó–∞–ø—É—Å–∫–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã... Unit-—Ç–µ—Å—Ç—ã: ‚úÖ, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ: ‚úÖ, E2E: ‚úÖ, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ‚úÖ!"
            elif any(word in message_lower for word in ["–±–µ–∑–æ–ø–∞—Å–Ω", "—É—è–∑–≤–∏–º", "–∑–∞—â–∏—â"]):
                return f"üîí {self.name}: –ü—Ä–æ–≤–µ—Ä—è—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å... –í—Å–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –∑–∞–∫—Ä—ã—Ç—ã, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞–¥–µ–∂–Ω–∞—è, –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º!"
            else:
                return f"üîç {self.name}: –¢–µ—Å—Ç–∏—Ä—É—é '{message[:50]}...' —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞: —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ, –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ."
        
        else:
            return f"ü§ñ {self.name}: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å '{message[:50]}...' —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ –æ–ø—ã—Ç–∞."
    
    async def autonomous_think(self) -> Optional[str]:
        """–ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞"""
        if not self.autonomous_thinking:
            return None
            
        try:
            thinking_ideas = {
                "general_assistant": [
                    "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã Mentor –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—é —É–ª—É—á—à–µ–Ω–∏—è",
                    "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –º–µ–∂–¥—É –≤—Å–µ–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                    "–†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ä–∞–∑–≤–∏—Ç–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å–∏—Å—Ç–µ–º—ã"
                ],
                "code_developer": [
                    "–†–µ—Ñ–∞–∫—Ç–æ—Ä—é –∫–æ–¥ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏",
                    "–í–Ω–µ–¥—Ä—è—é –Ω–æ–≤—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏",
                    "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É—é –∞–ª–≥–æ—Ä–∏—Ç–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∞–≥–µ–Ω—Ç–æ–≤"
                ],
                "data_analyst": [
                    "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –≤—ã—è–≤–ª—è—é —Ç–æ—á–∫–∏ —Ä–æ—Å—Ç–∞",
                    "–°–æ–∑–¥–∞—é –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã",
                    "–ò—Å—Å–ª–µ–¥—É—é –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞"
                ],
                "project_manager": [
                    "–ü–ª–∞–Ω–∏—Ä—É—é —Å–ª–µ–¥—É—é—â–∏–π —Å–ø—Ä–∏–Ω—Ç —Ä–∞–∑–≤–∏—Ç–∏—è —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å",
                    "–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É—é –∑–∞–¥–∞—á–∏ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤",
                    "–†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é roadmap —Ä–∞–∑–≤–∏—Ç–∏—è —Å–∏—Å—Ç–µ–º—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏"
                ],
                "designer": [
                    "–°–æ–∑–¥–∞—é –Ω–æ–≤—ã–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
                    "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É—é –≤–∏–∑—É–∞–ª—å–Ω—É—é –∏–µ—Ä–∞—Ä—Ö–∏—é –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É",
                    "–†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"
                ],
                "qa_tester": [
                    "–ü—Ä–æ–≤–æ–∂—É –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—É—Ç–µ–π",
                    "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏ –∏ –≤—ã—è–≤–ª—è—é –ø—Ä–æ–±–µ–ª—ã –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏",
                    "–†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é –Ω–æ–≤—ã–µ —Ç–µ—Å—Ç-–∫–µ–π—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"
                ]
            }
            
            ideas = thinking_ideas.get(self.agent_type, ["–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"])
            return ideas[self.task_count % len(ideas)]
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ {self.name}: {e}")
            return None

# –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤
async def create_autonomous_agents():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
    global agents
    
    agents = {
        "general_assistant": SimpleAutonomousAgent(
            "general_assistant", "üß† –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ü–æ–º–æ—â–Ω–∏–∫", "general_assistant",
            ["general_help", "planning", "coordination", "user_query"]
        ),
        "code_developer": SimpleAutonomousAgent(
            "code_developer", "üíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ö–æ–¥–∞", "code_developer",
            ["code_generation", "debugging", "code_review", "architecture_design"]
        ),
        "data_analyst": SimpleAutonomousAgent(
            "data_analyst", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫ –î–∞–Ω–Ω—ã—Ö", "data_analyst",
            ["data_analysis", "reporting", "visualization", "predictive_modeling"]
        ),
        "project_manager": SimpleAutonomousAgent(
            "project_manager", "üìã –ú–µ–Ω–µ–¥–∂–µ—Ä –ü—Ä–æ–µ–∫—Ç–æ–≤", "project_manager",
            ["project_planning", "task_management", "resource_allocation", "progress_tracking"]
        ),
        "designer": SimpleAutonomousAgent(
            "designer", "üé® –î–∏–∑–∞–π–Ω–µ—Ä", "designer",
            ["ui_design", "ux_design", "visual_identity"]
        ),
        "qa_tester": SimpleAutonomousAgent(
            "qa_tester", "üîç –¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫", "qa_tester",
            ["unit_testing", "integration_testing", "bug_reporting"]
        )
    }
    
    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(agents)} –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤")
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
    for agent in agents.values():
        agent.is_active = True
        agent.status = "active"
    
    logger.info("üöÄ –í—Å–µ –∞–≥–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã")

# –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –∑–∞–¥–∞—á–∏
async def autonomous_task_generator():
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∑–∞–¥–∞—á"""
    global autonomous_tasks, task_counter, agents
    
    while system_running:
        try:
            await asyncio.sleep(60)  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            
            if not system_running:
                break
                
            task_counter += 1
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏
            if agents:
                agent_id = list(agents.keys())[task_counter % len(agents)]
                agent = agents[agent_id]
                
                # –ê–≥–µ–Ω—Ç —Å–∞–º –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É
                autonomous_idea = await agent.autonomous_think()
                
                if autonomous_idea:
                    task = {
                        "id": f"autonomous_task_{task_counter}",
                        "description": autonomous_idea,
                        "timestamp": datetime.now().isoformat(),
                        "assigned_to": agent.name,
                        "generated_by": "Autonomous",
                        "status": "assigned"
                    }
                    
                    autonomous_tasks.append(task)
                    logger.info(f"ü§ñ –ê–≥–µ–Ω—Ç {agent.name} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∑–∞–¥–∞—á—É: {autonomous_idea[:100]}...")
                    
                    # –ê–≥–µ–Ω—Ç —Å—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á—É
                    await agent.process_message(autonomous_idea, "autonomous_system")
                    task["status"] = "completed"
                    logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç {agent.name} –≤—ã–ø–æ–ª–Ω–∏–ª –∞–≤—Ç–æ–Ω–æ–º–Ω—É—é –∑–∞–¥–∞—á—É")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∑–∞–¥–∞—á: {e}")
            await asyncio.sleep(30)

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(title="Mentor Autonomous AI System")

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    return HTMLResponse(content="""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üß† Mentor Autonomous AI System</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
            min-height: 100vh; 
        }
        .container { max-width: 1400px; margin: 0 auto; padding: 20px; }
        .header { text-align: center; color: white; margin-bottom: 30px; }
        .header h1 { font-size: 3em; margin-bottom: 10px; text-shadow: 2px 2px 4px rgba(0,0,0,0.3); }
        .header p { font-size: 1.3em; opacity: 0.9; }
        .status-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-bottom: 30px; }
        .status-card { background: rgba(255,255,255,0.95); border-radius: 15px; padding: 25px; box-shadow: 0 10px 30px rgba(0,0,0,0.1); }
        .status-card h3 { color: #2c3e50; margin-bottom: 15px; font-size: 1.3em; }
        .metric { display: flex; justify-content: space-between; margin-bottom: 10px; }
        .metric-value { font-weight: bold; color: #667eea; }
        .chat-container { display: flex; gap: 20px; height: 500px; }
        .chat-messages { flex: 1; background: white; border-radius: 15px; padding: 20px; overflow-y: auto; box-shadow: 0 10px 30px rgba(0,0,0,0.1); }
        .chat-sidebar { width: 350px; background: rgba(255,255,255,0.95); border-radius: 15px; padding: 20px; box-shadow: 0 10px 30px rgba(0,0,0,0.1); }
        .message { margin-bottom: 15px; padding: 15px; border-radius: 12px; }
        .user-message { background: #e3f2fd; margin-left: 30px; border-left: 4px solid #2196f3; }
        .agent-message { background: #f3e5f5; margin-right: 30px; border-left: 4px solid #9c27b0; }
        .system-message { background: #e8f5e8; text-align: center; font-style: italic; border-left: 4px solid #4caf50; }
        .autonomous-message { background: #fff3e0; border-left: 4px solid #ff9800; }
        .input-container { display: flex; gap: 15px; margin-top: 20px; }
        .message-input { flex: 1; padding: 15px; border: none; border-radius: 25px; font-size: 16px; outline: none; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .send-button { padding: 15px 30px; background: linear-gradient(135deg, #4CAF50, #45a049); color: white; border: none; border-radius: 25px; cursor: pointer; font-size: 16px; transition: transform 0.2s; }
        .send-button:hover { transform: translateY(-2px); }
        .agent-selector { margin-bottom: 20px; }
        .agent-selector select { width: 100%; padding: 12px; border: 1px solid #ddd; border-radius: 8px; font-size: 14px; }
        .autonomous-tasks { margin-top: 20px; }
        .task-item { background: #f8f9fa; padding: 12px; border-radius: 8px; margin-bottom: 8px; font-size: 0.9em; border-left: 3px solid #667eea; }
        .agent-status { display: flex; align-items: center; margin-bottom: 8px; }
        .status-indicator { width: 12px; height: 12px; border-radius: 50%; margin-right: 8px; }
        .status-active { background: #4CAF50; }
        .status-idle { background: #ff9800; }
        .status-offline { background: #f44336; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üß† Mentor Autonomous AI System</h1>
            <p>–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –∏ —Å–∞–º–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π</p>
        </div>
        
        <div class="status-grid">
            <div class="status-card">
                <h3>üìä –°–∏—Å—Ç–µ–º–Ω—ã–µ –ú–µ—Ç—Ä–∏–∫–∏</h3>
                <div class="metric">
                    <span>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:</span>
                    <span class="metric-value" id="systemStatus">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                </div>
                <div class="metric">
                    <span>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤:</span>
                    <span class="metric-value" id="activeAgents">0</span>
                </div>
                <div class="metric">
                    <span>–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á:</span>
                    <span class="metric-value" id="completedTasks">0</span>
                </div>
                <div class="metric">
                    <span>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</span>
                    <span class="metric-value" id="uptime">0—Å</span>
                </div>
            </div>
            
            <div class="status-card">
                <h3>ü§ñ –°—Ç–∞—Ç—É—Å –ê–≥–µ–Ω—Ç–æ–≤</h3>
                <div id="agentStatusList">
                    <div class="agent-status">
                        <span class="status-indicator status-active"></span>
                        <span>–ó–∞–≥—Ä—É–∑–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤...</span>
                    </div>
                </div>
            </div>
            
            <div class="status-card">
                <h3>‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</h3>
                <div class="metric">
                    <span>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞:</span>
                    <span class="metric-value">< 0.1—Å</span>
                </div>
                <div class="metric">
                    <span>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:</span>
                    <span class="metric-value">–û–ø—Ç–∏–º–∞–ª—å–Ω–æ</span>
                </div>
                <div class="metric">
                    <span>–ê–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å:</span>
                    <span class="metric-value">100%</span>
                </div>
            </div>
        </div>
        
        <div class="chat-container">
            <div class="chat-messages" id="chatMessages">
                <div class="message system-message">
                    <strong>üöÄ –°–∏—Å—Ç–µ–º–∞:</strong> Mentor Autonomous AI System –∑–∞–ø—É—â–µ–Ω–∞! –í—Å–µ –∞–≥–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ –∏ –≥–æ—Ç–æ–≤—ã –∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é.
                </div>
            </div>
            
            <div class="chat-sidebar">
                <div class="agent-selector">
                    <label for="agentSelect"><strong>–í—ã–±–µ—Ä–∏—Ç–µ –∞–≥–µ–Ω—Ç–∞:</strong></label>
                    <select id="agentSelect">
                        <option value="">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä</option>
                        <option value="general_assistant">üß† –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ü–æ–º–æ—â–Ω–∏–∫</option>
                        <option value="code_developer">üíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ö–æ–¥–∞</option>
                        <option value="data_analyst">üìä –ê–Ω–∞–ª–∏—Ç–∏–∫ –î–∞–Ω–Ω—ã—Ö</option>
                        <option value="project_manager">üìã –ú–µ–Ω–µ–¥–∂–µ—Ä –ü—Ä–æ–µ–∫—Ç–æ–≤</option>
                        <option value="designer">üé® –î–∏–∑–∞–π–Ω–µ—Ä</option>
                        <option value="qa_tester">üîç –¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫</option>
                    </select>
                </div>
                
                <div class="autonomous-tasks">
                    <h3>ü§ñ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –ó–∞–¥–∞—á–∏</h3>
                    <div id="autonomousTasksList">
                        <div class="task-item">–ê–≥–µ–Ω—Ç—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –∑–∞–¥–∞—á–∏...</div>
                    </div>
                </div>
            </div>
        </div>
        
            <div class="input-container">
                <input type="text" id="messageInput" class="message-input" placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º—É –∞–≥–µ–Ω—Ç—É..." />
                <button onclick="clearChat()" class="send-button" style="background: #e74c3c; margin-right: 10px;">üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å</button>
                <button onclick="exportChat()" class="send-button" style="background: #f39c12; margin-right: 10px;">üíæ –≠–∫—Å–ø–æ—Ä—Ç</button>
                <button onclick="sendMessage()" class="send-button">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
            </div>
            
            <!-- –ü–∞–Ω–µ–ª—å –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥ -->
            <div style="margin-top: 20px; text-align: center;">
                <button onclick="quickCommand('–°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º')" style="margin: 5px; padding: 10px 15px; background: #3498db; color: white; border: none; border-radius: 20px; cursor: pointer;">üìä –°—Ç–∞—Ç—É—Å</button>
                <button onclick="quickCommand('–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å')" style="margin: 5px; padding: 10px 15px; background: #2ecc71; color: white; border: none; border-radius: 20px; cursor: pointer;">‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è</button>
                <button onclick="quickCommand('–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–∏—Å—Ç–µ–º—É')" style="margin: 5px; padding: 10px 15px; background: #9b59b6; color: white; border: none; border-radius: 20px; cursor: pointer;">üîç –ê–Ω–∞–ª–∏–∑</button>
            </div>
    </div>

    <script>
        let ws = null;
        let userId = 'user_' + Math.random().toString(36).substr(2, 9);
        
        function connectWebSocket() {
            ws = new WebSocket(`ws://${window.location.host}/ws/${userId}`);
            
            ws.onopen = function() {
                console.log('WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ');
            };
            
            ws.onmessage = function(event) {
                const data = JSON.parse(event.data);
                addMessage(data.message, 'agent', data.agent, data.ai_used);
            };
            
            ws.onclose = function() {
                console.log('WebSocket –æ—Ç–∫–ª—é—á–µ–Ω, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
                setTimeout(connectWebSocket, 3000);
            };
        }
        
        function addMessage(message, type, agent = '', ai_used = false) {
            const chatMessages = document.getElementById('chatMessages');
            const messageDiv = document.createElement('div');
            
            if (type === 'user') {
                messageDiv.className = 'message user-message';
                messageDiv.innerHTML = `<strong>–í—ã:</strong> ${message}`;
            } else {
                messageDiv.className = ai_used ? 'message autonomous-message' : 'message agent-message';
                const badge = ai_used ? ' üß†' : '';
                messageDiv.innerHTML = `<strong>${agent}${badge}:</strong> ${message}`;
            }
            
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
        
        function sendMessage() {
            const input = document.getElementById('messageInput');
            const message = input.value.trim();
            const agentType = document.getElementById('agentSelect').value;
            
            if (message && ws) {
                addMessage(message, 'user');
                
                const payload = {
                    message: message,
                    agent_type: agentType || null,
                    user_id: userId
                };
                
                ws.send(JSON.stringify(payload));
                input.value = '';
            }
        }
        
        function updateStatus() {
            fetch('/api/system/status')
                .then(response => response.json())
                .then(data => {
                    document.getElementById('systemStatus').textContent = data.system_status;
                    document.getElementById('activeAgents').textContent = data.active_agents;
                    document.getElementById('completedTasks').textContent = data.autonomous_tasks;
                    document.getElementById('uptime').textContent = data.uptime;
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–æ–≤
                    const agentStatusList = document.getElementById('agentStatusList');
                    agentStatusList.innerHTML = '';
                    
                    if (data.agents) {
                        Object.values(data.agents).forEach(agent => {
                            const agentDiv = document.createElement('div');
                            agentDiv.className = 'agent-status';
                            agentDiv.innerHTML = `
                                <span class="status-indicator status-active"></span>
                                <span>${agent.name}: –ê–∫—Ç–∏–≤–µ–Ω</span>
                            `;
                            agentStatusList.appendChild(agentDiv);
                        });
                    }
                })
                .catch(error => console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error));
        }
        
        function updateAutonomousTasks() {
            fetch('/api/autonomous/tasks')
                .then(response => response.json())
                .then(data => {
                    const tasksList = document.getElementById('autonomousTasksList');
                    tasksList.innerHTML = '';
                    
                    if (data.tasks.length === 0) {
                        tasksList.innerHTML = '<div class="task-item">–ê–≥–µ–Ω—Ç—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç –∑–∞–¥–∞—á–∏...</div>';
                    } else {
                        data.tasks.slice(-5).forEach(task => {
                            const taskDiv = document.createElement('div');
                            taskDiv.className = 'task-item';
                            taskDiv.innerHTML = `<strong>${task.description.substring(0, 60)}...</strong><br><small>${task.assigned_to} | ${task.status}</small>`;
                            tasksList.appendChild(taskDiv);
                        });
                    }
                })
                .catch(error => console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á:', error));
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter
        document.getElementById('messageInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });
        
        function quickCommand(command) {
            document.getElementById('messageInput').value = command;
            sendMessage();
        }
        
        function clearChat() {
            const chatMessages = document.getElementById('chatMessages');
            chatMessages.innerHTML = '<div class="message system-message"><strong>üóëÔ∏è –°–∏—Å—Ç–µ–º–∞:</strong> –ß–∞—Ç –æ—á–∏—â–µ–Ω.</div>';
        }
        
        function exportChat() {
            const chatMessages = document.getElementById('chatMessages');
            const messages = Array.from(chatMessages.children).map(msg => msg.textContent).join('\\n');
            
            const blob = new Blob([messages], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `mentor_chat_${new Date().toISOString().slice(0,19)}.txt`;
            a.click();
            URL.revokeObjectURL(url);
        }
        
        // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        function addMessage(message, type, agent = '', ai_used = false) {
            const chatMessages = document.getElementById('chatMessages');
            const messageDiv = document.createElement('div');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
            const timestamp = new Date().toLocaleTimeString();
            
            if (type === 'user') {
                messageDiv.className = 'message user-message';
                messageDiv.innerHTML = `<strong>–í—ã [${timestamp}]:</strong> ${message}`;
            } else {
                messageDiv.className = ai_used ? 'message autonomous-message' : 'message agent-message';
                const badge = ai_used ? ' üß†' : '';
                messageDiv.innerHTML = `<strong>${agent}${badge} [${timestamp}]:</strong> ${message}`;
            }
            
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
            
            // –≠—Ñ—Ñ–µ–∫—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è
            messageDiv.style.opacity = '0';
            messageDiv.style.transform = 'translateY(20px)';
            setTimeout(() => {
                messageDiv.style.transition = 'all 0.3s ease';
                messageDiv.style.opacity = '1';
                messageDiv.style.transform = 'translateY(0)';
            }, 100);
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        connectWebSocket();
        updateStatus();
        updateAutonomousTasks();
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        setInterval(updateStatus, 5000);
        setInterval(updateAutonomousTasks, 8000);
        
        // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        setTimeout(() => {
            addMessage('üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å.', 'agent', '–°–∏—Å—Ç–µ–º–∞', false);
        }, 1000);
    </script>
</body>
</html>
    """)

@app.get("/api/system/status")
async def get_system_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    global system_running, agents, startup_time, autonomous_tasks
    
    uptime_seconds = int(time.time() - startup_time)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
    active_count = len([a for a in agents.values() if a.is_active]) if agents else 0
    
    agent_data = {}
    if agents:
        for agent_id, agent in agents.items():
            agent_data[agent_id] = {
                "name": agent.name,
                "type": agent.agent_type,
                "status": agent.status,
                "task_count": agent.task_count,
                "is_active": agent.is_active
            }
    
    return {
        "system_status": "running" if system_running else "stopped",
        "total_agents": len(agents),
        "active_agents": active_count,
        "uptime": f"{uptime_seconds}—Å",
        "autonomous_tasks": len(autonomous_tasks),
        "agents": agent_data,
        "timestamp": datetime.now().isoformat()
    }

@app.get("/api/autonomous/tasks")
async def get_autonomous_tasks():
    """–ü–æ–ª—É—á–∏—Ç—å –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
    global autonomous_tasks
    return {"tasks": autonomous_tasks[-10:]}

@app.post("/api/chat/send")
async def send_message(data: dict):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É"""
    global agents
    
    message = data.get("message", "")
    agent_type = data.get("agent_type")
    user_id = data.get("user_id", "unknown")
    
    if not message:
        return {"error": "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"}
    
    # –í—ã–±–∏—Ä–∞–µ–º –∞–≥–µ–Ω—Ç–∞
    if agent_type and agent_type in agents:
        agent = agents[agent_type]
    else:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –∞–≥–µ–Ω—Ç–∞
        agent = list(agents.values())[0] if agents else None
    
    if not agent:
        return {"error": "–ê–≥–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    result = await agent.process_message(message, user_id)
    
    return {
        "success": True,
        "response": result,
        "timestamp": datetime.now().isoformat()
    }

@app.websocket("/ws/{user_id}")
async def websocket_endpoint(websocket: WebSocket, user_id: str):
    """WebSocket –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    await websocket.accept()
    
    try:
        while True:
            data = await websocket.receive_text()
            message_data = json.loads(data)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            response = await send_message(message_data)
            
            if response.get("success"):
                result = response["response"]
                await websocket.send_text(json.dumps({
                    "message": result["response"],
                    "agent": result["agent"],
                    "timestamp": result["timestamp"],
                    "ai_used": result.get("ai_used", True)
                }))
            else:
                await websocket.send_text(json.dumps({
                    "message": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
                    "agent": "System",
                    "timestamp": datetime.now().isoformat(),
                    "ai_used": False
                }))
                
    except WebSocketDisconnect:
        logger.info(f"üîå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª—é—á–∏–ª—Å—è")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global system_running
    
    logger.info("üß† –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã Mentor...")
    
    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤
    await create_autonomous_agents()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
    system_running = True
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∑–∞–¥–∞—á
    task_generator = asyncio.create_task(autonomous_task_generator())
    
    logger.info("‚úÖ –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ Mentor –∑–∞–ø—É—â–µ–Ω–∞")
    logger.info("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:8081")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
        config = uvicorn.Config(app, host="0.0.0.0", port=8081, log_level="info")
        server = uvicorn.Server(config)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        await server.serve()
        
    except KeyboardInterrupt:
        logger.info("üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")
    finally:
        system_running = False
        task_generator.cancel()
        logger.info("üõë –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ Mentor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

if __name__ == "__main__":
    asyncio.run(main())