#!/usr/bin/env python3
"""
JARVIS System Demonstration
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å–∏—Å—Ç–µ–º—ã JARVIS
"""

import os
import sys
import json
import time
import asyncio
import requests
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class JarvisDemo:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã JARVIS"""
    
    def __init__(self, base_url: str = "http://localhost:8080"):
        self.base_url = base_url
        self.session = requests.Session()
    
    def print_banner(self):
        """–í—ã–≤–æ–¥ –±–∞–Ω–Ω–µ—Ä–∞"""
        banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                              ‚ïë
‚ïë           ü§ñ JARVIS SYSTEM DEMONSTRATION ü§ñ                 ‚ïë
‚ïë                                                              ‚ïë
‚ïë        –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π AI —Å–∏—Å—Ç–µ–º—ã                   ‚ïë
‚ïë     —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º –∏ –æ–±—É—á–µ–Ω–∏–µ–º                    ‚ïë
‚ïë                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"""
        print(banner)
    
    def check_system_availability(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            response = self.session.get(f"{self.base_url}/api/status", timeout=5)
            if response.status_code == 200:
                logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ JARVIS –¥–æ—Å—Ç—É–ø–Ω–∞")
                return True
            else:
                logger.error(f"‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: HTTP {response.status_code}")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def demonstrate_basic_functionality(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
        logger.info("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
            response = self.session.get(f"{self.base_url}/api/status")
            status = response.json()
            
            system_state = status["system_state"]
            logger.info(f"üìä –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {system_state['performance_score']*100:.1f}%")
            logger.info(f"ü§ñ –£—Ä–æ–≤–µ–Ω—å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç–∏: {system_state['autonomy_level']}")
            logger.info(f"üëÅÔ∏è –í–∏–∑—É–∞–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã: {system_state['visual_analysis_count']}")
            logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {status['uptime']/3600:.1f} —á–∞—Å–æ–≤")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return False
    
    def demonstrate_agents(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤"""
        logger.info("ü§ñ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–æ–≤
            response = self.session.get(f"{self.base_url}/api/agents/status")
            agents_data = response.json()
            
            logger.info(f"üë• –í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤: {agents_data['total_agents']}")
            logger.info(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤: {agents_data['active_agents']}")
            
            for agent_id, agent_info in agents_data['agents'].items():
                logger.info(f"  ü§ñ {agent_id}: {agent_info['specialization']}, "
                           f"–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {agent_info['performance']:.2f}, "
                           f"–∑–∞–¥–∞—á: {agent_info['tasks_completed']}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –∞–≥–µ–Ω—Ç–æ–≤
            logger.info("ü§ù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤...")
            coord_response = self.session.post(f"{self.base_url}/api/agents/coordinate")
            if coord_response.status_code == 200:
                result = coord_response.json()
                logger.info(f"‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞: {result['task_id']}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
            logger.info("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö...")
            analysis_response = self.session.post(f"{self.base_url}/api/data/analyze")
            if analysis_response.status_code == 200:
                result = analysis_response.json()
                logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω: {result['task_id']}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤: {e}")
            return False
    
    def demonstrate_visual_intelligence(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞"""
        logger.info("üëÅÔ∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            response = self.session.get(f"{self.base_url}/api/vision/status")
            vision_data = response.json()
            
            logger.info("üìä –ë–∞–∑–æ–≤—ã–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:")
            if "basic_analysis" in vision_data:
                basic = vision_data["basic_analysis"]["last_analysis"]
                logger.info(f"  üîç –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {basic['elements_detected']}")
                logger.info(f"  üö® –ü—Ä–æ–±–ª–µ–º –Ω–∞–π–¥–µ–Ω–æ: {basic['issues_found']}")
                logger.info(f"  üéØ UX Score: {basic['ux_score']:.2f}")
                logger.info(f"  üìà –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {basic['confidence']:.2f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            if "real_analysis" in vision_data:
                logger.info("üîç –†–µ–∞–ª—å–Ω—ã–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:")
                real = vision_data["real_analysis"]["last_analysis"]
                logger.info(f"  üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {real['page_title']}")
                logger.info(f"  üî¢ HTML —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {real['elements_count']}")
                logger.info(f"  üñ±Ô∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö: {real['interactive_elements']}")
                logger.info(f"  ‚ôø –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {real['accessibility_score']:.2f}")
                logger.info(f"  ‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {real['performance_score']:.2f}")
                logger.info(f"  üîç SEO: {real['seo_score']:.2f}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            detailed_response = self.session.get(f"{self.base_url}/api/vision/detailed")
            if detailed_response.status_code == 200:
                detailed = detailed_response.json()
                if "latest_analysis" in detailed:
                    latest = detailed["latest_analysis"]
                    logger.info("üìà –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:")
                    logger.info(f"  üìä –í—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–æ–≤: {detailed['total_analyses']}")
                    logger.info(f"  üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {latest['suggestions_count']}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞: {e}")
            return False
    
    def demonstrate_learning_system(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è"""
        logger.info("üß† –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è")
        
        try:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
            test_event = {
                "event_type": "demo_event",
                "context": {"demo": True, "timestamp": datetime.now().isoformat()},
                "outcome": {"result": "successful_demo"},
                "success": True,
                "performance_impact": 0.03
            }
            
            record_response = self.session.post(
                f"{self.base_url}/api/learning/record",
                json=test_event
            )
            
            if record_response.status_code == 200:
                logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—É—á–µ–Ω–∏—è
            learning_response = self.session.get(f"{self.base_url}/api/learning/status")
            learning_data = learning_response.json()
            
            logger.info("üìö –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è:")
            logger.info(f"  üìä –°–æ–±—ã—Ç–∏—è –∑–∞ 24—á: {learning_data.get('events_24h', 0)}")
            logger.info(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {learning_data.get('success_rate_24h', 0)*100:.1f}%")
            logger.info(f"  üìà –í–ª–∏—è–Ω–∏–µ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {learning_data.get('avg_performance_impact', 0):+.3f}")
            logger.info(f"  üéØ –í—Å–µ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {learning_data.get('total_patterns', 0)}")
            logger.info(f"  üîÑ –û–±—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ: {learning_data.get('learning_enabled', False)}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è: {e}")
            return False
    
    def demonstrate_autonomous_behavior(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è"""
        logger.info("ü§ñ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏–µ
            improvement_response = self.session.post(f"{self.base_url}/api/self-improvement/trigger")
            if improvement_response.status_code == 200:
                result = improvement_response.json()
                logger.info(f"üß† –°–∞–º–æ—É–ª—É—á—à–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ: {result['task_id']}")
            
            # –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            time.sleep(3)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç–∏
            task_types = ["performance_optimization", "ui_improvement", "data_analysis"]
            
            for task_type in task_types:
                task_data = {
                    "type": task_type,
                    "priority": 6,
                    "parameters": {"demo": True, "automated": True}
                }
                
                task_response = self.session.post(
                    f"{self.base_url}/api/tasks",
                    json=task_data
                )
                
                if task_response.status_code == 200:
                    result = task_response.json()
                    logger.info(f"üìã –ó–∞–¥–∞—á–∞ {task_type} —Å–æ–∑–¥–∞–Ω–∞: {result['task_id']}")
            
            # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á
            logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á...")
            time.sleep(8)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            status_response = self.session.get(f"{self.base_url}/api/status")
            status = status_response.json()
            
            logger.info("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã:")
            logger.info(f"  ‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {status['system_state']['performance_score']*100:.1f}%")
            logger.info(f"  üìã –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {status['completed_tasks']}")
            logger.info(f"  üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {status['active_tasks']}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è: {e}")
            return False
    
    def demonstrate_real_time_updates(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        logger.info("üîÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
        
        try:
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥
            start_time = time.time()
            last_visual_count = 0
            last_completed_tasks = 0
            
            while time.time() - start_time < 30:
                response = self.session.get(f"{self.base_url}/api/status")
                status = response.json()
                
                visual_count = status["system_state"]["visual_analysis_count"]
                completed_tasks = status["completed_tasks"]
                
                if visual_count != last_visual_count:
                    logger.info(f"üëÅÔ∏è –ù–æ–≤—ã–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {visual_count} (–±—ã–ª–æ {last_visual_count})")
                    last_visual_count = visual_count
                
                if completed_tasks != last_completed_tasks:
                    logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {completed_tasks} (–±—ã–ª–æ {last_completed_tasks})")
                    last_completed_tasks = completed_tasks
                
                time.sleep(5)
            
            logger.info("üéØ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            return False
    
    def run_full_demonstration(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        self.print_banner()
        
        logger.info("üöÄ –ù–∞—á–∞–ª–æ –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã JARVIS")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        if not self.check_system_availability():
            logger.error("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ JARVIS –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:8080")
            return False
        
        success_count = 0
        total_tests = 5
        
        # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        if self.demonstrate_basic_functionality():
            success_count += 1
            logger.info("‚úÖ –¢–µ—Å—Ç 1/5: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å - –ü–†–û–ô–î–ï–ù")
        else:
            logger.error("‚ùå –¢–µ—Å—Ç 1/5: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å - –ü–†–û–í–ê–õ–ï–ù")
        
        time.sleep(2)
        
        # –¢–µ—Å—Ç 2: –ê–≥–µ–Ω—Ç—ã
        if self.demonstrate_agents():
            success_count += 1
            logger.info("‚úÖ –¢–µ—Å—Ç 2/5: –ú–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ - –ü–†–û–ô–î–ï–ù")
        else:
            logger.error("‚ùå –¢–µ—Å—Ç 2/5: –ú–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ - –ü–†–û–í–ê–õ–ï–ù")
        
        time.sleep(2)
        
        # –¢–µ—Å—Ç 3: –í–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç
        if self.demonstrate_visual_intelligence():
            success_count += 1
            logger.info("‚úÖ –¢–µ—Å—Ç 3/5: –í–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç - –ü–†–û–ô–î–ï–ù")
        else:
            logger.error("‚ùå –¢–µ—Å—Ç 3/5: –í–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç - –ü–†–û–í–ê–õ–ï–ù")
        
        time.sleep(2)
        
        # –¢–µ—Å—Ç 4: –°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è
        if self.demonstrate_learning_system():
            success_count += 1
            logger.info("‚úÖ –¢–µ—Å—Ç 4/5: –°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è - –ü–†–û–ô–î–ï–ù")
        else:
            logger.error("‚ùå –¢–µ—Å—Ç 4/5: –°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è - –ü–†–û–í–ê–õ–ï–ù")
        
        time.sleep(2)
        
        # –¢–µ—Å—Ç 5: –ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        if self.demonstrate_autonomous_behavior():
            success_count += 1
            logger.info("‚úÖ –¢–µ—Å—Ç 5/5: –ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ - –ü–†–û–ô–î–ï–ù")
        else:
            logger.error("‚ùå –¢–µ—Å—Ç 5/5: –ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ - –ü–†–û–í–ê–õ–ï–ù")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        success_rate = success_count / total_tests
        logger.info("")
        logger.info("=" * 60)
        logger.info(f"üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò: {success_count}/{total_tests} ({success_rate:.1%})")
        
        if success_rate >= 0.8:
            logger.info("üèÜ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –°–∏—Å—Ç–µ–º–∞ JARVIS —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ")
        elif success_rate >= 0.6:
            logger.info("‚úÖ –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –°–∏—Å—Ç–µ–º–∞ JARVIS —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ")
        else:
            logger.warning("‚ö†Ô∏è –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢. –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        logger.info("")
        logger.info("üîÑ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è: –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
        self.demonstrate_real_time_updates()
        
        logger.info("")
        logger.info("üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        logger.info("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω: http://localhost:8080")
        
        return success_rate >= 0.6

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        demo = JarvisDemo()
        success = demo.run_full_demonstration()
        
        if success:
            print("\nüéØ –°–∏—Å—Ç–µ–º–∞ JARVIS –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        else:
            print("\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã")
        
    except KeyboardInterrupt:
        logger.info("üõë –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")

if __name__ == "__main__":
    main()