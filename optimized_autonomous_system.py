#!/usr/bin/env python3
"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ Multi-AI
–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å—é –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
"""

import asyncio
import logging
import time
import json
import psutil
import threading
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional
from dataclasses import dataclass, asdict
from pathlib import Path
import aiofiles
import signal
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/workspace/optimized_autonomous_system.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

@dataclass
class SystemMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    cpu_percent: float
    memory_percent: float
    memory_used_mb: float
    disk_usage_percent: float
    network_io: Dict[str, int]
    timestamp: datetime
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            **asdict(self),
            'timestamp': self.timestamp.isoformat()
        }

@dataclass
class AgentMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –∞–≥–µ–Ω—Ç–∞"""
    agent_id: str
    agent_name: str
    tasks_completed: int
    tasks_failed: int
    average_response_time: float
    last_activity: datetime
    status: str
    performance_score: float
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            **asdict(self),
            'last_activity': self.last_activity.isoformat()
        }

class OptimizedAutonomousSystem:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"""
    
    def __init__(self):
        self.running = False
        self.agents = {}
        self.active_agents = set()
        self.task_counter = 0
        self.startup_time = datetime.now()
        self.lock = threading.Lock()
        
        # –ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
        self.system_metrics = []
        self.agent_metrics = {}
        self.performance_history = []
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.config = {
            "max_concurrent_tasks": 10,
            "task_timeout": 30,
            "metrics_retention_hours": 24,
            "auto_restart_threshold": 0.8,  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ 80% –∑–∞–≥—Ä—É–∑–∫–µ
            "health_check_interval": 60,    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            "metrics_save_interval": 300,   # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            "task_generation_interval": (30, 60)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á
        }
        
        # –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤
        self.autonomous_tasks = {
            "general_assistant": [
                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ —Å–æ–∑–¥–∞–π –æ—Ç—á–µ—Ç",
                "–ü—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã",
                "–°–æ–∑–¥–∞–π –ø–ª–∞–Ω –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                "–ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫",
                "–ü—Ä–µ–¥–ª–æ–∂–∏ –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã",
                "–°–æ–∑–¥–∞–π —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
                "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"
            ],
            "code_developer": [
                "–°–æ–∑–¥–∞–π —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API",
                "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –∫–æ–¥ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                "–î–æ–±–∞–≤—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏",
                "–°–æ–∑–¥–∞–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è",
                "–ü—Ä–æ–≤–µ—Ä—å –∫–æ–¥ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π",
                "–°–æ–∑–¥–∞–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π",
                "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
            ],
            "data_analyst": [
                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã",
                "–°–æ–∑–¥–∞–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–æ–≤",
                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API",
                "–°–æ–∑–¥–∞–π –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã",
                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã",
                "–°–æ–∑–¥–∞–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Å–∏—Å—Ç–µ–º—É",
                "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö"
            ],
            "project_manager": [
                "–°–æ–∑–¥–∞–π –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è —Å–∏—Å—Ç–µ–º—ã –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é",
                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞–¥–∞—á",
                "–°–æ–∑–¥–∞–π roadmap –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π",
                "–û—Ü–µ–Ω–∏ —Ä–∏—Å–∫–∏ –∏ —Å–æ–∑–¥–∞–π –ø–ª–∞–Ω –∏—Ö –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏",
                "–°–æ–∑–¥–∞–π –ø–ª–∞–Ω –∑–∞–¥–∞—á –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —á–∞—Å",
                "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤",
                "–°–æ–∑–¥–∞–π –ø–ª–∞–Ω —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"
            ],
            "designer": [
                "–£–ª—É—á—à–∏ –¥–∏–∑–∞–π–Ω –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
                "–°–æ–∑–¥–∞–π –∏–∫–æ–Ω–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π",
                "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π UX –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤",
                "–°–æ–∑–¥–∞–π –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–∏—Å—Ç–µ–º—ã",
                "–ü—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
                "–°–æ–∑–¥–∞–π –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤",
                "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
            ],
            "qa_tester": [
                "–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π –≤—Å–µ API endpoints",
                "–ü—Ä–æ–≤–µ—Ä—å —Å–∏—Å—Ç–µ–º—É –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏",
                "–°–æ–∑–¥–∞–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã",
                "–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π",
                "–ü—Ä–æ–≤–µ–¥–∏ –±–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
                "–°–æ–∑–¥–∞–π —Ç–µ—Å—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π",
                "–ü—Ä–æ–≤–µ—Ä—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ä–∞–∑–Ω—ã–º–∏ –±—Ä–∞—É–∑–µ—Ä–∞–º–∏"
            ]
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–æ–≤
        self._initialize_agents()
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
        self._setup_directories()
        
        logger.info("üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def _setup_directories(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        directories = [
            "/workspace/system_data",
            "/workspace/metrics",
            "/workspace/logs",
            "/workspace/backups"
        ]
        
        for directory in directories:
            Path(directory).mkdir(parents=True, exist_ok=True)
            logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")
    
    def _initialize_agents(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
        agent_types = [
            "general_assistant",
            "code_developer", 
            "data_analyst",
            "project_manager",
            "designer",
            "qa_tester"
        ]
        
        for agent_type in agent_types:
            agent_id = f"{agent_type}_agent"
            self.agents[agent_type] = {
                "id": agent_id,
                "name": f"–ê–≥–µ–Ω—Ç {agent_type.replace('_', ' ').title()}",
                "type": agent_type,
                "is_active": False,
                "last_activity": None,
                "task_count": 0,
                "failed_tasks": 0,
                "status": "idle",
                "performance_score": 1.0,
                "response_times": []
            }
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∞–≥–µ–Ω—Ç–∞
            self.agent_metrics[agent_id] = AgentMetrics(
                agent_id=agent_id,
                agent_name=self.agents[agent_type]["name"],
                tasks_completed=0,
                tasks_failed=0,
                average_response_time=0.0,
                last_activity=datetime.now(),
                status="idle",
                performance_score=1.0
            )
            
            logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç {agent_type} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏")
    
    async def collect_system_metrics(self) -> SystemMetrics:
        """–°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # CPU –∏ –ø–∞–º—è—Ç—å
            cpu_percent = psutil.cpu_percent(interval=1)
            memory = psutil.virtual_memory()
            memory_percent = memory.percent
            memory_used_mb = memory.used / (1024 * 1024)
            
            # –î–∏—Å–∫
            disk = psutil.disk_usage('/')
            disk_usage_percent = (disk.used / disk.total) * 100
            
            # –°–µ—Ç—å
            network = psutil.net_io_counters()
            network_io = {
                'bytes_sent': network.bytes_sent,
                'bytes_recv': network.bytes_recv,
                'packets_sent': network.packets_sent,
                'packets_recv': network.packets_recv
            }
            
            metrics = SystemMetrics(
                cpu_percent=cpu_percent,
                memory_percent=memory_percent,
                memory_used_mb=memory_used_mb,
                disk_usage_percent=disk_usage_percent,
                network_io=network_io,
                timestamp=datetime.now()
            )
            
            return metrics
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã: {e}")
            return SystemMetrics(0, 0, 0, 0, {}, datetime.now())
    
    async def update_agent_metrics(self, agent_type: str, task_duration: float, success: bool):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∞–≥–µ–Ω—Ç–∞"""
        try:
            with self.lock:
                agent = self.agents[agent_type]
                agent_id = agent["id"]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
                if success:
                    agent["task_count"] += 1
                    agent["response_times"].append(task_duration)
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ 100 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–¥–∞—á
                    if len(agent["response_times"]) > 100:
                        agent["response_times"] = agent["response_times"][-100:]
                else:
                    agent["failed_tasks"] += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
                metrics = self.agent_metrics[agent_id]
                metrics.tasks_completed = agent["task_count"]
                metrics.tasks_failed = agent["failed_tasks"]
                metrics.last_activity = datetime.now()
                metrics.status = agent["status"]
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
                if agent["response_times"]:
                    metrics.average_response_time = sum(agent["response_times"]) / len(agent["response_times"])
                
                # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                success_rate = agent["task_count"] / (agent["task_count"] + agent["failed_tasks"]) if (agent["task_count"] + agent["failed_tasks"]) > 0 else 1.0
                response_time_score = max(0, 1 - (metrics.average_response_time / 30))  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ 30 —Å–µ–∫—É–Ω–¥–∞–º
                metrics.performance_score = (success_rate * 0.7 + response_time_score * 0.3)
                
                agent["performance_score"] = metrics.performance_score
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –∞–≥–µ–Ω—Ç–∞ {agent_type}: {e}")
    
    async def health_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            metrics = await self.collect_system_metrics()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
            health_status = {
                "overall_health": "healthy",
                "issues": [],
                "recommendations": [],
                "metrics": metrics.to_dict()
            }
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ CPU
            if metrics.cpu_percent > 80:
                health_status["issues"].append(f"–í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: {metrics.cpu_percent:.1f}%")
                health_status["recommendations"].append("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è")
                if metrics.cpu_percent > 90:
                    health_status["overall_health"] = "critical"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
            if metrics.memory_percent > 85:
                health_status["issues"].append(f"–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {metrics.memory_percent:.1f}%")
                health_status["recommendations"].append("–û—Å–≤–æ–±–æ–¥–∏—Ç–µ –ø–∞–º—è—Ç—å –∏–ª–∏ —É–≤–µ–ª–∏—á—å—Ç–µ RAM")
                if metrics.memory_percent > 95:
                    health_status["overall_health"] = "critical"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–∞
            if metrics.disk_usage_percent > 90:
                health_status["issues"].append(f"–ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: {metrics.disk_usage_percent:.1f}%")
                health_status["recommendations"].append("–û—á–∏—Å—Ç–∏—Ç–µ –¥–∏—Å–∫ –∏–ª–∏ —É–≤–µ–ª–∏—á—å—Ç–µ –æ–±—ä–µ–º")
                health_status["overall_health"] = "critical"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤
            inactive_agents = [agent_type for agent_type, agent in self.agents.items() 
                             if not agent["is_active"] and (datetime.now() - agent["last_activity"]).seconds > 300]
            
            if inactive_agents:
                health_status["issues"].append(f"–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã: {', '.join(inactive_agents)}")
                health_status["recommendations"].append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–æ–≤
            low_performance_agents = [agent_type for agent_type, agent in self.agents.items() 
                                    if agent["performance_score"] < 0.5]
            
            if low_performance_agents:
                health_status["issues"].append(f"–ù–∏–∑–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–æ–≤: {', '.join(low_performance_agents)}")
                health_status["recommendations"].append("–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Ä–∞–±–æ—Ç—É –∞–≥–µ–Ω—Ç–æ–≤ —Å –Ω–∏–∑–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é")
            
            return health_status
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã: {e}")
            return {"overall_health": "error", "error": str(e)}
    
    async def auto_optimize(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            health = await self.health_check()
            
            if health["overall_health"] == "critical":
                logger.warning("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã, –ø—Ä–∏–º–µ–Ω—è–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –º–µ—Ä—ã")
                await self._emergency_optimization()
            elif health["overall_health"] == "warning":
                logger.info("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã, –ø—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é")
                await self._standard_optimization()
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            for recommendation in health.get("recommendations", []):
                await self._apply_recommendation(recommendation)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
    
    async def _emergency_optimization(self):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"""
        try:
            logger.info("üö® –ü—Ä–∏–º–µ–Ω—è–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã
            for agent_type, agent in self.agents.items():
                if not agent["is_active"] and agent["performance_score"] < 0.3:
                    agent["status"] = "disabled"
                    logger.info(f"üî¥ –û—Ç–∫–ª—é—á–µ–Ω –∞–≥–µ–Ω—Ç {agent_type} –∏–∑-–∑–∞ –Ω–∏–∑–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            cutoff_time = datetime.now() - timedelta(hours=1)
            self.system_metrics = [m for m in self.system_metrics if m.timestamp > cutoff_time]
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
            import gc
            gc.collect()
            
            logger.info("‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
    
    async def _standard_optimization(self):
        """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"""
        try:
            logger.info("üîß –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é")
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–æ–≤ —Å –Ω–∏–∑–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
            for agent_type, agent in self.agents.items():
                if agent["performance_score"] < 0.6:
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
                    agent["failed_tasks"] = max(0, agent["failed_tasks"] - 1)
                    logger.info(f"üîß –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –∞–≥–µ–Ω—Ç {agent_type}")
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            await self._cleanup_old_data()
            
            logger.info("‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
    
    async def _apply_recommendation(self, recommendation: str):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        try:
            if "–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ" in recommendation.lower():
                await self._scale_system()
            elif "–ø–∞–º—è—Ç—å" in recommendation.lower():
                await self._optimize_memory()
            elif "–¥–∏—Å–∫" in recommendation.lower():
                await self._cleanup_disk()
            elif "–∞–≥–µ–Ω—Ç—ã" in recommendation.lower():
                await self._optimize_agents()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ '{recommendation}': {e}")
    
    async def _scale_system(self):
        """–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üìà –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    
    async def _optimize_memory(self):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏"""
        logger.info("üß† –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏")
        import gc
        gc.collect()
    
    async def _cleanup_disk(self):
        """–û—á–∏—Å—Ç–∫–∞ –¥–∏—Å–∫–∞"""
        logger.info("üíæ –û—á–∏—â–∞–µ–º –¥–∏—Å–∫")
        await self._cleanup_old_data()
    
    async def _optimize_agents(self):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤"""
        logger.info("ü§ñ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–æ–≤")
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –¥–ª—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
        for agent in self.agents.values():
            agent["failed_tasks"] = max(0, agent["failed_tasks"] - 1)
    
    async def _cleanup_old_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            cutoff_time = datetime.now() - timedelta(hours=self.config["metrics_retention_hours"])
            self.system_metrics = [m for m in self.system_metrics if m.timestamp > cutoff_time]
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—É—é –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            self.performance_history = [p for p in self.performance_history if p["timestamp"] > cutoff_time.isoformat()]
            
            logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    async def save_metrics(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫"""
        try:
            metrics_data = {
                "system_metrics": [m.to_dict() for m in self.system_metrics[-100:]],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π
                "agent_metrics": {agent_id: metrics.to_dict() for agent_id, metrics in self.agent_metrics.items()},
                "performance_history": self.performance_history[-50:],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∑–∞–ø–∏—Å–µ–π
                "saved_at": datetime.now().isoformat()
            }
            
            metrics_file = Path("/workspace/metrics/system_metrics.json")
            async with aiofiles.open(metrics_file, 'w', encoding='utf-8') as f:
                await f.write(json.dumps(metrics_data, ensure_ascii=False, indent=2))
            
            logger.info("üíæ –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
    
    async def load_metrics(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç—Ä–∏–∫"""
        try:
            metrics_file = Path("/workspace/metrics/system_metrics.json")
            if metrics_file.exists():
                async with aiofiles.open(metrics_file, 'r', encoding='utf-8') as f:
                    data = json.loads(await f.read())
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
                if "system_metrics" in data:
                    self.system_metrics = [SystemMetrics(**m) for m in data["system_metrics"]]
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤
                if "agent_metrics" in data:
                    for agent_id, metrics_data in data["agent_metrics"].items():
                        if agent_id in self.agent_metrics:
                            metrics_data["last_activity"] = datetime.fromisoformat(metrics_data["last_activity"])
                            self.agent_metrics[agent_id] = AgentMetrics(**metrics_data)
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                if "performance_history" in data:
                    self.performance_history = data["performance_history"]
                
                logger.info("üìä –ú–µ—Ç—Ä–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫: {e}")
    
    async def autonomous_task_generator(self):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∑–∞–¥–∞—á"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∑–∞–¥–∞—á...")
        
        while self.running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∑–∞–¥–∞—á
                health = await self.health_check()
                if health["overall_health"] == "critical":
                    logger.warning("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∑–∞–¥–∞—á")
                    await asyncio.sleep(60)
                    continue
                
                # –í—ã–±–∏—Ä–∞–µ–º –∞–≥–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                available_agents = [agent_type for agent_type, agent in self.agents.items() 
                                  if agent["status"] != "disabled" and agent["performance_score"] > 0.3]
                
                if not available_agents:
                    logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á")
                    await asyncio.sleep(30)
                    continue
                
                # –í—ã–±–∏—Ä–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å –Ω–∞–∏–ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
                best_agent = max(available_agents, key=lambda x: self.agents[x]["performance_score"])
                agent = self.agents[best_agent]
                
                if best_agent in self.autonomous_tasks:
                    tasks = self.autonomous_tasks[best_agent]
                    task = tasks[self.task_counter % len(tasks)]
                    
                    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞
                    start_time = time.time()
                    with self.lock:
                        agent["is_active"] = True
                        agent["last_activity"] = datetime.now()
                        agent["status"] = "working"
                        self.active_agents.add(best_agent)
                        self.task_counter += 1
                    
                    logger.info(f"üìã –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –∑–∞–¥–∞—á–∞ #{self.task_counter} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–≥–µ–Ω—Ç—É {best_agent}: {task[:50]}...")
                    
                    # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –∞–≥–µ–Ω—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                    try:
                        await asyncio.wait_for(
                            asyncio.sleep(5),  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
                            timeout=self.config["task_timeout"]
                        )
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                        task_duration = time.time() - start_time
                        await self.update_agent_metrics(best_agent, task_duration, True)
                        
                        logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç {best_agent} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª –∑–∞–¥–∞—á—É –∑–∞ {task_duration:.2f}—Å")
                        
                    except asyncio.TimeoutError:
                        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                        task_duration = time.time() - start_time
                        await self.update_agent_metrics(best_agent, task_duration, False)
                        logger.warning(f"‚è∞ –ê–≥–µ–Ω—Ç {best_agent} –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏")
                    
                    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞
                    with self.lock:
                        agent["is_active"] = False
                        agent["status"] = "idle"
                        if best_agent in self.active_agents:
                            self.active_agents.remove(best_agent)
                
                # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
                base_interval = self.config["task_generation_interval"][0]
                max_interval = self.config["task_generation_interval"][1]
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
                if health["overall_health"] == "warning":
                    interval = min(max_interval, base_interval * 1.5)
                elif health["overall_health"] == "critical":
                    interval = max_interval
                else:
                    interval = base_interval
                
                await asyncio.sleep(interval)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∑–∞–¥–∞—á: {e}")
                await asyncio.sleep(10)
    
    async def metrics_collector(self):
        """–°–±–æ—Ä—â–∏–∫ –º–µ—Ç—Ä–∏–∫"""
        logger.info("üìä –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä—â–∏–∫–∞ –º–µ—Ç—Ä–∏–∫...")
        
        while self.running:
            try:
                # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
                metrics = await self.collect_system_metrics()
                self.system_metrics.append(metrics)
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç—Ä–∏–∫ –≤ –ø–∞–º—è—Ç–∏
                if len(self.system_metrics) > 1000:
                    self.system_metrics = self.system_metrics[-500:]
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                performance_data = {
                    "timestamp": datetime.now().isoformat(),
                    "total_agents": len(self.agents),
                    "active_agents": len(self.active_agents),
                    "avg_performance": sum(agent["performance_score"] for agent in self.agents.values()) / len(self.agents),
                    "system_health": (await self.health_check())["overall_health"]
                }
                self.performance_history.append(performance_data)
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                if len(self.performance_history) > 500:
                    self.performance_history = self.performance_history[-250:]
                
                await asyncio.sleep(60)  # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–±–æ—Ä—â–∏–∫–µ –º–µ—Ç—Ä–∏–∫: {e}")
                await asyncio.sleep(60)
    
    async def health_monitor(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üè• –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã...")
        
        while self.running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
                health = await self.health_check()
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                if health["overall_health"] == "critical":
                    logger.critical(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –°–ò–°–¢–ï–ú–´: {health['issues']}")
                elif health["overall_health"] == "warning":
                    logger.warning(f"‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: {health['issues']}")
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
                await self.auto_optimize()
                
                await asyncio.sleep(self.config["health_check_interval"])
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–µ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
                await asyncio.sleep(60)
    
    async def metrics_saver(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫"""
        logger.info("üíæ –ó–∞–ø—É—Å–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫...")
        
        while self.running:
            try:
                await self.save_metrics()
                await asyncio.sleep(self.config["metrics_save_interval"])
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫: {e}")
                await asyncio.sleep(300)
    
    def get_system_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        with self.lock:
            uptime_delta = datetime.now() - self.startup_time
            uptime = f"{int(uptime_delta.total_seconds() / 60)}–º"
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            total_performance = sum(agent["performance_score"] for agent in self.agents.values()) / len(self.agents)
            
            return {
                "system_status": "running" if self.running else "stopped",
                "uptime": uptime,
                "total_agents": len(self.agents),
                "active_agents": len(self.active_agents),
                "total_tasks": self.task_counter,
                "overall_performance": total_performance,
                "system_health": "healthy",  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ health_check
                "coordination_status": {
                    "total_agents": len(self.agents),
                    "active_tasks": len(self.active_agents),
                    "message_queue_size": 0,
                    "agent_capabilities": {
                        agent_id: {
                            "skills": ["autonomous_work", "task_processing", "performance_monitoring"],
                            "performance_score": agent["performance_score"],
                            "availability": agent["status"] != "disabled",
                            "current_load": 1.0 if agent["is_active"] else 0.0,
                            "is_active": agent["is_active"],
                            "last_activity": agent["last_activity"].isoformat() if agent["last_activity"] else None,
                            "tasks_completed": agent["task_count"],
                            "tasks_failed": agent["failed_tasks"]
                        }
                        for agent_id, agent in self.agents.items()
                    },
                    "active_tasks_info": []
                },
                "shared_memory": {
                    "knowledge_items": self.task_counter,
                    "conversation_history": self.task_counter,
                    "agent_capabilities": len(self.agents),
                    "metrics_count": len(self.system_metrics)
                },
                "startup_time": self.startup_time.isoformat(),
                "config": self.config
            }
    
    def send_message_to_agent(self, message: str, agent_type: str = None, user_id: str = "user") -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≥–µ–Ω—Ç—É"""
        try:
            with self.lock:
                if agent_type and agent_type in self.agents:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∞–≥–µ–Ω—Ç—É
                    agent = self.agents[agent_type]
                    start_time = time.time()
                    
                    agent["is_active"] = True
                    agent["last_activity"] = datetime.now()
                    agent["task_count"] += 1
                    self.active_agents.add(agent_type)
                    
                    logger.info(f"üöÄ –ê–≥–µ–Ω—Ç {agent_type} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {message[:50]}...")
                    
                    # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
                    task_duration = time.time() - start_time
                    self.update_agent_metrics(agent_type, task_duration, True)
                    
                    return {
                        "success": True,
                        "response": {
                            "response": f"–ê–≥–µ–Ω—Ç {agent['name']} –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}",
                            "status": "processed",
                            "processing_time": task_duration
                        },
                        "agent": agent["name"],
                        "agent_type": agent_type,
                        "timestamp": datetime.now().isoformat()
                    }
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≥–µ–Ω—Ç—É —Å –Ω–∞–∏–ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
                    available_agents = [agent_type for agent_type, agent in self.agents.items() 
                                      if agent["status"] != "disabled"]
                    
                    if available_agents:
                        best_agent = max(available_agents, key=lambda x: self.agents[x]["performance_score"])
                        return self.send_message_to_agent(message, best_agent, user_id)
                    else:
                        return {"error": "No agents available"}
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≥–µ–Ω—Ç—É: {e}")
            return {"error": str(e)}
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            await self.load_metrics()
            
            self.running = True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
            tasks = [
                asyncio.create_task(self.autonomous_task_generator()),
                asyncio.create_task(self.metrics_collector()),
                asyncio.create_task(self.health_monitor()),
                asyncio.create_task(self.metrics_saver())
            ]
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
            await asyncio.gather(*tasks, return_exceptions=True)
            
            logger.info("‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
            return False
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
        self.running = False
        logger.info("‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã
_optimized_system = None

def get_optimized_system() -> OptimizedAutonomousSystem:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    global _optimized_system
    if _optimized_system is None:
        _optimized_system = OptimizedAutonomousSystem()
    return _optimized_system

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    system = get_optimized_system()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
        if await system.start():
            logger.info("‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")
            
            # –ñ–¥–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
            await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
            status = system.get_system_status()
            logger.info(f"üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {status}")
            
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∞–≤—Ç–æ–Ω–æ–º–Ω—É—é —Å–∏—Å—Ç–µ–º—É")
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: {e}")
    
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É
        system.stop()

if __name__ == "__main__":
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    def signal_handler(signum, frame):
        logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
        system = get_optimized_system()
        system.stop()
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    asyncio.run(main())