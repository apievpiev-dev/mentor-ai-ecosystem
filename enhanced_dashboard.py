#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã Mentor
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤ –∏ —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, Any, List
from fastapi import FastAPI, WebSocket, WebSocketDisconnect, HTTPException
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from pathlib import Path
import aiofiles

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="Mentor System Dashboard",
    description="–£–ª—É—á—à–µ–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã Mentor",
    version="2.0.0"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

class DashboardManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∞—à–±–æ—Ä–¥–∞"""
    
    def __init__(self):
        self.connections: List[WebSocket] = []
        self.metrics_data = {}
        self.performance_history = []
        
    async def connect(self, websocket: WebSocket):
        await websocket.accept()
        self.connections.append(websocket)
        logger.info(f"üìä –î–∞—à–±–æ—Ä–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω. –í—Å–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {len(self.connections)}")
    
    def disconnect(self, websocket: WebSocket):
        if websocket in self.connections:
            self.connections.remove(websocket)
        logger.info(f"üìä –î–∞—à–±–æ—Ä–¥ –æ—Ç–∫–ª—é—á–µ–Ω. –í—Å–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {len(self.connections)}")
    
    async def broadcast(self, data: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
        if not self.connections:
            return
            
        message = json.dumps(data, ensure_ascii=False)
        disconnected = []
        
        for connection in self.connections:
            try:
                await connection.send_text(message)
            except:
                disconnected.append(connection)
        
        # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for connection in disconnected:
            self.disconnect(connection)

# –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∞—à–±–æ—Ä–¥–∞
dashboard_manager = DashboardManager()

@app.get("/", response_class=HTMLResponse)
async def get_dashboard():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–∞—à–±–æ—Ä–¥–∞"""
    html_content = """
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Mentor System Dashboard</title>
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <style>
            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }
            
            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
                color: #333;
            }
            
            .header {
                background: rgba(255, 255, 255, 0.95);
                backdrop-filter: blur(10px);
                padding: 20px;
                box-shadow: 0 2px 20px rgba(0,0,0,0.1);
                position: sticky;
                top: 0;
                z-index: 100;
            }
            
            .header h1 {
                text-align: center;
                color: #2c3e50;
                font-size: 2.5em;
                margin-bottom: 10px;
            }
            
            .header p {
                text-align: center;
                color: #7f8c8d;
                font-size: 1.1em;
            }
            
            .dashboard-container {
                max-width: 1400px;
                margin: 0 auto;
                padding: 20px;
            }
            
            .metrics-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                gap: 20px;
                margin-bottom: 30px;
            }
            
            .metric-card {
                background: rgba(255, 255, 255, 0.95);
                backdrop-filter: blur(10px);
                border-radius: 15px;
                padding: 25px;
                box-shadow: 0 8px 32px rgba(0,0,0,0.1);
                border: 1px solid rgba(255, 255, 255, 0.2);
                transition: transform 0.3s ease, box-shadow 0.3s ease;
            }
            
            .metric-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 12px 40px rgba(0,0,0,0.15);
            }
            
            .metric-card h3 {
                color: #2c3e50;
                margin-bottom: 15px;
                font-size: 1.3em;
                display: flex;
                align-items: center;
                gap: 10px;
            }
            
            .metric-value {
                font-size: 2.5em;
                font-weight: bold;
                color: #3498db;
                margin-bottom: 10px;
            }
            
            .metric-label {
                color: #7f8c8d;
                font-size: 0.9em;
                text-transform: uppercase;
                letter-spacing: 1px;
            }
            
            .status-indicator {
                display: inline-block;
                width: 12px;
                height: 12px;
                border-radius: 50%;
                margin-right: 8px;
            }
            
            .status-healthy { background: #27ae60; }
            .status-warning { background: #f39c12; }
            .status-critical { background: #e74c3c; }
            .status-unknown { background: #95a5a6; }
            
            .charts-section {
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 20px;
                margin-bottom: 30px;
            }
            
            .chart-container {
                background: rgba(255, 255, 255, 0.95);
                backdrop-filter: blur(10px);
                border-radius: 15px;
                padding: 25px;
                box-shadow: 0 8px 32px rgba(0,0,0,0.1);
                border: 1px solid rgba(255, 255, 255, 0.2);
            }
            
            .chart-container h3 {
                color: #2c3e50;
                margin-bottom: 20px;
                text-align: center;
            }
            
            .agents-section {
                background: rgba(255, 255, 255, 0.95);
                backdrop-filter: blur(10px);
                border-radius: 15px;
                padding: 25px;
                box-shadow: 0 8px 32px rgba(0,0,0,0.1);
                border: 1px solid rgba(255, 255, 255, 0.2);
            }
            
            .agents-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                gap: 15px;
                margin-top: 20px;
            }
            
            .agent-card {
                background: #f8f9fa;
                border-radius: 10px;
                padding: 20px;
                border-left: 4px solid #3498db;
                transition: all 0.3s ease;
            }
            
            .agent-card:hover {
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            }
            
            .agent-card.active {
                border-left-color: #27ae60;
                background: #d5f4e6;
            }
            
            .agent-card.inactive {
                border-left-color: #e74c3c;
                background: #fadbd8;
            }
            
            .agent-name {
                font-weight: bold;
                color: #2c3e50;
                margin-bottom: 8px;
            }
            
            .agent-status {
                display: flex;
                align-items: center;
                margin-bottom: 10px;
            }
            
            .agent-metrics {
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 10px;
                font-size: 0.9em;
                color: #7f8c8d;
            }
            
            .performance-bar {
                width: 100%;
                height: 8px;
                background: #ecf0f1;
                border-radius: 4px;
                overflow: hidden;
                margin-top: 10px;
            }
            
            .performance-fill {
                height: 100%;
                background: linear-gradient(90deg, #e74c3c 0%, #f39c12 50%, #27ae60 100%);
                transition: width 0.3s ease;
            }
            
            .refresh-btn {
                position: fixed;
                bottom: 30px;
                right: 30px;
                background: #3498db;
                color: white;
                border: none;
                border-radius: 50px;
                padding: 15px 25px;
                font-size: 1.1em;
                cursor: pointer;
                box-shadow: 0 5px 15px rgba(52, 152, 219, 0.3);
                transition: all 0.3s ease;
                z-index: 1000;
            }
            
            .refresh-btn:hover {
                background: #2980b9;
                transform: translateY(-2px);
                box-shadow: 0 8px 20px rgba(52, 152, 219, 0.4);
            }
            
            .loading {
                text-align: center;
                padding: 40px;
                color: #7f8c8d;
                font-size: 1.2em;
            }
            
            .error {
                text-align: center;
                padding: 20px;
                color: #e74c3c;
                background: rgba(231, 76, 60, 0.1);
                border-radius: 10px;
                margin: 20px;
            }
            
            @media (max-width: 768px) {
                .charts-section {
                    grid-template-columns: 1fr;
                }
                
                .metrics-grid {
                    grid-template-columns: 1fr;
                }
                
                .agents-grid {
                    grid-template-columns: 1fr;
                }
            }
        </style>
    </head>
    <body>
        <div class="header">
            <h1>ü§ñ Mentor System Dashboard</h1>
            <p>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö AI-–∞–≥–µ–Ω—Ç–æ–≤</p>
        </div>
        
        <div class="dashboard-container">
            <div class="metrics-grid">
                <div class="metric-card">
                    <h3><span class="status-indicator" id="systemStatusIndicator"></span>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</h3>
                    <div class="metric-value" id="systemStatus">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
                    <div class="metric-label">–û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ</div>
                </div>
                
                <div class="metric-card">
                    <h3>üìä –í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤</h3>
                    <div class="metric-value" id="totalAgents">0</div>
                    <div class="metric-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤</div>
                </div>
                
                <div class="metric-card">
                    <h3>‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</h3>
                    <div class="metric-value" id="overallPerformance">0%</div>
                    <div class="metric-label">–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</div>
                </div>
                
                <div class="metric-card">
                    <h3>üìà –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á</h3>
                    <div class="metric-value" id="totalTasks">0</div>
                    <div class="metric-label">–í—Å–µ–≥–æ –∑–∞–¥–∞—á</div>
                </div>
                
                <div class="metric-card">
                    <h3>‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã</h3>
                    <div class="metric-value" id="uptime">0–º</div>
                    <div class="metric-label">–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã</div>
                </div>
                
                <div class="metric-card">
                    <h3>üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏</h3>
                    <div class="metric-value" id="memoryUsage">0%</div>
                    <div class="metric-label">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–º—è—Ç–∏</div>
                </div>
            </div>
            
            <div class="charts-section">
                <div class="chart-container">
                    <h3>üìä –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–æ–≤</h3>
                    <canvas id="performanceChart"></canvas>
                </div>
                
                <div class="chart-container">
                    <h3>üìà –ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</h3>
                    <canvas id="activityChart"></canvas>
                </div>
            </div>
            
            <div class="agents-section">
                <h3>ü§ñ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤</h3>
                <div class="agents-grid" id="agentsGrid">
                    <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≥–µ–Ω—Ç–∞—Ö...</div>
                </div>
            </div>
        </div>
        
        <button class="refresh-btn" onclick="refreshDashboard()">üîÑ –û–±–Ω–æ–≤–∏—Ç—å</button>
        
        <script>
            let ws = null;
            let performanceChart = null;
            let activityChart = null;
            let lastUpdateTime = null;
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            function initWebSocket() {
                const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
                const wsUrl = `${protocol}//${window.location.host}/ws/dashboard`;
                
                ws = new WebSocket(wsUrl);
                
                ws.onopen = function(event) {
                    console.log('WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
                    refreshDashboard();
                };
                
                ws.onmessage = function(event) {
                    const data = JSON.parse(event.data);
                    updateDashboard(data);
                };
                
                ws.onclose = function(event) {
                    console.log('WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
                    setTimeout(initWebSocket, 3000);
                };
                
                ws.onerror = function(error) {
                    console.error('WebSocket –æ—à–∏–±–∫–∞:', error);
                };
            }
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞
            function updateDashboard(data) {
                lastUpdateTime = new Date();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                document.getElementById('systemStatus').textContent = data.system_status || 'unknown';
                document.getElementById('totalAgents').textContent = data.total_agents || 0;
                document.getElementById('overallPerformance').textContent = 
                    Math.round((data.overall_performance || 0) * 100) + '%';
                document.getElementById('totalTasks').textContent = data.total_tasks || 0;
                document.getElementById('uptime').textContent = data.uptime || '0–º';
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞
                const statusIndicator = document.getElementById('systemStatusIndicator');
                const systemHealth = data.system_health || 'unknown';
                statusIndicator.className = 'status-indicator status-' + systemHealth;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
                if (data.coordination_status && data.coordination_status.agent_capabilities) {
                    const agents = Object.values(data.coordination_status.agent_capabilities);
                    const avgMemory = agents.reduce((sum, agent) => sum + (agent.current_load || 0), 0) / agents.length;
                    document.getElementById('memoryUsage').textContent = Math.round(avgMemory * 100) + '%';
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≥–µ–Ω—Ç–æ–≤
                updateAgents(data.coordination_status?.agent_capabilities || {});
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
                updateCharts(data);
            }
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≥–µ–Ω—Ç–∞—Ö
            function updateAgents(agents) {
                const agentsGrid = document.getElementById('agentsGrid');
                agentsGrid.innerHTML = '';
                
                Object.entries(agents).forEach(([agentId, agent]) => {
                    const agentCard = document.createElement('div');
                    agentCard.className = `agent-card ${agent.is_active ? 'active' : 'inactive'}`;
                    
                    const performancePercent = Math.round((agent.performance_score || 0) * 100);
                    
                    agentCard.innerHTML = `
                        <div class="agent-name">${agentId.replace('_', ' ').toUpperCase()}</div>
                        <div class="agent-status">
                            <span class="status-indicator ${agent.is_active ? 'status-healthy' : 'status-unknown'}"></span>
                            ${agent.is_active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                        </div>
                        <div class="agent-metrics">
                            <div>–ó–∞–¥–∞—á: ${agent.tasks_completed || 0}</div>
                            <div>–û—à–∏–±–æ–∫: ${agent.tasks_failed || 0}</div>
                            <div>–í—Ä–µ–º—è: ${agent.average_response_time ? agent.average_response_time.toFixed(2) + '—Å' : 'N/A'}</div>
                            <div>–ü—Ä–æ–∏–∑–≤.: ${performancePercent}%</div>
                        </div>
                        <div class="performance-bar">
                            <div class="performance-fill" style="width: ${performancePercent}%"></div>
                        </div>
                    `;
                    
                    agentsGrid.appendChild(agentCard);
                });
            }
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
            function updateCharts(data) {
                // –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–æ–≤
                if (data.coordination_status && data.coordination_status.agent_capabilities) {
                    const agents = Object.entries(data.coordination_status.agent_capabilities);
                    const labels = agents.map(([id, _]) => id.replace('_', ' ').toUpperCase());
                    const performanceData = agents.map(([_, agent]) => (agent.performance_score || 0) * 100);
                    
                    if (!performanceChart) {
                        const ctx = document.getElementById('performanceChart').getContext('2d');
                        performanceChart = new Chart(ctx, {
                            type: 'bar',
                            data: {
                                labels: labels,
                                datasets: [{
                                    label: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (%)',
                                    data: performanceData,
                                    backgroundColor: performanceData.map(score => 
                                        score > 80 ? '#27ae60' : score > 60 ? '#f39c12' : '#e74c3c'
                                    ),
                                    borderColor: '#2c3e50',
                                    borderWidth: 1
                                }]
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                scales: {
                                    y: {
                                        beginAtZero: true,
                                        max: 100
                                    }
                                }
                            }
                        });
                    } else {
                        performanceChart.data.labels = labels;
                        performanceChart.data.datasets[0].data = performanceData;
                        performanceChart.data.datasets[0].backgroundColor = performanceData.map(score => 
                            score > 80 ? '#27ae60' : score > 60 ? '#f39c12' : '#e74c3c'
                        );
                        performanceChart.update();
                    }
                }
                
                // –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–∑–∞–≥–ª—É—à–∫–∞)
                if (!activityChart) {
                    const ctx = document.getElementById('activityChart').getContext('2d');
                    activityChart = new Chart(ctx, {
                        type: 'line',
                        data: {
                            labels: ['10–º', '8–º', '6–º', '4–º', '2–º', '–°–µ–π—á–∞—Å'],
                            datasets: [{
                                label: '–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã',
                                data: [2, 3, 4, 3, 5, data.active_agents || 0],
                                borderColor: '#3498db',
                                backgroundColor: 'rgba(52, 152, 219, 0.1)',
                                tension: 0.4
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            scales: {
                                y: {
                                    beginAtZero: true
                                }
                            }
                        }
                    });
                } else {
                    activityChart.data.datasets[0].data.shift();
                    activityChart.data.datasets[0].data.push(data.active_agents || 0);
                    activityChart.update();
                }
            }
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞
            function refreshDashboard() {
                if (ws && ws.readyState === WebSocket.OPEN) {
                    ws.send(JSON.stringify({type: 'refresh'}));
                }
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            document.addEventListener('DOMContentLoaded', function() {
                initWebSocket();
                
                // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                setInterval(refreshDashboard, 30000);
            });
        </script>
    </body>
    </html>
    """
    return HTMLResponse(content=html_content)

@app.websocket("/ws/dashboard")
async def websocket_dashboard(websocket: WebSocket):
    """WebSocket endpoint –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞"""
    await dashboard_manager.connect(websocket)
    
    try:
        while True:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            data = await websocket.receive_text()
            message = json.loads(data)
            
            if message.get("type") == "refresh":
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                await send_dashboard_data(websocket)
                
    except WebSocketDisconnect:
        dashboard_manager.disconnect(websocket)

async def send_dashboard_data(websocket: WebSocket):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        from optimized_autonomous_system import get_optimized_system
        system = get_optimized_system()
        
        if system:
            status = system.get_system_status()
            await websocket.send_text(json.dumps(status, ensure_ascii=False))
        else:
            # Fallback –∫ –æ–±—ã—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
            import requests
            try:
                response = requests.get("http://localhost:8080/api/system/status", timeout=5)
                if response.status_code == 200:
                    await websocket.send_text(response.text)
            except:
                await websocket.send_text(json.dumps({
                    "error": "–°–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                    "system_status": "error"
                }))
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞: {e}")
        await websocket.send_text(json.dumps({
            "error": str(e),
            "system_status": "error"
        }))

@app.get("/api/dashboard/metrics")
async def get_dashboard_metrics():
    """–ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞"""
    try:
        from optimized_autonomous_system import get_optimized_system
        system = get_optimized_system()
        
        if system:
            return JSONResponse(content=system.get_system_status())
        else:
            return JSONResponse(content={"error": "–°–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"})
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/dashboard/health")
async def get_system_health():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    try:
        from optimized_autonomous_system import get_optimized_system
        system = get_optimized_system()
        
        if system:
            health = await system.health_check()
            return JSONResponse(content=health)
        else:
            return JSONResponse(content={"overall_health": "error", "error": "–°–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"})
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/dashboard/performance")
async def get_performance_history():
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    try:
        from optimized_autonomous_system import get_optimized_system
        system = get_optimized_system()
        
        if system:
            return JSONResponse(content={
                "performance_history": system.performance_history,
                "agent_metrics": {agent_id: metrics.to_dict() for agent_id, metrics in system.agent_metrics.items()}
            })
        else:
            return JSONResponse(content={"error": "–°–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"})
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "enhanced_dashboard:app",
        host="0.0.0.0",
        port=8081,
        reload=True,
        log_level="info"
    )