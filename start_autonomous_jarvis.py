#!/usr/bin/env python3
"""
Autonomous JARVIS Startup Script
–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã JARVIS
"""

import os
import sys
import time
import asyncio
import logging
import argparse
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def print_banner():
    """–í—ã–≤–æ–¥ –±–∞–Ω–Ω–µ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã"""
    banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                              ‚ïë
‚ïë        ü§ñ AUTONOMOUS JARVIS SYSTEM v2.0 ü§ñ                  ‚ïë
‚ïë                                                              ‚ïë
‚ïë     –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è AI —Å–∏—Å—Ç–µ–º–∞ —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º          ‚ïë
‚ïë            –∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º                           ‚ïë
‚ïë                                                              ‚ïë
‚ïë  ‚úÖ –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Ä–∞–±–æ—Ç–∞ 24/7                                  ‚ïë
‚ïë  ‚úÖ –í–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç                                     ‚ïë
‚ïë  ‚úÖ –ú–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è                               ‚ïë
‚ïë  ‚úÖ –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ                                     ‚ïë
‚ïë  ‚úÖ –°–∞–º–æ–∏—Å—Ü–µ–ª–µ–Ω–∏–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è                             ‚ïë
‚ïë  ‚úÖ –û–±–ª–∞—á–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ                                  ‚ïë
‚ïë                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"""
    print(banner)

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    required_packages = [
        'fastapi', 'uvicorn', 'psutil', 'pillow', 'websockets'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package)
            logger.info(f"  ‚úÖ {package}")
        except ImportError:
            logger.error(f"  ‚ùå {package}")
            missing_packages.append(package)
    
    if missing_packages:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞–∫–µ—Ç—ã: {missing_packages}")
        logger.info("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π: pip install --break-system-packages " + " ".join(missing_packages))
        return False
    
    logger.info("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True

def check_system_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    logger.info("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    
    required_files = [
        'streamlined_jarvis.py',
        'multi_agent_jarvis.py', 
        'continuous_learning_jarvis.py',
        'unified_autonomous_jarvis.py'
    ]
    
    missing_files = []
    
    for file_name in required_files:
        file_path = Path(file_name)
        if file_path.exists():
            logger.info(f"  ‚úÖ {file_name}")
        else:
            logger.error(f"  ‚ùå {file_name}")
            missing_files.append(file_name)
    
    if missing_files:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã: {missing_files}")
        return False
    
    logger.info("‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
    return True

async def start_streamlined_system():
    """–ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Streamlined JARVIS...")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
        from streamlined_jarvis import StreamlinedJarvis
        
        jarvis = StreamlinedJarvis()
        logger.info("‚úÖ Streamlined JARVIS –∑–∞–ø—É—â–µ–Ω")
        logger.info("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:8080")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        await jarvis.run(host="0.0.0.0", port=8080)
        
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        logger.info("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã —Å–∏—Å—Ç–µ–º—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

async def start_multi_agent_system():
    """–ó–∞–ø—É—Å–∫ –º–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    try:
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Multi-Agent JARVIS...")
        
        from multi_agent_jarvis import MultiAgentJarvis
        
        jarvis = MultiAgentJarvis()
        logger.info("‚úÖ Multi-Agent JARVIS –∑–∞–ø—É—â–µ–Ω")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
        await asyncio.sleep(5)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        await jarvis.submit_task("analyze_interface", {"target": "system"})
        await jarvis.submit_task("optimize_performance", {"level": "medium"})
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        while True:
            await asyncio.sleep(60)
            
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

async def start_learning_system():
    """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è"""
    try:
        logger.info("üß† –ó–∞–ø—É—Å–∫ Continuous Learning JARVIS...")
        
        from continuous_learning_jarvis import ContinuousLearningSystem
        
        learning = ContinuousLearningSystem()
        logger.info("‚úÖ Continuous Learning JARVIS –∑–∞–ø—É—â–µ–Ω")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è
        learning.record_learning_event(
            "system_startup",
            {"component": "learning_system", "mode": "demo"},
            {"status": "successful"},
            True,
            0.05
        )
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        while True:
            await asyncio.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            stats = learning.get_learning_statistics()
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {stats.get('events_24h', 0)} —Å–æ–±—ã—Ç–∏–π, {stats.get('total_patterns', 0)} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
            
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

async def start_unified_system():
    """–ó–∞–ø—É—Å–∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    try:
        logger.info("üéØ –ó–∞–ø—É—Å–∫ Unified Autonomous JARVIS...")
        
        from unified_autonomous_jarvis import UnifiedAutonomousJarvis
        
        jarvis = UnifiedAutonomousJarvis()
        logger.info("‚úÖ Unified Autonomous JARVIS –∑–∞–ø—É—â–µ–Ω")
        logger.info("üéØ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
        await asyncio.sleep(5)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –∑–∞–¥–∞—á–∏
        await jarvis.submit_unified_task("full_system_analysis", {"depth": "comprehensive"})
        await jarvis.submit_unified_task("autonomous_optimization", {"target": "all_components"})
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å—é
        while True:
            status = jarvis.get_unified_status()
            health = status.get('system_health', 'unknown')
            
            if health in ['excellent', 'good']:
                logger.info(f"üíö –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ: {health}")
            elif health == 'fair':
                logger.warning(f"üíõ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ: {health}")
            else:
                logger.error(f"‚ù§Ô∏è –ü—Ä–æ–±–ª–µ–º—ã –≤ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã: {health}")
            
            await asyncio.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

def run_system_tests():
    """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    logger.info("üß™ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
    
    tests_passed = 0
    total_tests = 4
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if check_dependencies():
        tests_passed += 1
        logger.info("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–æ–π–¥–µ–Ω")
    else:
        logger.error("‚ùå –¢–µ—Å—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–æ–≤–∞–ª–µ–Ω")
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
    if check_system_files():
        tests_passed += 1
        logger.info("‚úÖ –¢–µ—Å—Ç —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–π–¥–µ–Ω")
    else:
        logger.error("‚ùå –¢–µ—Å—Ç —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω")
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
    try:
        import streamlined_jarvis
        tests_passed += 1
        logger.info("‚úÖ –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–π–¥–µ–Ω")
    except ImportError:
        logger.error("‚ùå –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≤–∞–ª–µ–Ω")
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
    try:
        import socket
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        result = sock.connect_ex(('localhost', 8080))
        sock.close()
        
        if result != 0:
            tests_passed += 1
            logger.info("‚úÖ –ü–æ—Ä—Ç 8080 —Å–≤–æ–±–æ–¥–µ–Ω")
        else:
            logger.warning("‚ö†Ô∏è –ü–æ—Ä—Ç 8080 –∑–∞–Ω—è—Ç")
    except Exception:
        logger.error("‚ùå –¢–µ—Å—Ç –ø–æ—Ä—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    success_rate = tests_passed / total_tests
    logger.info(f"üìä –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã: {tests_passed}/{total_tests} ({success_rate:.1%})")
    
    if success_rate >= 0.75:
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É")
        return True
    else:
        logger.error("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='Autonomous JARVIS Startup Script')
    parser.add_argument('--mode', choices=['streamlined', 'multi-agent', 'learning', 'unified', 'test'], 
                       default='streamlined', help='–†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã')
    parser.add_argument('--skip-tests', action='store_true', help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–µ—Å—Ç—ã')
    
    args = parser.parse_args()
    
    print_banner()
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–µ—Å—Ç—ã
    if not args.skip_tests:
        if not run_system_tests():
            logger.error("‚ùå –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --skip-tests –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞")
            return
    
    logger.info(f"üéØ –†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞: {args.mode}")
    
    try:
        if args.mode == 'streamlined':
            await start_streamlined_system()
        elif args.mode == 'multi-agent':
            await start_multi_agent_system()
        elif args.mode == 'learning':
            await start_learning_system()
        elif args.mode == 'unified':
            await start_unified_system()
        elif args.mode == 'test':
            logger.info("‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
            return
            
    except KeyboardInterrupt:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())