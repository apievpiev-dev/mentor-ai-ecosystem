#!/usr/bin/env python3
"""
–°–µ—Ä–≤–µ—Ä —á–∞—Ç–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö AI-–∞–≥–µ–Ω—Ç–æ–≤
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ API –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∞–≥–µ–Ω—Ç–∞–º–∏
"""

import asyncio
import json
import logging
import time
from datetime import datetime
from typing import Dict, List, Any, Optional
from fastapi import FastAPI, WebSocket, WebSocketDisconnect, HTTPException, Request
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import uvicorn
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É –∞–≥–µ–Ω—Ç–æ–≤
from multi_agent_system import MultiAgentSystem, AgentType
from vision_agent import vision_agent

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã
multi_agent_system = MultiAgentSystem()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)
async def process_user_message(message: str, user_id: str = "user") -> Dict[str, Any]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)"""
    return await multi_agent_system.process_user_message(message, user_id)

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class ChatMessage(BaseModel):
    message: str
    user_id: str = "anonymous"
    agent_type: Optional[str] = None

class AgentRequest(BaseModel):
    agent_id: str
    message: str
    user_id: str = "anonymous"

class SystemStatus(BaseModel):
    total_agents: int
    active_agents: int
    total_messages: int
    system_uptime: str

# –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏
class ConnectionManager:
    def __init__(self):
        self.active_connections: List[WebSocket] = []
        self.user_connections: Dict[str, WebSocket] = {}
    
    async def connect(self, websocket: WebSocket, user_id: str = "anonymous"):
        await websocket.accept()
        self.active_connections.append(websocket)
        self.user_connections[user_id] = websocket
        logger.info(f"üîå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —á–∞—Ç—É")
    
    def disconnect(self, websocket: WebSocket, user_id: str = "anonymous"):
        if websocket in self.active_connections:
            self.active_connections.remove(websocket)
        if user_id in self.user_connections:
            del self.user_connections[user_id]
        logger.info(f"üîå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç —á–∞—Ç–∞")
    
    async def send_personal_message(self, message: str, websocket: WebSocket):
        await websocket.send_text(message)
    
    async def broadcast(self, message: str):
        for connection in self.active_connections:
            try:
                await connection.send_text(message)
            except:
                # –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                self.active_connections.remove(connection)

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="Multi-Agent Chat System",
    description="–°–∏—Å—Ç–µ–º–∞ —á–∞—Ç–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ AI-–∞–≥–µ–Ω—Ç–∞–º–∏",
    version="1.0.0"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
manager = ConnectionManager()

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
system_stats = {
    "start_time": datetime.now(),
    "total_messages": 0,
    "active_users": 0
}

@app.get("/status", response_class=HTMLResponse)
async def get_status_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
    html_content = """
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Multi-AI System Status</title>
        <style>
            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }
            
            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
                padding: 20px;
            }
            
            .container {
                max-width: 1200px;
                margin: 0 auto;
                background: white;
                border-radius: 20px;
                box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                overflow: hidden;
            }
            
            .header {
                background: #2c3e50;
                color: white;
                padding: 30px;
                text-align: center;
            }
            
            .header h1 {
                font-size: 2.5em;
                margin-bottom: 10px;
            }
            
            .header p {
                font-size: 1.2em;
                opacity: 0.8;
            }
            
            .status-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                gap: 20px;
                padding: 30px;
            }
            
            .status-card {
                background: #f8f9fa;
                border-radius: 15px;
                padding: 25px;
                border-left: 5px solid #3498db;
                box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            }
            
            .status-card h3 {
                color: #2c3e50;
                margin-bottom: 15px;
                font-size: 1.3em;
            }
            
            .status-item {
                display: flex;
                justify-content: space-between;
                margin: 10px 0;
                padding: 8px 0;
                border-bottom: 1px solid #ecf0f1;
            }
            
            .status-item:last-child {
                border-bottom: none;
            }
            
            .status-label {
                font-weight: 600;
                color: #34495e;
            }
            
            .status-value {
                color: #27ae60;
                font-weight: bold;
            }
            
            .status-value.error {
                color: #e74c3c;
            }
            
            .status-value.warning {
                color: #f39c12;
            }
            
            .agent-list {
                margin-top: 15px;
            }
            
            .agent-item {
                background: white;
                margin: 8px 0;
                padding: 12px;
                border-radius: 8px;
                border-left: 3px solid #3498db;
                display: flex;
                justify-content: space-between;
                align-items: center;
            }
            
            .agent-item.active {
                border-left-color: #27ae60;
                background: #d5f4e6;
            }
            
            .agent-item.inactive {
                border-left-color: #e74c3c;
                background: #fadbd8;
            }
            
            .agent-name {
                font-weight: 600;
                color: #2c3e50;
            }
            
            .agent-status {
                font-size: 0.9em;
                padding: 4px 8px;
                border-radius: 12px;
                font-weight: bold;
            }
            
            .agent-status.active {
                background: #27ae60;
                color: white;
            }
            
            .agent-status.inactive {
                background: #e74c3c;
                color: white;
            }
            
            .refresh-btn {
                position: fixed;
                bottom: 30px;
                right: 30px;
                background: #3498db;
                color: white;
                border: none;
                border-radius: 50px;
                padding: 15px 25px;
                font-size: 1.1em;
                cursor: pointer;
                box-shadow: 0 5px 15px rgba(52, 152, 219, 0.3);
                transition: all 0.3s ease;
            }
            
            .refresh-btn:hover {
                background: #2980b9;
                transform: translateY(-2px);
                box-shadow: 0 8px 20px rgba(52, 152, 219, 0.4);
            }
            
            .back-btn {
                position: fixed;
                bottom: 30px;
                left: 30px;
                background: #27ae60;
                color: white;
                border: none;
                border-radius: 50px;
                padding: 15px 25px;
                font-size: 1.1em;
                cursor: pointer;
                box-shadow: 0 5px 15px rgba(39, 174, 96, 0.3);
                transition: all 0.3s ease;
                text-decoration: none;
                display: inline-block;
            }
            
            .back-btn:hover {
                background: #229954;
                transform: translateY(-2px);
                box-shadow: 0 8px 20px rgba(39, 174, 96, 0.4);
            }
            
            .loading {
                text-align: center;
                padding: 20px;
                color: #7f8c8d;
            }
            
            .error {
                text-align: center;
                padding: 20px;
                color: #e74c3c;
                background: #fadbd8;
                border-radius: 10px;
                margin: 20px;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>ü§ñ Multi-AI System Status</h1>
                <p>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–≥–µ–Ω—Ç–æ–≤</p>
            </div>
            
            <div class="status-grid">
                <div class="status-card">
                    <h3>üìä –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å</h3>
                    <div class="status-item">
                        <span class="status-label">–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:</span>
                        <span class="status-value" id="systemStatus">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                    </div>
                    <div class="status-item">
                        <span class="status-label">–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</span>
                        <span class="status-value" id="uptime">0–º</span>
                    </div>
                    <div class="status-item">
                        <span class="status-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</span>
                        <span class="status-value" id="activeUsers">0</span>
                    </div>
                    <div class="status-item">
                        <span class="status-label">–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π:</span>
                        <span class="status-value" id="totalMessages">0</span>
                    </div>
                </div>
                
                <div class="status-card">
                    <h3>ü§ñ –ê–≥–µ–Ω—Ç—ã</h3>
                    <div class="status-item">
                        <span class="status-label">–í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤:</span>
                        <span class="status-value" id="totalAgents">0</span>
                    </div>
                    <div class="status-item">
                        <span class="status-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤:</span>
                        <span class="status-value" id="activeAgents">0</span>
                    </div>
                    <div class="agent-list" id="agentList">
                        <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤...</div>
                    </div>
                </div>
                
                <div class="status-card">
                    <h3>üîß –°–∏—Å—Ç–µ–º–∞</h3>
                    <div class="status-item">
                        <span class="status-label">–í–µ—Ä—Å–∏—è API:</span>
                        <span class="status-value">v1.0</span>
                    </div>
                    <div class="status-item">
                        <span class="status-label">–ü–æ—Ä—Ç:</span>
                        <span class="status-value">8080</span>
                    </div>
                    <div class="status-item">
                        <span class="status-label">–ü—Ä–æ—Ç–æ–∫–æ–ª:</span>
                        <span class="status-value">HTTP/WebSocket</span>
                    </div>
                    <div class="status-item">
                        <span class="status-label">–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</span>
                        <span class="status-value" id="lastUpdate">-</span>
                    </div>
                </div>
            </div>
        </div>
        
        <button class="refresh-btn" onclick="refreshStatus()">üîÑ –û–±–Ω–æ–≤–∏—Ç—å</button>
        <a href="/" class="back-btn">‚Üê –ö —á–∞—Ç—É</a>
        
        <script>
            let statusInterval;
            
            async function fetchStatus() {
                try {
                    const response = await fetch('/api/system/status');
                    const data = await response.json();
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
                    document.getElementById('systemStatus').textContent = data.system_status || 'unknown';
                    document.getElementById('systemStatus').className = 'status-value ' + (data.system_status === 'running' ? '' : 'error');
                    
                    document.getElementById('uptime').textContent = data.uptime || '0–º';
                    document.getElementById('activeUsers').textContent = data.active_users || '0';
                    document.getElementById('totalMessages').textContent = data.total_messages || '0';
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≥–µ–Ω—Ç–æ–≤
                    document.getElementById('totalAgents').textContent = data.total_agents || '0';
                    document.getElementById('activeAgents').textContent = data.active_agents || '0';
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤
                    const agentList = document.getElementById('agentList');
                    if (data.agents && data.agents.length > 0) {
                        agentList.innerHTML = data.agents.map(agent => `
                            <div class="agent-item ${agent.status === 'active' ? 'active' : 'inactive'}">
                                <span class="agent-name">${agent.name}</span>
                                <span class="agent-status ${agent.status === 'active' ? 'active' : 'inactive'}">
                                    ${agent.status === 'active' ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                                </span>
                            </div>
                        `).join('');
                    } else {
                        agentList.innerHTML = '<div class="loading">–ê–≥–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    document.getElementById('lastUpdate').textContent = new Date().toLocaleTimeString();
                    
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
                    document.getElementById('systemStatus').textContent = '–û—à–∏–±–∫–∞';
                    document.getElementById('systemStatus').className = 'status-value error';
                }
            }
            
            function refreshStatus() {
                fetchStatus();
            }
            
            // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            function startAutoRefresh() {
                statusInterval = setInterval(fetchStatus, 5000);
            }
            
            function stopAutoRefresh() {
                if (statusInterval) {
                    clearInterval(statusInterval);
                }
            }
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            document.addEventListener('DOMContentLoaded', function() {
                fetchStatus();
                startAutoRefresh();
            });
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏ —É—Ö–æ–¥–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            window.addEventListener('beforeunload', stopAutoRefresh);
        </script>
    </body>
    </html>
    """
    return HTMLResponse(content=html_content)

@app.get("/", response_class=HTMLResponse)
async def get_chat_interface():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —á–∞—Ç–∞"""
    html_content = """
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Multi-Agent Chat System</title>
        <style>
            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }
            
            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                height: 100vh;
                display: flex;
                justify-content: center;
                align-items: center;
            }
            
            .chat-container {
                width: 90%;
                max-width: 1200px;
                height: 90vh;
                background: white;
                border-radius: 20px;
                box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                display: flex;
                overflow: hidden;
            }
            
            .sidebar {
                width: 300px;
                background: #2c3e50;
                color: white;
                padding: 20px;
                overflow-y: auto;
            }
            
            .sidebar h2 {
                margin-bottom: 20px;
                color: #ecf0f1;
                border-bottom: 2px solid #3498db;
                padding-bottom: 10px;
            }
            
            .agent-list {
                margin-bottom: 30px;
            }
            
            .agent-item {
                background: #34495e;
                margin: 10px 0;
                padding: 15px;
                border-radius: 10px;
                cursor: pointer;
                transition: all 0.3s ease;
                border-left: 4px solid #3498db;
            }
            
            .agent-item:hover {
                background: #3498db;
                transform: translateX(5px);
            }
            
            .agent-item.active {
                background: #e74c3c;
                border-left-color: #c0392b;
            }
            
            .agent-name {
                font-weight: bold;
                margin-bottom: 5px;
            }
            
            .agent-type {
                font-size: 0.9em;
                opacity: 0.8;
            }
            
            .agent-skills {
                font-size: 0.8em;
                margin-top: 5px;
                opacity: 0.7;
            }
            
            .system-status {
                background: #27ae60;
                padding: 15px;
                border-radius: 10px;
                margin-top: 20px;
            }
            
            .status-item {
                display: flex;
                justify-content: space-between;
                margin: 5px 0;
            }
            
            .status-link {
                color: #3498db;
                text-decoration: none;
                font-weight: 600;
                padding: 8px 12px;
                border-radius: 6px;
                background: rgba(52, 152, 219, 0.1);
                transition: all 0.3s ease;
                display: inline-block;
                width: 100%;
                text-align: center;
            }
            
            .status-link:hover {
                background: #3498db;
                color: white;
                transform: translateY(-1px);
            }
            
            .chat-area {
                flex: 1;
                display: flex;
                flex-direction: column;
            }
            
            .chat-header {
                background: #34495e;
                color: white;
                padding: 20px;
                text-align: center;
            }
            
            .chat-header h1 {
                margin: 0;
                font-size: 1.5em;
            }
            
            .messages-container {
                flex: 1;
                padding: 20px;
                overflow-y: auto;
                background: #f8f9fa;
            }
            
            .message {
                margin: 15px 0;
                display: flex;
                align-items: flex-start;
            }
            
            .message.user {
                justify-content: flex-end;
            }
            
            .message.agent {
                justify-content: flex-start;
            }
            
            .message-content {
                max-width: 70%;
                padding: 15px 20px;
                border-radius: 20px;
                position: relative;
            }
            
            .message.user .message-content {
                background: #3498db;
                color: white;
                border-bottom-right-radius: 5px;
            }
            
            .message.agent .message-content {
                background: white;
                color: #2c3e50;
                border: 1px solid #e0e0e0;
                border-bottom-left-radius: 5px;
            }
            
            .message-meta {
                font-size: 0.8em;
                opacity: 0.7;
                margin-top: 5px;
            }
            
            .agent-avatar {
                width: 40px;
                height: 40px;
                border-radius: 50%;
                background: #3498db;
                display: flex;
                align-items: center;
                justify-content: center;
                margin: 0 10px;
                font-weight: bold;
                color: white;
            }
            
            .input-area {
                padding: 20px;
                background: white;
                border-top: 1px solid #e0e0e0;
            }
            
            .input-container {
                display: flex;
                gap: 10px;
            }
            
            .message-input {
                flex: 1;
                padding: 15px;
                border: 2px solid #e0e0e0;
                border-radius: 25px;
                font-size: 16px;
                outline: none;
                transition: border-color 0.3s ease;
            }
            
            .message-input:focus {
                border-color: #3498db;
            }
            
            .send-button {
                padding: 15px 25px;
                background: #3498db;
                color: white;
                border: none;
                border-radius: 25px;
                cursor: pointer;
                font-size: 16px;
                transition: background 0.3s ease;
            }
            
            .send-button:hover {
                background: #2980b9;
            }
            
            .send-button:disabled {
                background: #bdc3c7;
                cursor: not-allowed;
            }
            
            .typing-indicator {
                display: none;
                padding: 10px 20px;
                color: #7f8c8d;
                font-style: italic;
            }
            
            .typing-indicator.show {
                display: block;
            }
            
            .welcome-message {
                text-align: center;
                color: #7f8c8d;
                margin: 50px 0;
                font-size: 1.2em;
            }
            
            .welcome-message h3 {
                margin-bottom: 10px;
                color: #2c3e50;
            }
            
            @media (max-width: 768px) {
                .chat-container {
                    width: 100%;
                    height: 100vh;
                    border-radius: 0;
                }
                
                .sidebar {
                    width: 250px;
                }
                
                .message-content {
                    max-width: 85%;
                }
            }
        </style>
    </head>
    <body>
        <div class="chat-container">
            <div class="sidebar">
                <h2>ü§ñ AI –ê–≥–µ–Ω—Ç—ã</h2>
                <div class="agent-list" id="agentList">
                    <!-- –ê–≥–µ–Ω—Ç—ã –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                </div>
                
                <div class="system-status">
                    <h3>üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</h3>
                    <div class="status-item">
                        <span>–ê–≥–µ–Ω—Ç–æ–≤:</span>
                        <span id="totalAgents">0</span>
                    </div>
                    <div class="status-item">
                        <span>–ê–∫—Ç–∏–≤–Ω—ã—Ö:</span>
                        <span id="activeAgents">0</span>
                    </div>
                    <div class="status-item">
                        <span>–°–æ–æ–±—â–µ–Ω–∏–π:</span>
                        <span id="totalMessages">0</span>
                    </div>
                    <div class="status-item">
                        <span>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</span>
                        <span id="uptime">0–º</span>
                    </div>
                    <div class="status-item">
                        <a href="/status" class="status-link" target="_blank">
                            üìà –ü–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                        </a>
                    </div>
                </div>
            </div>
            
            <div class="chat-area">
                <div class="chat-header">
                    <h1>üí¨ Multi-Agent Chat System</h1>
                </div>
                
                <div class="messages-container" id="messagesContainer">
                    <div class="welcome-message">
                        <h3>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h3>
                        <p>–í—ã–±–µ—Ä–∏—Ç–µ –∞–≥–µ–Ω—Ç–∞ –∏ –Ω–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ</p>
                        <p>–ö–∞–∂–¥—ã–π –∞–≥–µ–Ω—Ç –∏–º–µ–µ—Ç —Å–≤–æ—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –≤ —Ä–∞–∑–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö</p>
                    </div>
                </div>
                
                <div class="typing-indicator" id="typingIndicator">
                    –ê–≥–µ–Ω—Ç –ø–µ—á–∞—Ç–∞–µ—Ç...
                </div>
                
                <div class="input-area">
                    <div class="input-container">
                        <input type="text" class="message-input" id="messageInput" 
                               placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." maxlength="1000">
                        <button class="send-button" id="sendButton" onclick="sendMessage()">
                            –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <script>
            let ws = null;
            let currentAgent = null;
            let userId = 'user_' + Math.random().toString(36).substr(2, 9);
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            function initWebSocket() {
                const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
                const wsUrl = `${protocol}//${window.location.host}/ws/${userId}`;
                
                ws = new WebSocket(wsUrl);
                
                ws.onopen = function(event) {
                    console.log('WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
                    loadAgents();
                    updateSystemStatus();
                };
                
                ws.onmessage = function(event) {
                    const data = JSON.parse(event.data);
                    handleMessage(data);
                };
                
                ws.onclose = function(event) {
                    console.log('WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
                    setTimeout(initWebSocket, 3000); // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                };
                
                ws.onerror = function(error) {
                    console.error('WebSocket –æ—à–∏–±–∫–∞:', error);
                };
            }
            
            // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤
            async function loadAgents() {
                try {
                    const response = await fetch('/api/agents');
                    const agents = await response.json();
                    
                    const agentList = document.getElementById('agentList');
                    agentList.innerHTML = '';
                    
                    agents.forEach(agent => {
                        const agentItem = document.createElement('div');
                        agentItem.className = 'agent-item';
                        agentItem.onclick = () => selectAgent(agent.id);
                        
                        agentItem.innerHTML = `
                            <div class="agent-name">${agent.name}</div>
                            <div class="agent-type">${agent.type}</div>
                            <div class="agent-skills">${agent.skills.join(', ')}</div>
                        `;
                        
                        agentList.appendChild(agentItem);
                    });
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤:', error);
                }
            }
            
            // –í—ã–±–æ—Ä –∞–≥–µ–Ω—Ç–∞
            function selectAgent(agentId) {
                // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
                document.querySelectorAll('.agent-item').forEach(item => {
                    item.classList.remove('active');
                });
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∞–≥–µ–Ω—Ç—É
                event.target.closest('.agent-item').classList.add('active');
                
                currentAgent = agentId;
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ –∞–≥–µ–Ω—Ç–∞
                addMessage('system', `–í—ã–±—Ä–∞–Ω –∞–≥–µ–Ω—Ç: ${event.target.closest('.agent-item').querySelector('.agent-name').textContent}`);
            }
            
            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            function sendMessage() {
                const messageInput = document.getElementById('messageInput');
                const message = messageInput.value.trim();
                
                if (!message) return;
                
                if (!currentAgent) {
                    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è');
                    return;
                }
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
                if (ws && ws.readyState === WebSocket.OPEN) {
                    ws.send(JSON.stringify({
                        type: 'user_message',
                        message: message,
                        agent_id: currentAgent,
                        user_id: userId
                    }));
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
                    addMessage('user', message);
                    
                    // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
                    messageInput.value = '';
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
                    showTypingIndicator();
                }
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            function handleMessage(data) {
                hideTypingIndicator();
                
                switch (data.type) {
                    case 'agent_response':
                        addMessage('agent', data.response, data.agent_name);
                        break;
                    case 'system_status':
                        updateSystemStatus(data);
                        break;
                    case 'error':
                        addMessage('system', `–û—à–∏–±–∫–∞: ${data.message}`);
                        break;
                }
            }
            
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
            function addMessage(sender, content, agentName = null) {
                const messagesContainer = document.getElementById('messagesContainer');
                
                // –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                const welcomeMessage = messagesContainer.querySelector('.welcome-message');
                if (welcomeMessage) {
                    welcomeMessage.remove();
                }
                
                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${sender}`;
                
                const timestamp = new Date().toLocaleTimeString();
                
                if (sender === 'user') {
                    messageDiv.innerHTML = `
                        <div class="message-content">
                            ${content}
                            <div class="message-meta">${timestamp}</div>
                        </div>
                    `;
                } else if (sender === 'agent') {
                    const avatar = agentName ? agentName.charAt(0).toUpperCase() : 'ü§ñ';
                    messageDiv.innerHTML = `
                        <div class="agent-avatar">${avatar}</div>
                        <div class="message-content">
                            ${content}
                            <div class="message-meta">${agentName || '–ê–≥–µ–Ω—Ç'} ‚Ä¢ ${timestamp}</div>
                        </div>
                    `;
                } else if (sender === 'system') {
                    messageDiv.innerHTML = `
                        <div class="message-content" style="background: #f39c12; color: white; text-align: center; margin: 0 auto;">
                            ${content}
                        </div>
                    `;
                }
                
                messagesContainer.appendChild(messageDiv);
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }
            
            // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
            function showTypingIndicator() {
                document.getElementById('typingIndicator').classList.add('show');
            }
            
            // –°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
            function hideTypingIndicator() {
                document.getElementById('typingIndicator').classList.remove('show');
            }
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
            function updateSystemStatus(data = null) {
                if (data) {
                    document.getElementById('totalAgents').textContent = data.total_agents || 0;
                    document.getElementById('activeAgents').textContent = data.active_agents || 0;
                    document.getElementById('totalMessages').textContent = data.total_messages || 0;
                    document.getElementById('uptime').textContent = data.uptime || '0–º';
                }
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Enter
            document.getElementById('messageInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    sendMessage();
                }
            });
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            document.addEventListener('DOMContentLoaded', function() {
                initWebSocket();
                
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                setInterval(updateSystemStatus, 30000);
            });
        </script>
    </body>
    </html>
    """
    return HTMLResponse(content=html_content)

@app.websocket("/ws")
async def websocket_endpoint_general(websocket: WebSocket):
    """WebSocket endpoint –¥–ª—è —á–∞—Ç–∞ (–æ–±—â–∏–π)"""
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π user_id
    import uuid
    user_id = f"user_{uuid.uuid4().hex[:10]}"
    await websocket_endpoint(websocket, user_id)

@app.websocket("/ws/{user_id}")
async def websocket_endpoint(websocket: WebSocket, user_id: str):
    """WebSocket endpoint –¥–ª—è —á–∞—Ç–∞"""
    await manager.connect(websocket, user_id)
    system_stats["active_users"] = len(manager.active_connections)
    
    try:
        while True:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            data = await websocket.receive_text()
            message_data = json.loads(data)
            
            if message_data["type"] == "user_message":
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                result = await process_user_message(
                    message_data["message"], 
                    user_id
                )
                
                system_stats["total_messages"] += 1
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç—É
                response_text = ""
                if isinstance(result["response"], dict):
                    response_text = result["response"].get("response", str(result["response"]))
                else:
                    response_text = str(result["response"])
                
                response = {
                    "type": "agent_response",
                    "response": response_text,
                    "agent_name": result.get("agent", "Unknown"),
                    "agent_type": result.get("agent_type", "Unknown"),
                    "timestamp": result.get("timestamp", datetime.now().isoformat())
                }
                
                await manager.send_personal_message(json.dumps(response), websocket)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
                status_update = {
                    "type": "system_status",
                    "total_agents": len(multi_agent_system.agents),
                    "active_agents": len([a for a in multi_agent_system.agents.values() if a.status != "idle"]),
                    "total_messages": system_stats["total_messages"],
                    "uptime": get_uptime()
                }
                
                await manager.send_personal_message(json.dumps(status_update), websocket)
                
    except WebSocketDisconnect:
        manager.disconnect(websocket, user_id)
        system_stats["active_users"] = len(manager.active_connections)

@app.get("/api/agents")
async def get_agents():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
    try:
        agents = multi_agent_system.get_available_agents()
        return JSONResponse(content=agents)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/chat/send")
async def send_message(message: ChatMessage):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É —á–µ—Ä–µ–∑ REST API"""
    try:
        result = await process_user_message(
            message.message, 
            message.user_id
        )
        
        system_stats["total_messages"] += 1
        
        return JSONResponse(content={
            "success": True,
            "response": result,
            "timestamp": datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/system/status")
async def get_system_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä–æ–π
        from integrated_agent_system import get_integrated_system
        integrated_system = get_integrated_system()
        status = integrated_system.get_system_status()
        status.update({
            "active_users": system_stats["active_users"],
            "total_messages": system_stats["total_messages"],
            "uptime": get_uptime()
        })
        
        return JSONResponse(content=status)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/chat/history")
async def get_chat_history(limit: int = 50):
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"""
    try:
        history = multi_agent_system.shared_memory.get_recent_context(limit)
        return JSONResponse(content={"history": history})
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# Vision Agent API endpoints
@app.get("/api/vision/suggestions")
async def get_vision_suggestions():
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –æ—Ç Vision Agent"""
    try:
        suggestions = await vision_agent.suggest_improvements()
        return {"success": True, "suggestions": suggestions}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/vision/issues")
async def get_vision_issues():
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –æ—Ç Vision Agent"""
    try:
        screenshot = await vision_agent.take_screenshot()
        if screenshot:
            analysis = await vision_agent.analyze_ui(screenshot)
            return {"success": True, "issues": analysis.get("issues", [])}
        else:
            return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç"}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/vision/analyze")
async def analyze_ui():
    """–ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    try:
        screenshot = await vision_agent.take_screenshot()
        if screenshot:
            analysis = await vision_agent.analyze_ui(screenshot)
            return {"success": True, "analysis": analysis}
        else:
            return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç"}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ UI: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/vision/health")
async def get_vision_health():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ Vision Agent"""
    try:
        health = await vision_agent.monitor_system_health()
        return {"success": True, "health": health}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        raise HTTPException(status_code=500, detail=str(e))

def get_uptime() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
    uptime = datetime.now() - system_stats["start_time"]
    minutes = int(uptime.total_seconds() / 60)
    hours = minutes // 60
    minutes = minutes % 60
    
    if hours > 0:
        return f"{hours}—á {minutes}–º"
    else:
        return f"{minutes}–º"

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    logger.info("üöÄ Multi-Agent Chat Server –∑–∞–ø—É—â–µ–Ω")
    logger.info(f"üìä –°–æ–∑–¥–∞–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: {len(multi_agent_system.agents)}")
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–∞—Ö
    for agent in multi_agent_system.agents.values():
        logger.info(f"  ü§ñ {agent.name} ({agent.agent_type.value})")

@app.on_event("shutdown")
async def shutdown_event():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
    logger.info("üõë Multi-Agent Chat Server –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    uvicorn.run(
        "chat_server:app",
        host="0.0.0.0",
        port=8080,
        reload=True,
        log_level="info"
    )
