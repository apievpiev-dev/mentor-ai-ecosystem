#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è —Ä–∞–±–æ—á–∞—è –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
"""

import asyncio
import logging
import time
import requests
import json
from datetime import datetime
from typing import Dict, Any, List, Optional
import threading
import random
import uvicorn
from fastapi import FastAPI, HTTPException
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/home/mentor/simple_working_system.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(title="Simple Working Autonomous System", version="1.0.0")
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class ChatMessage(BaseModel):
    message: str
    user_id: str = "user"
    agent_type: Optional[str] = None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
system_running = False
agents = {}
active_agents = set()
task_counter = 0
startup_time = datetime.now()
lock = threading.Lock()

# –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤
autonomous_tasks = {
    "general_assistant": [
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ —Å–æ–∑–¥–∞–π –æ—Ç—á–µ—Ç",
        "–ü—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã",
        "–°–æ–∑–¥–∞–π –ø–ª–∞–Ω –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
    ],
    "code_developer": [
        "–°–æ–∑–¥–∞–π —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API",
        "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –∫–æ–¥ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
        "–î–æ–±–∞–≤—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"
    ],
    "data_analyst": [
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã",
        "–°–æ–∑–¥–∞–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–æ–≤",
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API"
    ],
    "project_manager": [
        "–°–æ–∑–¥–∞–π –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è —Å–∏—Å—Ç–µ–º—ã –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é",
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞–¥–∞—á",
        "–°–æ–∑–¥–∞–π roadmap –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"
    ],
    "designer": [
        "–£–ª—É—á—à–∏ –¥–∏–∑–∞–π–Ω –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
        "–°–æ–∑–¥–∞–π –∏–∫–æ–Ω–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π",
        "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π UX –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"
    ],
    "qa_tester": [
        "–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π –≤—Å–µ API endpoints",
        "–ü—Ä–æ–≤–µ—Ä—å —Å–∏—Å—Ç–µ–º—É –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏",
        "–°–æ–∑–¥–∞–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã"
    ]
}

def initialize_agents():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤"""
    global agents
    agent_types = [
        "general_assistant",
        "code_developer", 
        "data_analyst",
        "project_manager",
        "designer",
        "qa_tester"
    ]
    
    for agent_type in agent_types:
        agents[agent_type] = {
            "id": f"{agent_type}_agent",
            "name": f"–ê–≥–µ–Ω—Ç {agent_type.replace('_', ' ').title()}",
            "type": agent_type,
            "is_active": False,
            "last_activity": None,
            "task_count": 0,
            "status": "idle"
        }
        logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç {agent_type} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

async def get_system_status() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
    global system_running, agents, active_agents, task_counter, startup_time
    
    with lock:
        uptime_delta = datetime.now() - startup_time
        uptime = f"{int(uptime_delta.total_seconds() / 60)}–º"
        
        return {
            "system_status": "running" if system_running else "stopped",
            "uptime": uptime,
            "total_agents": len(agents),
            "active_agents": len(active_agents),
            "coordination_status": {
                "total_agents": len(agents),
                "active_tasks": len(active_agents),
                "message_queue_size": 0,
                "agent_capabilities": {
                    agent_id: {
                        "skills": ["autonomous_work", "task_processing"],
                        "performance_score": 1.0,
                        "availability": True,
                        "current_load": 0.0,
                        "is_active": agent["is_active"],
                        "last_activity": agent["last_activity"].isoformat() if agent["last_activity"] else None
                    }
                    for agent_id, agent in agents.items()
                },
                "active_tasks_info": []
            },
            "shared_memory": {
                "knowledge_items": task_counter,
                "conversation_history": task_counter,
                "agent_capabilities": len(agents)
            },
            "startup_time": startup_time.isoformat()
        }

def send_message_to_agent(message: str, agent_type: str = None, user_id: str = "user") -> Dict[str, Any]:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≥–µ–Ω—Ç—É"""
    global agents, active_agents
    
    try:
        with lock:
            if agent_type and agent_type in agents:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∞–≥–µ–Ω—Ç—É
                agent = agents[agent_type]
                agent["is_active"] = True
                agent["last_activity"] = datetime.now()
                agent["task_count"] += 1
                active_agents.add(agent_type)
                
                logger.info(f"üöÄ –ê–≥–µ–Ω—Ç {agent_type} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {message[:50]}...")
                
                return {
                    "success": True,
                    "response": {
                        "response": f"–ê–≥–µ–Ω—Ç {agent['name']} –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}",
                        "status": "processed"
                    },
                    "agent": agent["name"],
                    "agent_type": agent_type,
                    "timestamp": datetime.now().isoformat()
                }
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–º—É –¥–æ—Å—Ç—É–ø–Ω–æ–º—É –∞–≥–µ–Ω—Ç—É
                if agents:
                    first_agent_type = list(agents.keys())[0]
                    agent = agents[first_agent_type]
                    agent["is_active"] = True
                    agent["last_activity"] = datetime.now()
                    agent["task_count"] += 1
                    active_agents.add(first_agent_type)
                    
                    logger.info(f"üöÄ –ê–≥–µ–Ω—Ç {first_agent_type} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {message[:50]}...")
                    
                    return {
                        "success": True,
                        "response": {
                            "response": f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≥–µ–Ω—Ç—É {agent['name']}",
                            "status": "processed"
                        },
                        "agent": agent["name"],
                        "agent_type": first_agent_type,
                        "timestamp": datetime.now().isoformat()
                    }
                else:
                    return {"error": "No agents available"}
                    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≥–µ–Ω—Ç—É: {e}")
        return {"error": str(e)}

async def autonomous_task_generator():
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∑–∞–¥–∞—á"""
    global system_running, agents, active_agents, task_counter
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∑–∞–¥–∞—á...")
    
    while system_running:
        try:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
            if agents:
                agent_type = random.choice(list(agents.keys()))
                agent = agents[agent_type]
                
                if agent_type in autonomous_tasks:
                    tasks = autonomous_tasks[agent_type]
                    task = random.choice(tasks)
                    
                    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞
                    with lock:
                        agent["is_active"] = True
                        agent["last_activity"] = datetime.now()
                        agent["task_count"] += 1
                        agent["status"] = "working"
                        active_agents.add(agent_type)
                        task_counter += 1
                    
                    logger.info(f"üìã –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –∑–∞–¥–∞—á–∞ #{task_counter} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–≥–µ–Ω—Ç—É {agent_type}: {task[:50]}...")
                    
                    # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –∞–≥–µ–Ω—Ç–∞
                    await asyncio.sleep(random.uniform(5, 15))
                    
                    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞
                    with lock:
                        agent["is_active"] = False
                        agent["status"] = "idle"
                        if agent_type in active_agents:
                            active_agents.remove(agent_type)
                    
                    logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç {agent_type} –∑–∞–≤–µ—Ä—à–∏–ª –∑–∞–¥–∞—á—É")
            
            # –ñ–¥–µ–º 30-60 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ–π
            await asyncio.sleep(random.uniform(30, 60))
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∑–∞–¥–∞—á: {e}")
            await asyncio.sleep(10)

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    global system_running
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–π —Ä–∞–±–æ—á–µ–π —Å–∏—Å—Ç–µ–º—ã...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–æ–≤
        initialize_agents()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
        system_running = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∑–∞–¥–∞—á
        asyncio.create_task(autonomous_task_generator())
        
        logger.info("‚úÖ –ü—Ä–æ—Å—Ç–∞—è —Ä–∞–±–æ—á–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

@app.on_event("shutdown")
async def shutdown_event():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    global system_running
    try:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–π —Ä–∞–±–æ—á–µ–π —Å–∏—Å—Ç–µ–º—ã...")
        system_running = False
        logger.info("‚úÖ –ü—Ä–æ—Å—Ç–∞—è —Ä–∞–±–æ—á–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —á–∞—Ç–æ–º"""
    return HTMLResponse(content="""
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Multi-AI Chat System</title>
        <style>
            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                margin: 0;
                padding: 20px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
            }
            .container {
                max-width: 1200px;
                margin: 0 auto;
                background: white;
                border-radius: 15px;
                box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                overflow: hidden;
            }
            .header {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                padding: 30px;
                text-align: center;
            }
            .header h1 {
                margin: 0;
                font-size: 2.5em;
                font-weight: 300;
            }
            .header p {
                margin: 10px 0 0 0;
                opacity: 0.9;
                font-size: 1.1em;
            }
            .chat-container {
                display: flex;
                height: 600px;
            }
            .chat-messages {
                flex: 1;
                padding: 20px;
                overflow-y: auto;
                border-right: 1px solid #eee;
                background: #fafafa;
            }
            .chat-sidebar {
                width: 300px;
                padding: 20px;
                background: #f8f9fa;
            }
            .message {
                margin: 15px 0;
                padding: 15px;
                border-radius: 10px;
                max-width: 80%;
                word-wrap: break-word;
            }
            .user-message {
                background: #667eea;
                color: white;
                margin-left: auto;
            }
            .agent-message {
                background: #f1f3f4;
                color: #333;
            }
            .system-message {
                background: #e3f2fd;
                color: #1976d2;
                text-align: center;
                margin: 10px auto;
                max-width: 60%;
            }
            .input-container {
                padding: 20px;
                border-top: 1px solid #eee;
                display: flex;
                gap: 10px;
            }
            .message-input {
                flex: 1;
                padding: 15px;
                border: 2px solid #ddd;
                border-radius: 25px;
                font-size: 16px;
                outline: none;
                transition: border-color 0.3s;
            }
            .message-input:focus {
                border-color: #667eea;
            }
            .send-button {
                padding: 15px 30px;
                background: #667eea;
                color: white;
                border: none;
                border-radius: 25px;
                cursor: pointer;
                font-size: 16px;
                transition: background 0.3s;
            }
            .send-button:hover {
                background: #5a6fd8;
            }
            .agent-selector {
                margin-bottom: 20px;
            }
            .agent-selector select {
                width: 100%;
                padding: 10px;
                border: 1px solid #ddd;
                border-radius: 5px;
                font-size: 14px;
            }
            .status-indicator {
                display: inline-block;
                width: 10px;
                height: 10px;
                border-radius: 50%;
                margin-right: 8px;
            }
            .status-online {
                background: #4CAF50;
            }
            .status-offline {
                background: #f44336;
            }
            .system-info {
                background: #e3f2fd;
                padding: 15px;
                border-radius: 10px;
                margin-bottom: 20px;
            }
            .system-info h3 {
                margin: 0 0 10px 0;
                color: #1976d2;
            }
            .system-info p {
                margin: 5px 0;
                font-size: 14px;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>ü§ñ Multi-AI Chat System</h1>
                <p>–ß–∞—Ç —Å –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏</p>
            </div>
            
            <div class="chat-container">
                <div class="chat-messages" id="chatMessages">
                    <div class="message system-message">
                        <strong>–°–∏—Å—Ç–µ–º–∞:</strong> –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Multi-AI —á–∞—Ç! –ê–≥–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ –∏ –≥–æ—Ç–æ–≤—ã –∫ –æ–±—â–µ–Ω–∏—é.
                    </div>
                </div>
                
                <div class="chat-sidebar">
                    <div class="system-info">
                        <h3>üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</h3>
                        <p><span class="status-indicator status-online"></span>–°–∏—Å—Ç–µ–º–∞: <span id="systemStatus">–ó–∞–≥—Ä—É–∑–∫–∞...</span></p>
                        <p>–ê–≥–µ–Ω—Ç–æ–≤: <span id="totalAgents">0</span></p>
                        <p>–ê–∫—Ç–∏–≤–Ω—ã—Ö: <span id="activeAgents">0</span></p>
                        <p>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: <span id="uptime">0–º</span></p>
                    </div>
                    
                    <div class="agent-selector">
                        <label for="agentSelect"><strong>–í—ã–±–µ—Ä–∏—Ç–µ –∞–≥–µ–Ω—Ç–∞:</strong></label>
                        <select id="agentSelect">
                            <option value="">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä</option>
                            <option value="general_assistant">–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ü–æ–º–æ—â–Ω–∏–∫</option>
                            <option value="code_developer">–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ö–æ–¥–∞</option>
                            <option value="data_analyst">–ê–Ω–∞–ª–∏—Ç–∏–∫ –î–∞–Ω–Ω—ã—Ö</option>
                            <option value="project_manager">–ú–µ–Ω–µ–¥–∂–µ—Ä –ü—Ä–æ–µ–∫—Ç–æ–≤</option>
                            <option value="designer">–î–∏–∑–∞–π–Ω–µ—Ä</option>
                            <option value="qa_tester">–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫</option>
                        </select>
                    </div>
                </div>
            </div>
            
            <div class="input-container">
                <input type="text" id="messageInput" class="message-input" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." />
                <button onclick="sendMessage()" class="send-button">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
            </div>
        </div>

        <script>
            const chatMessages = document.getElementById('chatMessages');
            const messageInput = document.getElementById('messageInput');
            const agentSelect = document.getElementById('agentSelect');

            function addMessage(message, agent, isUser) {
                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${isUser ? 'user-message' : 'agent-message'}`;
                messageDiv.innerHTML = `<strong>${agent}:</strong> ${message}`;
                chatMessages.appendChild(messageDiv);
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }

            function updateSystemStatus() {
                fetch('/api/system/status')
                    .then(response => response.json())
                    .then(data => {
                        document.getElementById('systemStatus').textContent = data.system_status === 'running' ? '–†–∞–±–æ—Ç–∞–µ—Ç' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞';
                        document.getElementById('totalAgents').textContent = data.total_agents || 0;
                        document.getElementById('activeAgents').textContent = data.active_agents || 0;
                        document.getElementById('uptime').textContent = data.uptime || '0–º';
                    })
                    .catch(error => {
                        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
                        document.getElementById('systemStatus').textContent = '–û—à–∏–±–∫–∞';
                    });
            }

            function sendMessage() {
                const message = messageInput.value.trim();
                const agentType = agentSelect.value;
                
                if (message) {
                    addMessage(message, '–í—ã', true);
                    
                    fetch('/api/chat/send', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            message: message,
                            agent_type: agentType || null,
                            user_id: 'web_user'
                        })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            addMessage(data.response.response, data.agent, false);
                        } else {
                            addMessage('–û—à–∏–±–∫–∞: ' + (data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'), '–°–∏—Å—Ç–µ–º–∞', false);
                        }
                    })
                    .catch(error => {
                        addMessage('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ' + error.message, '–°–∏—Å—Ç–µ–º–∞', false);
                    });
                    
                    messageInput.value = '';
                }
            }

            messageInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    sendMessage();
                }
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            updateSystemStatus();
            setInterval(updateSystemStatus, 5000);
        </script>
    </body>
    </html>
    """)

@app.post("/api/chat/send")
async def send_chat_message(message: ChatMessage):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≥–µ–Ω—Ç—É"""
    try:
        if not system_running:
            raise HTTPException(status_code=503, detail="System not running")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É
        result = send_message_to_agent(
            message=message.message,
            agent_type=message.agent_type,
            user_id=message.user_id
        )
        
        return JSONResponse(content=result)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/system/status")
async def get_system_status_endpoint():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    try:
        status = await get_system_status()
        return JSONResponse(content=status)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
        return JSONResponse(content={
            "system_status": "error",
            "error": str(e)
        })

@app.get("/api/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    try:
        if not system_running:
            return JSONResponse(content={"status": "unhealthy", "reason": "System not running"})
        
        return JSONResponse(content={"status": "healthy"})
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
        return JSONResponse(content={"status": "unhealthy", "reason": str(e)})

if __name__ == "__main__":
    uvicorn.run(
        "simple_working_system:app",
        host="0.0.0.0",
        port=8080,
        reload=False,
        log_level="info"
    )
