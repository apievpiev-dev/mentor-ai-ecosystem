#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö AI-–∞–≥–µ–Ω—Ç–æ–≤
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""

import asyncio
import sys
import time
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('/home/mentor')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_multi_agent_system():
    """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–≥–µ–Ω—Ç–æ–≤"""
    try:
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤...")
        
        from multi_agent_system import MultiAgentSystem
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É
        system = MultiAgentSystem()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤
        assert len(system.agents) > 0, "–ê–≥–µ–Ω—Ç—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã"
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(system.agents)} –∞–≥–µ–Ω—Ç–æ–≤")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
        test_messages = [
            "–ü–æ–º–æ–≥–∏ –º–Ω–µ —Å–æ–∑–¥–∞—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ",
            "–°–æ–∑–¥–∞–π –ø–ª–∞–Ω –ø—Ä–æ–µ–∫—Ç–∞",
            "–ö–∞–∫ –¥–µ–ª–∞?"
        ]
        
        for message in test_messages:
            result = await system.process_user_message(message)
            assert "response" in result, f"–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}"
            logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message[:30]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        status = system.get_system_status()
        assert "total_agents" in status, "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∞–≥–µ–Ω—Ç–æ–≤"
        logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {status['total_agents']} –∞–≥–µ–Ω—Ç–æ–≤")
        
        logger.info("‚úÖ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≥–µ–Ω—Ç–æ–≤: {e}")
        return False

async def test_agent_coordinator():
    """–¢–µ—Å—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤"""
    try:
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤...")
        
        from agent_coordinator import EnhancedSharedMemory, AgentCoordinator, TaskComplexity
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—â—É—é –ø–∞–º—è—Ç—å
        shared_memory = EnhancedSharedMemory()
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä
        coordinator = AgentCoordinator(shared_memory)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        task = await coordinator.create_coordination_task(
            title="–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞",
            description="–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏",
            required_skills=["general_help"],
            complexity=TaskComplexity.SIMPLE,
            priority=5
        )
        
        assert task.id is not None, "–ó–∞–¥–∞—á–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞: {task.title}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏
        status = coordinator.get_coordination_status()
        assert "total_agents" in status, "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏"
        logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω")
        
        logger.info("‚úÖ –¢–µ—Å—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞: {e}")
        return False

async def test_integrated_system():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    try:
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
        
        from integrated_agent_system import IntegratedAgentSystem
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
        system = IntegratedAgentSystem()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
        await system.initialize()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        assert system.shared_memory is not None, "–û–±—â–∞—è –ø–∞–º—è—Ç—å –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
        assert system.multi_agent_system is not None, "–°–∏—Å—Ç–µ–º–∞ –∞–≥–µ–Ω—Ç–æ–≤ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
        assert system.coordinator is not None, "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –Ω–µ —Å–æ–∑–¥–∞–Ω"
        
        logger.info("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
        result = await system.process_user_message("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        assert "response" in result, "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        status = system.get_system_status()
        assert "system_status" in status, "–ù–µ—Ç —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"
        logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {status['system_status']}")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É
        await system.stop()
        
        logger.info("‚úÖ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–π–¥–µ–Ω")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}")
        return False

def test_file_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤"""
    try:
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤...")
        
        required_files = [
            "/home/mentor/multi_agent_system.py",
            "/home/mentor/agent_coordinator.py",
            "/home/mentor/chat_server.py",
            "/home/mentor/integrated_agent_system.py",
            "/home/mentor/start_multi_agent_system.py",
            "/home/mentor/requirements.txt",
            "/home/mentor/README_MULTI_AGENT.md"
        ]
        
        for file_path in required_files:
            assert Path(file_path).exists(), f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}"
            logger.info(f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {Path(file_path).name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        required_dirs = [
            "/home/mentor/agent_data",
            "/home/mentor/agent_logs",
            "/home/mentor/agent_knowledge",
            "/home/mentor/agent_projects"
        ]
        
        for dir_path in required_dirs:
            Path(dir_path).mkdir(parents=True, exist_ok=True)
            assert Path(dir_path).exists(), f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞: {dir_path}"
            logger.info(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: {Path(dir_path).name}")
        
        logger.info("‚úÖ –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–π–¥–µ–Ω")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤: {e}")
        return False

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤"""
    try:
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        import fastapi
        import uvicorn
        import asyncio
        import json
        import logging
        import threading
        import uuid
        from datetime import datetime
        from typing import Dict, List, Any, Optional
        from dataclasses import dataclass
        from enum import Enum
        from pathlib import Path
        
        logger.info("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
        from multi_agent_system import MultiAgentSystem, BaseAgent, AgentType
        from agent_coordinator import AgentCoordinator, EnhancedSharedMemory
        from integrated_agent_system import IntegratedAgentSystem
        
        logger.info("‚úÖ –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π —Ä–∞–±–æ—Ç–∞—é—Ç")
        
        logger.info("‚úÖ –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤: {e}")
        return False

async def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö AI-–∞–≥–µ–Ω—Ç–æ–≤")
    logger.info("=" * 60)
    
    tests = [
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤", test_file_structure),
        ("–ò–º–ø–æ—Ä—Ç—ã", test_imports),
        ("–°–∏—Å—Ç–µ–º–∞ –∞–≥–µ–Ω—Ç–æ–≤", test_multi_agent_system),
        ("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä", test_agent_coordinator),
        ("–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", test_integrated_system)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        logger.info(f"\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
        try:
            if asyncio.iscoroutinefunction(test_func):
                result = await test_func()
            else:
                result = test_func()
            
            if result:
                passed += 1
                logger.info(f"‚úÖ –¢–µ—Å—Ç '{test_name}' –ø—Ä–æ–π–¥–µ–Ω")
            else:
                logger.error(f"‚ùå –¢–µ—Å—Ç '{test_name}' –ø—Ä–æ–≤–∞–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
    
    logger.info("\n" + "=" * 60)
    logger.info(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    logger.info(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    logger.info(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}/{total}")
    
    if passed == total:
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        return True
    else:
        logger.error("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        return False

if __name__ == "__main__":
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        result = asyncio.run(run_all_tests())
        
        if result:
            print("\nüéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ó–ê–ü–£–°–ö–£!")
            print("–î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
            print("python start_multi_agent_system.py")
            sys.exit(0)
        else:
            print("\n‚ùå –°–ò–°–¢–ï–ú–ê –ù–ï –ì–û–¢–û–í–ê! –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ç–µ—Å—Ç—ã.")
            sys.exit(1)
            
    except KeyboardInterrupt:
        logger.info("üõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        sys.exit(1)
