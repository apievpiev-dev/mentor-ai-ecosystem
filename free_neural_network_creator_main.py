#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª —Å–∏—Å—Ç–µ–º—ã –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π
"–ù–µ–π—Ä–æ—Å–µ—Ç—å, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏" - —Ç–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏
"""

import asyncio
import json
import logging
import time
import uuid
from typing import Dict, List, Any, Optional
from datetime import datetime
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
from free_ai_engine import free_ai_engine, generate_ai_response
from free_local_ai_system import free_ai_system
from auto_install_free_models import model_installer
from free_neural_network_web_interface import free_web_interface

logger = logging.getLogger(__name__)

class FreeNeuralNetworkCreatorSystem:
    """–ì–ª–∞–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏"""
    
    def __init__(self):
        self.system_id = str(uuid.uuid4())
        self.system_name = "Free Neural Network Creator"
        self.version = "1.0.0"
        self.status = "initializing"
        self.components = {}
        self.created_networks = {}
        self.statistics = {
            "networks_created": 0,
            "models_installed": 0,
            "ai_responses_generated": 0,
            "total_projects": 0,
            "uptime_start": datetime.now().isoformat()
        }
        self._setup_components()
        self._setup_directories()
    
    def _setup_components(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        self.components = {
            "free_ai_engine": free_ai_engine,
            "free_ai_system": free_ai_system,
            "model_installer": model_installer,
            "web_interface": free_web_interface
        }
        
        logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(self.components)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    
    def _setup_directories(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        directories = [
            "/workspace/free_models",
            "/workspace/free_models/system_logs",
            "/workspace/free_models/projects",
            "/workspace/free_models/statistics",
            "/workspace/free_models/networks"
        ]
        
        for directory in directories:
            Path(directory).mkdir(parents=True, exist_ok=True)
    
    async def start_system(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        try:
            self.status = "starting"
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π...")
            
            # 1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏
            logger.info("üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö AI –º–æ–¥–µ–ª–µ–π...")
            await self.setup_free_models()
            
            # 2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º AI –¥–≤–∏–∂–æ–∫
            logger.info("ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ AI –¥–≤–∏–∂–∫–∞...")
            await free_ai_engine.setup_free_models()
            
            # 3. –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            logger.info("üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
            web_runner = await free_web_interface.start_server()
            
            self.status = "running"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø—É—Å–∫–∞
            await self._save_system_statistics()
            
            logger.info("üéâ –°–∏—Å—Ç–µ–º–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π –∑–∞–ø—É—â–µ–Ω–∞!")
            logger.info("=" * 70)
            logger.info("üß† FREE NEURAL NETWORK CREATOR - –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï")
            logger.info("=" * 70)
            logger.info("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:8081")
            logger.info("ü§ñ AI –¥–≤–∏–∂–æ–∫: –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏")
            logger.info("üì• –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã:")
            logger.info("   ‚Ä¢ Ollama - –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏")
            logger.info("   ‚Ä¢ Hugging Face - –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä—ã")
            logger.info("   ‚Ä¢ –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ - –ø—Ä–æ—Å—Ç—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä—ã")
            logger.info("=" * 70)
            logger.info("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
            logger.info("   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
            logger.info("   - –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π —Å –ø–æ–º–æ—â—å—é –ò–ò")
            logger.info("   - –†–∞–±–æ—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ñ–ª–∞–π–Ω")
            logger.info("   - –ù–∏–∫–∞–∫–∏—Ö –ø–ª–∞—Ç–Ω—ã—Ö API")
            logger.info("   - –í—Å–µ –º–æ–¥–µ–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
            logger.info("=" * 70)
            
            return web_runner
            
        except Exception as e:
            self.status = "error"
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
            raise
    
    async def setup_free_models(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        try:
            logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö AI –º–æ–¥–µ–ª–µ–π...")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏
            results = await model_installer.install_all_models()
            
            if results["success"]:
                self.statistics["models_installed"] = results["installed_models"]
                logger.info(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {results['installed_models']} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
            else:
                logger.warning(f"‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏: {results['failed_installations']} –æ—à–∏–±–æ–∫")
            
            return results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: {e}")
            return {"success": False, "error": str(e)}
    
    async def create_neural_network_with_ai(self, task_description: str, 
                                          provider: str = "auto") -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —Å –ø–æ–º–æ—â—å—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ AI"""
        try:
            network_id = str(uuid.uuid4())[:8]
            network_name = f"free_network_{network_id}"
            
            logger.info(f"üß† –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {task_description}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å –ø–æ–º–æ—â—å—é AI
            ai_prompt = f"""
            –°–æ–∑–¥–∞–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –∑–∞–¥–∞—á–∏: {task_description}
            
            –í–µ—Ä–Ω–∏ JSON —Å –ø–æ–ª—è–º–∏:
            - name: –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ç–∏
            - type: —Ç–∏–ø –∑–∞–¥–∞—á–∏ (classification/regression/generation)
            - input_size: —Ä–∞–∑–º–µ—Ä –≤—Ö–æ–¥–∞
            - output_size: —Ä–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–∞
            - hidden_layers: —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–º–µ—Ä–æ–≤ —Å–∫—Ä—ã—Ç—ã—Ö —Å–ª–æ–µ–≤
            - activation_functions: —Ñ—É–Ω–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            - optimizer: –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä
            - loss_function: —Ñ—É–Ω–∫—Ü–∏—è –ø–æ—Ç–µ—Ä—å
            - learning_rate: —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è
            - batch_size: —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
            - epochs: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö
            - description: –æ–ø–∏—Å–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
            """
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ AI
            ai_response = await free_ai_engine.generate_response(
                ai_prompt,
                provider=provider if provider != "auto" else None
            )
            
            if not ai_response.success:
                raise Exception(f"–û—à–∏–±–∫–∞ AI: {ai_response.error}")
            
            self.statistics["ai_responses_generated"] += 1
            
            try:
                # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç –æ—Ç AI
                network_config = json.loads(ai_response.content)
            except json.JSONDecodeError:
                # Fallback –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
                network_config = {
                    "name": network_name,
                    "type": "classification",
                    "input_size": 784,
                    "output_size": 10,
                    "hidden_layers": [128, 64],
                    "activation_functions": ["relu", "relu"],
                    "optimizer": "adam",
                    "loss_function": "cross_entropy",
                    "learning_rate": 0.001,
                    "batch_size": 32,
                    "epochs": 20,
                    "description": f"–ù–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –∑–∞–¥–∞—á–∏: {task_description}"
                }
            
            # –°–æ–∑–¥–∞–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç—å
            network = {
                "id": network_id,
                "name": network_config["name"],
                "task": task_description,
                "provider": ai_response.provider,
                "model_used": ai_response.model,
                "config": network_config,
                "ai_response": ai_response.content,
                "status": "created",
                "created_at": datetime.now().isoformat(),
                "response_time": ai_response.response_time
            }
            
            self.created_networks[network_id] = network
            self.statistics["networks_created"] += 1
            self.statistics["total_projects"] += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç—å
            await self._save_network(network)
            
            logger.info(f"‚úÖ –ù–µ–π—Ä–æ—Å–µ—Ç—å —Å–æ–∑–¥–∞–Ω–∞: {network_name}")
            logger.info(f"ü§ñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –º–æ–¥–µ–ª—å: {ai_response.model} ({ai_response.provider})")
            logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {ai_response.response_time:.2f} —Å–µ–∫")
            
            return {
                "message": f"–ù–µ–π—Ä–æ—Å–µ—Ç—å '{network_name}' —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
                "network": network,
                "ai_provider": ai_response.provider,
                "ai_model": ai_response.model,
                "response_time": ai_response.response_time
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {e}")
            return {"error": str(e)}
    
    async def get_available_models(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        try:
            models = free_ai_engine.get_available_models()
            status = free_ai_engine.get_status()
            
            return {
                "models": models,
                "status": status,
                "total_models": sum(len(model_list) for model_list in models.values()),
                "providers": list(models.keys())
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {e}")
            return {"error": str(e)}
    
    async def get_system_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –°—Ç–∞—Ç—É—Å AI –¥–≤–∏–∂–∫–∞
            ai_status = free_ai_engine.get_status()
            
            # –°—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞ –º–æ–¥–µ–ª–µ–π
            installer_status = await model_installer.get_installation_status()
            
            return {
                "system_id": self.system_id,
                "system_name": self.system_name,
                "version": self.version,
                "status": self.status,
                "uptime": self._get_uptime(),
                "statistics": self.statistics,
                "created_networks": len(self.created_networks),
                "ai_engine": ai_status,
                "model_installer": installer_status,
                "timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
            return {"error": str(e)}
    
    def _get_uptime(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
        try:
            start_time = datetime.fromisoformat(self.statistics["uptime_start"])
            uptime = datetime.now() - start_time
            return str(uptime)
        except:
            return "unknown"
    
    async def _save_network(self, network: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"""
        try:
            network_path = f"/workspace/free_models/networks/{network['id']}_network.json"
            with open(network_path, 'w', encoding='utf-8') as f:
                json.dump(network, f, indent=2, ensure_ascii=False)
            
            logger.info(f"üíæ –ù–µ–π—Ä–æ—Å–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {network_path}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {e}")
    
    async def _save_system_statistics(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            stats_path = f"/workspace/free_models/statistics/system_stats_{int(time.time())}.json"
            with open(stats_path, 'w', encoding='utf-8') as f:
                json.dump(self.statistics, f, indent=2, ensure_ascii=False)
            
            logger.info(f"üíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {stats_path}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    async def demo_creation(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"""
        try:
            logger.info("üé¨ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...")
            
            # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–Ω–µ–π—Ä–æ—Å–µ—Ç—å
            demo_result = await self.create_neural_network_with_ai(
                "–°–æ–∑–¥–∞–π –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä—É–∫–æ–ø–∏—Å–Ω—ã—Ö —Ü–∏—Ñ—Ä MNIST",
                provider="auto"
            )
            
            if demo_result.get("error"):
                logger.error(f"‚ùå –î–µ–º–æ –Ω–µ —É–¥–∞–ª–æ—Å—å: {demo_result['error']}")
            else:
                logger.info("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                logger.info(f"üìä –°–æ–∑–¥–∞–Ω–æ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π: {self.statistics['networks_created']}")
                logger.info(f"ü§ñ AI –æ—Ç–≤–µ—Ç–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {self.statistics['ai_responses_generated']}")
                logger.info(f"üì• –ú–æ–¥–µ–ª–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {self.statistics['models_installed']}")
            
            return demo_result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            return {"error": str(e)}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã
free_neural_network_creator_system = FreeNeuralNetworkCreatorSystem()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
        runner = await free_neural_network_creator_system.start_system()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
        logger.info("üé¨ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")
        demo_result = await free_neural_network_creator_system.demo_creation()
        
        if not demo_result.get("error"):
            logger.info("üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        status = await free_neural_network_creator_system.get_system_status()
        logger.info(f"üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {status['status']}")
        logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {status['uptime']}")
        logger.info(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {status['statistics']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
        models = await free_neural_network_creator_system.get_available_models()
        logger.info(f"ü§ñ –î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π: {models.get('total_models', 0)}")
        logger.info(f"üìã –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {models.get('providers', [])}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ
        logger.info("üîÑ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ...")
        while True:
            await asyncio.sleep(60)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if int(time.time()) % 300 == 0:  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                status = await free_neural_network_creator_system.get_system_status()
                logger.info(f"üìä –°–æ–∑–¥–∞–Ω–æ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π: {status['statistics']['networks_created']}")
                logger.info(f"ü§ñ AI –æ—Ç–≤–µ—Ç–æ–≤: {status['statistics']['ai_responses_generated']}")
            
    except KeyboardInterrupt:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π...")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())