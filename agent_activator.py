#!/usr/bin/env python3
"""
–ê–∫—Ç–∏–≤–∞—Ç–æ—Ä –∞–≥–µ–Ω—Ç–æ–≤ - –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –∞–≥–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ
"""

import asyncio
import requests
import logging
import time
import json
from typing import Dict, List, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class AgentActivator:
    """–ê–∫—Ç–∏–≤–∞—Ç–æ—Ä –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã"""
    
    def __init__(self, server_url="http://localhost:8080"):
        self.server_url = server_url
        self.running = False
        self.agents = [
            "general_assistant",
            "code_developer", 
            "data_analyst",
            "project_manager",
            "designer",
            "qa_tester"
        ]
        
        # –ó–∞–¥–∞—á–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤
        self.activation_tasks = {
            "general_assistant": [
                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ —Å–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç",
                "–ü—Ä–µ–¥–ª–æ–∂–∏ 3 —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã",
                "–°–æ–∑–¥–∞–π –ø–ª–∞–Ω –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
            ],
            "code_developer": [
                "–°–æ–∑–¥–∞–π —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API",
                "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –∫–æ–¥ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                "–î–æ–±–∞–≤—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"
            ],
            "data_analyst": [
                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã",
                "–°–æ–∑–¥–∞–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–æ–≤",
                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API"
            ],
            "project_manager": [
                "–°–æ–∑–¥–∞–π –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è —Å–∏—Å—Ç–µ–º—ã –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é",
                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞–¥–∞—á",
                "–°–æ–∑–¥–∞–π roadmap –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"
            ],
            "designer": [
                "–£–ª—É—á—à–∏ –¥–∏–∑–∞–π–Ω –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
                "–°–æ–∑–¥–∞–π –∏–∫–æ–Ω–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π",
                "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π UX –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"
            ],
            "qa_tester": [
                "–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π –≤—Å–µ API endpoints",
                "–ü—Ä–æ–≤–µ—Ä—å —Å–∏—Å—Ç–µ–º—É –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏",
                "–°–æ–∑–¥–∞–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã"
            ]
        }
    
    async def activate_agent(self, agent_type: str, task: str):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
        try:
            url = f"{self.server_url}/api/chat/send"
            data = {
                "message": task,
                "user_id": "agent_activator",
                "agent_type": agent_type
            }
            
            logger.info(f"üöÄ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ {agent_type}: {task[:50]}...")
            
            response = requests.post(url, json=data, timeout=30)
            
            if response.status_code == 200:
                result = response.json()
                logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç {agent_type} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {result.get('success', False)}")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞ {agent_type}: {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞ {agent_type}: {e}")
            return False
    
    async def activate_all_agents(self):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        logger.info("üöÄ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤...")
        
        for agent_type in self.agents:
            if agent_type in self.activation_tasks:
                task = self.activation_tasks[agent_type][0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É
                await self.activate_agent(agent_type, task)
                await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–∞—Ü–∏—è–º–∏
    
    async def continuous_activation(self):
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤...")
        
        task_counter = 0
        
        while self.running:
            try:
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
                agent_type = self.agents[task_counter % len(self.agents)]
                
                if agent_type in self.activation_tasks:
                    tasks = self.activation_tasks[agent_type]
                    task = tasks[task_counter % len(tasks)]
                    
                    await self.activate_agent(agent_type, task)
                
                task_counter += 1
                
                # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π
                await asyncio.sleep(30)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {e}")
                await asyncio.sleep(10)
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∞–∫—Ç–∏–≤–∞—Ç–æ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–∫—Ç–∏–≤–∞—Ç–æ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤...")
        self.running = True
        
        # –°–Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
        await self.activate_all_agents()
        
        # –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—É—é –∞–∫—Ç–∏–≤–∞—Ü–∏—é
        await self.continuous_activation()
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–∞—Ç–æ—Ä–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–∞—Ç–æ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤...")
        self.running = False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    activator = AgentActivator()
    
    try:
        await activator.start()
    except KeyboardInterrupt:
        logger.info("üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
        activator.stop()

if __name__ == "__main__":
    asyncio.run(main())
