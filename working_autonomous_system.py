#!/usr/bin/env python3
"""
–†–∞–±–æ—á–∞—è –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ Multi-AI
–ü—Ä–æ—Å—Ç–∞—è –∏ –Ω–∞–¥–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞, –∫–æ—Ç–æ—Ä–∞—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
"""

import asyncio
import logging
import time
import requests
import json
from datetime import datetime
from typing import Dict, Any, List
import threading
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/home/mentor/working_autonomous_system.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class WorkingAutonomousSystem:
    """–†–∞–±–æ—á–∞—è –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"""
    
    def __init__(self):
        self.running = False
        self.agents = {}
        self.active_agents = set()
        self.task_counter = 0
        self.startup_time = datetime.now()
        self.lock = threading.Lock()
        
        # –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤
        self.autonomous_tasks = {
            "general_assistant": [
                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ —Å–æ–∑–¥–∞–π –æ—Ç—á–µ—Ç",
                "–ü—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã",
                "–°–æ–∑–¥–∞–π –ø–ª–∞–Ω –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                "–ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫",
                "–ü—Ä–µ–¥–ª–æ–∂–∏ –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã"
            ],
            "code_developer": [
                "–°–æ–∑–¥–∞–π —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API",
                "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –∫–æ–¥ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                "–î–æ–±–∞–≤—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏",
                "–°–æ–∑–¥–∞–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è",
                "–ü—Ä–æ–≤–µ—Ä—å –∫–æ–¥ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π"
            ],
            "data_analyst": [
                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã",
                "–°–æ–∑–¥–∞–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–æ–≤",
                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API",
                "–°–æ–∑–¥–∞–π –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã",
                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã"
            ],
            "project_manager": [
                "–°–æ–∑–¥–∞–π –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è —Å–∏—Å—Ç–µ–º—ã –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é",
                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞–¥–∞—á",
                "–°–æ–∑–¥–∞–π roadmap –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π",
                "–û—Ü–µ–Ω–∏ —Ä–∏—Å–∫–∏ –∏ —Å–æ–∑–¥–∞–π –ø–ª–∞–Ω –∏—Ö –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏",
                "–°–æ–∑–¥–∞–π –ø–ª–∞–Ω –∑–∞–¥–∞—á –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —á–∞—Å"
            ],
            "designer": [
                "–£–ª—É—á—à–∏ –¥–∏–∑–∞–π–Ω –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
                "–°–æ–∑–¥–∞–π –∏–∫–æ–Ω–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π",
                "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π UX –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤",
                "–°–æ–∑–¥–∞–π –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–∏—Å—Ç–µ–º—ã",
                "–ü—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"
            ],
            "qa_tester": [
                "–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π –≤—Å–µ API endpoints",
                "–ü—Ä–æ–≤–µ—Ä—å —Å–∏—Å—Ç–µ–º—É –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏",
                "–°–æ–∑–¥–∞–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã",
                "–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π",
                "–ü—Ä–æ–≤–µ–¥–∏ –±–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"
            ]
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–æ–≤
        self._initialize_agents()
    
    def _initialize_agents(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤"""
        agent_types = [
            "general_assistant",
            "code_developer", 
            "data_analyst",
            "project_manager",
            "designer",
            "qa_tester"
        ]
        
        for agent_type in agent_types:
            self.agents[agent_type] = {
                "id": f"{agent_type}_agent",
                "name": f"–ê–≥–µ–Ω—Ç {agent_type.replace('_', ' ').title()}",
                "type": agent_type,
                "is_active": False,
                "last_activity": None,
                "task_count": 0,
                "status": "idle"
            }
            logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç {agent_type} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def get_system_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        with self.lock:
            uptime_delta = datetime.now() - self.startup_time
            uptime = f"{int(uptime_delta.total_seconds() / 60)}–º"
            
            return {
                "system_status": "running" if self.running else "stopped",
                "uptime": uptime,
                "total_agents": len(self.agents),
                "active_agents": len(self.active_agents),
                "coordination_status": {
                    "total_agents": len(self.agents),
                    "active_tasks": len(self.active_agents),
                    "message_queue_size": 0,
                    "agent_capabilities": {
                        agent_id: {
                            "skills": ["autonomous_work", "task_processing"],
                            "performance_score": 1.0,
                            "availability": True,
                            "current_load": 0.0,
                            "is_active": agent["is_active"],
                            "last_activity": agent["last_activity"].isoformat() if agent["last_activity"] else None
                        }
                        for agent_id, agent in self.agents.items()
                    },
                    "active_tasks_info": []
                },
                "shared_memory": {
                    "knowledge_items": self.task_counter,
                    "conversation_history": self.task_counter,
                    "agent_capabilities": len(self.agents)
                },
                "startup_time": self.startup_time.isoformat()
            }
    
    def send_message_to_agent(self, message: str, agent_type: str = None, user_id: str = "user") -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≥–µ–Ω—Ç—É"""
        try:
            with self.lock:
                if agent_type and agent_type in self.agents:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∞–≥–µ–Ω—Ç—É
                    agent = self.agents[agent_type]
                    agent["is_active"] = True
                    agent["last_activity"] = datetime.now()
                    agent["task_count"] += 1
                    self.active_agents.add(agent_type)
                    
                    logger.info(f"üöÄ –ê–≥–µ–Ω—Ç {agent_type} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {message[:50]}...")
                    
                    return {
                        "success": True,
                        "response": {
                            "response": f"–ê–≥–µ–Ω—Ç {agent['name']} –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}",
                            "status": "processed"
                        },
                        "agent": agent["name"],
                        "agent_type": agent_type,
                        "timestamp": datetime.now().isoformat()
                    }
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–º—É –¥–æ—Å—Ç—É–ø–Ω–æ–º—É –∞–≥–µ–Ω—Ç—É
                    if self.agents:
                        first_agent_type = list(self.agents.keys())[0]
                        agent = self.agents[first_agent_type]
                        agent["is_active"] = True
                        agent["last_activity"] = datetime.now()
                        agent["task_count"] += 1
                        self.active_agents.add(first_agent_type)
                        
                        logger.info(f"üöÄ –ê–≥–µ–Ω—Ç {first_agent_type} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {message[:50]}...")
                        
                        return {
                            "success": True,
                            "response": {
                                "response": f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≥–µ–Ω—Ç—É {agent['name']}",
                                "status": "processed"
                            },
                            "agent": agent["name"],
                            "agent_type": first_agent_type,
                            "timestamp": datetime.now().isoformat()
                        }
                    else:
                        return {"error": "No agents available"}
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≥–µ–Ω—Ç—É: {e}")
            return {"error": str(e)}
    
    async def autonomous_task_generator(self):
        """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∑–∞–¥–∞—á"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∑–∞–¥–∞—á...")
        
        while self.running:
            try:
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
                if self.agents:
                    agent_type = random.choice(list(self.agents.keys()))
                    agent = self.agents[agent_type]
                    
                    if agent_type in self.autonomous_tasks:
                        tasks = self.autonomous_tasks[agent_type]
                        task = random.choice(tasks)
                        
                        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞
                        with self.lock:
                            agent["is_active"] = True
                            agent["last_activity"] = datetime.now()
                            agent["task_count"] += 1
                            agent["status"] = "working"
                            self.active_agents.add(agent_type)
                            self.task_counter += 1
                        
                        logger.info(f"üìã –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –∑–∞–¥–∞—á–∞ #{self.task_counter} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–≥–µ–Ω—Ç—É {agent_type}: {task[:50]}...")
                        
                        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –∞–≥–µ–Ω—Ç–∞
                        await asyncio.sleep(random.uniform(5, 15))
                        
                        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞
                        with self.lock:
                            agent["is_active"] = False
                            agent["status"] = "idle"
                            if agent_type in self.active_agents:
                                self.active_agents.remove(agent_type)
                        
                        logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç {agent_type} –∑–∞–≤–µ—Ä—à–∏–ª –∑–∞–¥–∞—á—É")
                
                # –ñ–¥–µ–º 30-60 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ–π
                await asyncio.sleep(random.uniform(30, 60))
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∑–∞–¥–∞—á: {e}")
                await asyncio.sleep(10)
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞–±–æ—á–µ–π –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
            self.running = True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∑–∞–¥–∞—á
            asyncio.create_task(self.autonomous_task_generator())
            
            logger.info("‚úÖ –†–∞–±–æ—á–∞—è –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
            return False
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–±–æ—á–µ–π –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
        self.running = False
        logger.info("‚úÖ –†–∞–±–æ—á–∞—è –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã
_working_system = None

def get_working_system() -> WorkingAutonomousSystem:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–∏—Å—Ç–µ–º—ã"""
    global _working_system
    if _working_system is None:
        _working_system = WorkingAutonomousSystem()
    return _working_system

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    system = get_working_system()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
        if await system.start():
            logger.info("‚úÖ –†–∞–±–æ—á–∞—è –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")
            
            # –ñ–¥–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
            await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
            status = system.get_system_status()
            logger.info(f"üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {status}")
            
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–±–æ—á—É—é –∞–≤—Ç–æ–Ω–æ–º–Ω—É—é —Å–∏—Å—Ç–µ–º—É")
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: {e}")
    
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É
        system.stop()

if __name__ == "__main__":
    asyncio.run(main())
