#!/usr/bin/env python3
"""
–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ Mentor
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ AI —Å–∏—Å—Ç–µ–º—ã –≤ –æ–¥–Ω–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
"""

import asyncio
import json
import logging
import time
import requests
import subprocess
from datetime import datetime
from typing import Dict, List, Any, Optional

import uvicorn
from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class MentorDashboard:
    """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Mentor"""
    
    def __init__(self):
        self.systems = {
            "simple_mentor": {"port": 8081, "name": "–ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞", "status": "unknown"},
            "real_ai_mentor": {"port": 8082, "name": "AI —Å–∏—Å—Ç–µ–º–∞ (Llama)", "status": "unknown"},
        }
        
        self.processes = {}
        self.startup_time = time.time()
        
    def check_system_status(self, port: int) -> str:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ –ø–æ—Ä—Ç—É"""
        try:
            response = requests.get(f"http://localhost:{port}/api/system/status", timeout=3)
            return "online" if response.status_code == 200 else "error"
        except:
            return "offline"
    
    def get_system_info(self, port: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            response = requests.get(f"http://localhost:{port}/api/system/status", timeout=3)
            if response.status_code == 200:
                return response.json()
            return {"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}
        except Exception as e:
            return {"error": str(e)}

dashboard = MentorDashboard()

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(title="Mentor Dashboard")

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    return HTMLResponse(content="""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üéõÔ∏è Mentor Control Dashboard</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            background: linear-gradient(135deg, #2c3e50 0%, #3498db 100%); 
            min-height: 100vh; 
            color: white;
        }
        .container { max-width: 1600px; margin: 0 auto; padding: 20px; }
        .header { text-align: center; margin-bottom: 40px; }
        .header h1 { font-size: 3.5em; margin-bottom: 10px; text-shadow: 2px 2px 4px rgba(0,0,0,0.3); }
        .header p { font-size: 1.4em; opacity: 0.9; }
        
        .systems-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); gap: 30px; margin-bottom: 40px; }
        .system-card { 
            background: rgba(255,255,255,0.1); 
            border-radius: 20px; 
            padding: 30px; 
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.2);
            transition: transform 0.3s ease;
        }
        .system-card:hover { transform: translateY(-5px); }
        .system-card h3 { font-size: 1.5em; margin-bottom: 20px; }
        
        .status-indicator { 
            display: inline-block; 
            width: 12px; 
            height: 12px; 
            border-radius: 50%; 
            margin-right: 8px; 
        }
        .status-online { background: #2ecc71; box-shadow: 0 0 10px #2ecc71; }
        .status-offline { background: #e74c3c; }
        .status-unknown { background: #f39c12; }
        
        .metric-row { display: flex; justify-content: space-between; margin-bottom: 10px; }
        .metric-value { font-weight: bold; color: #3498db; }
        
        .action-buttons { margin-top: 20px; }
        .btn { 
            padding: 10px 20px; 
            margin: 5px; 
            border: none; 
            border-radius: 8px; 
            cursor: pointer; 
            font-weight: bold;
            transition: all 0.3s ease;
        }
        .btn-primary { background: #3498db; color: white; }
        .btn-success { background: #2ecc71; color: white; }
        .btn-danger { background: #e74c3c; color: white; }
        .btn:hover { transform: scale(1.05); }
        
        .global-stats { 
            background: rgba(255,255,255,0.1); 
            border-radius: 20px; 
            padding: 30px; 
            margin-bottom: 30px;
            backdrop-filter: blur(10px);
        }
        
        .stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; }
        .stat-item { text-align: center; }
        .stat-number { font-size: 2.5em; font-weight: bold; color: #3498db; }
        .stat-label { opacity: 0.8; margin-top: 5px; }
        
        .console { 
            background: rgba(0,0,0,0.3); 
            border-radius: 15px; 
            padding: 20px; 
            font-family: 'Courier New', monospace; 
            height: 300px; 
            overflow-y: auto;
            border: 1px solid rgba(255,255,255,0.1);
        }
        .console-line { margin-bottom: 5px; }
        .console-timestamp { color: #95a5a6; margin-right: 10px; }
        .console-info { color: #3498db; }
        .console-success { color: #2ecc71; }
        .console-error { color: #e74c3c; }
        
        .ai-showcase { 
            background: linear-gradient(135deg, #8e44ad 0%, #3498db 100%); 
            border-radius: 20px; 
            padding: 30px; 
            margin-top: 30px;
        }
        .ai-showcase h2 { margin-bottom: 20px; }
        
        .feature-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; }
        .feature-card { 
            background: rgba(255,255,255,0.1); 
            padding: 20px; 
            border-radius: 15px; 
            text-align: center;
        }
        .feature-icon { font-size: 3em; margin-bottom: 10px; }
        .feature-title { font-size: 1.2em; font-weight: bold; margin-bottom: 10px; }
        .feature-desc { opacity: 0.9; font-size: 0.9em; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üéõÔ∏è Mentor Control Dashboard</h1>
            <p>–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ AI —Å–∏—Å—Ç–µ–º–∞–º–∏</p>
        </div>
        
        <div class="global-stats">
            <h2>üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
            <div class="stats-grid">
                <div class="stat-item">
                    <div class="stat-number" id="totalSystems">0</div>
                    <div class="stat-label">–°–∏—Å—Ç–µ–º —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number" id="onlineSystems">0</div>
                    <div class="stat-label">–°–∏—Å—Ç–µ–º –æ–Ω–ª–∞–π–Ω</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number" id="totalAgents">0</div>
                    <div class="stat-label">AI –∞–≥–µ–Ω—Ç–æ–≤</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number" id="totalRequests">0</div>
                    <div class="stat-label">–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤</div>
                </div>
            </div>
        </div>
        
        <div class="systems-grid" id="systemsGrid">
            <!-- –°–∏—Å—Ç–µ–º—ã –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
        </div>
        
        <div class="ai-showcase">
            <h2>ü§ñ AI –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</h2>
            <div class="feature-grid">
                <div class="feature-card">
                    <div class="feature-icon">üß†</div>
                    <div class="feature-title">–ù–∞—Å—Ç–æ—è—â–∏–π AI</div>
                    <div class="feature-desc">Llama 3.2 –º–æ–¥–µ–ª—å –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞</div>
                </div>
                <div class="feature-card">
                    <div class="feature-icon">üíª</div>
                    <div class="feature-title">–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞</div>
                    <div class="feature-desc">AI –∞–Ω–∞–ª–∏–∑, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞</div>
                </div>
                <div class="feature-card">
                    <div class="feature-icon">üëÅÔ∏è</div>
                    <div class="feature-title">–í–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å</div>
                    <div class="feature-desc">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏ –∞–Ω–∞–ª–∏–∑ UI</div>
                </div>
                <div class="feature-card">
                    <div class="feature-icon">üîß</div>
                    <div class="feature-title">–°–∞–º–æ—É–ª—É—á—à–µ–Ω–∏–µ</div>
                    <div class="feature-desc">–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è</div>
                </div>
                <div class="feature-card">
                    <div class="feature-icon">üåê</div>
                    <div class="feature-title">–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å</div>
                    <div class="feature-desc">–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å</div>
                </div>
                <div class="feature-card">
                    <div class="feature-icon">üá∑üá∫</div>
                    <div class="feature-title">–†—É—Å—Å–∫–∏–π —è–∑—ã–∫</div>
                    <div class="feature-desc">100% –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞</div>
                </div>
            </div>
        </div>
        
        <div style="margin-top: 30px;">
            <h2>üìü –°–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–Ω—Å–æ–ª—å</h2>
            <div class="console" id="console">
                <div class="console-line">
                    <span class="console-timestamp">[02:45:00]</span>
                    <span class="console-info">–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è...</span>
                </div>
            </div>
        </div>
    </div>

    <script>
        let updateInterval;
        
        function addConsoleLog(message, type = 'info') {
            const console = document.getElementById('console');
            const timestamp = new Date().toLocaleTimeString();
            const line = document.createElement('div');
            line.className = 'console-line';
            line.innerHTML = `
                <span class="console-timestamp">[${timestamp}]</span>
                <span class="console-${type}">${message}</span>
            `;
            console.appendChild(line);
            console.scrollTop = console.scrollHeight;
        }
        
        async function updateSystemStatus() {
            try {
                const response = await fetch('/api/dashboard/status');
                const data = await response.json();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                document.getElementById('totalSystems').textContent = data.total_systems;
                document.getElementById('onlineSystems').textContent = data.online_systems;
                document.getElementById('totalAgents').textContent = data.total_agents;
                document.getElementById('totalRequests').textContent = data.total_requests;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–∏—Å—Ç–µ–º
                updateSystemCards(data.systems);
                
            } catch (error) {
                addConsoleLog(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ${error}`, 'error');
            }
        }
        
        function updateSystemCards(systems) {
            const grid = document.getElementById('systemsGrid');
            grid.innerHTML = '';
            
            Object.entries(systems).forEach(([key, system]) => {
                const card = document.createElement('div');
                card.className = 'system-card';
                
                const statusClass = `status-${system.status}`;
                const statusText = {
                    'online': 'üü¢ –û–Ω–ª–∞–π–Ω',
                    'offline': 'üî¥ –û—Ñ—Ñ–ª–∞–π–Ω', 
                    'unknown': 'üü° –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                }[system.status] || '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                
                card.innerHTML = `
                    <h3>
                        <span class="status-indicator ${statusClass}"></span>
                        ${system.name}
                    </h3>
                    <div class="metric-row">
                        <span>–°—Ç–∞—Ç—É—Å:</span>
                        <span class="metric-value">${statusText}</span>
                    </div>
                    <div class="metric-row">
                        <span>–ü–æ—Ä—Ç:</span>
                        <span class="metric-value">${system.port}</span>
                    </div>
                    ${system.info ? `
                        <div class="metric-row">
                            <span>–ê–≥–µ–Ω—Ç–æ–≤:</span>
                            <span class="metric-value">${system.info.active_agents || 0}/${system.info.total_agents || 0}</span>
                        </div>
                        <div class="metric-row">
                            <span>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</span>
                            <span class="metric-value">${system.info.uptime || '0—Å'}</span>
                        </div>
                        ${system.info.ai_requests !== undefined ? `
                            <div class="metric-row">
                                <span>AI –∑–∞–ø—Ä–æ—Å–æ–≤:</span>
                                <span class="metric-value">${system.info.ai_requests}</span>
                            </div>
                        ` : ''}
                    ` : ''}
                    <div class="action-buttons">
                        ${system.status === 'online' ? 
                            `<button class="btn btn-primary" onclick="openSystem('${system.port}')">–û—Ç–∫—Ä—ã—Ç—å</button>` : 
                            `<button class="btn btn-success" onclick="startSystem('${key}')">–ó–∞–ø—É—Å—Ç–∏—Ç—å</button>`
                        }
                        <button class="btn btn-danger" onclick="stopSystem('${key}')">–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</button>
                    </div>
                `;
                
                grid.appendChild(card);
            });
        }
        
        function openSystem(port) {
            window.open(`http://localhost:${port}`, '_blank');
            addConsoleLog(`üåê –û—Ç–∫—Ä—ã–≤–∞—é —Å–∏—Å—Ç–µ–º—É –Ω–∞ –ø–æ—Ä—Ç—É ${port}`, 'info');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            showDashboardNotification(`–°–∏—Å—Ç–µ–º–∞ –Ω–∞ –ø–æ—Ä—Ç—É ${port} –æ—Ç–∫—Ä—ã—Ç–∞ –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ`, 'success');
        }
        
        function showDashboardNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.style.cssText = `
                position: fixed; top: 20px; right: 20px; z-index: 1000;
                padding: 15px 20px; border-radius: 10px; color: white; font-weight: bold;
                background: ${type === 'success' ? '#2ecc71' : type === 'warning' ? '#f39c12' : '#3498db'};
                box-shadow: 0 4px 15px rgba(0,0,0,0.2); opacity: 0; transition: opacity 0.3s ease;
            `;
            notification.textContent = message;
            document.body.appendChild(notification);
            
            setTimeout(() => notification.style.opacity = '1', 100);
            setTimeout(() => {
                notification.style.opacity = '0';
                setTimeout(() => document.body.removeChild(notification), 300);
            }, 3000);
        }
        
        function startSystem(systemKey) {
            addConsoleLog(`–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã ${systemKey}...`, 'info');
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∑–∞–ø—É—Å–∫–∞
        }
        
        function stopSystem(systemKey) {
            addConsoleLog(`–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã ${systemKey}...`, 'info');
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        addConsoleLog('–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Mentor –∑–∞–ø—É—â–µ–Ω–∞', 'success');
        addConsoleLog('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º...', 'info');
        
        updateSystemStatus();
        updateInterval = setInterval(updateSystemStatus, 5000);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        setInterval(() => {
            const messages = [
                '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º –∞–∫—Ç–∏–≤–µ–Ω',
                'AI –∞–≥–µ–Ω—Ç—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –∑–∞–ø—Ä–æ—Å—ã', 
                '–í–∏–∑—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã',
                '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞',
                '–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Å—Ç–∞–±–∏–ª—å–Ω—ã'
            ];
            const randomMessage = messages[Math.floor(Math.random() * messages.length)];
            addConsoleLog(randomMessage, 'info');
        }, 10000);
    </script>
</body>
</html>
    """)

@app.get("/api/dashboard/status")
async def get_dashboard_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º"""
    systems_status = {}
    total_agents = 0
    total_requests = 0
    online_count = 0
    
    for key, system in dashboard.systems.items():
        status = dashboard.check_system_status(system["port"])
        system["status"] = status
        
        info = None
        if status == "online":
            info = dashboard.get_system_info(system["port"])
            online_count += 1
            
            if "total_agents" in info:
                total_agents += info["total_agents"]
            if "total_requests" in info:
                total_requests += info["total_requests"]
        
        systems_status[key] = {
            "name": system["name"],
            "port": system["port"],
            "status": status,
            "info": info if status == "online" else None
        }
    
    return {
        "total_systems": len(dashboard.systems),
        "online_systems": online_count,
        "total_agents": total_agents,
        "total_requests": total_requests,
        "systems": systems_status,
        "timestamp": datetime.now().isoformat()
    }

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üéõÔ∏è –ó–∞–ø—É—Å–∫ Mentor Dashboard...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 8083
        config = uvicorn.Config(app, host="0.0.0.0", port=8083, log_level="info")
        server = uvicorn.Server(config)
        
        logger.info("‚úÖ Mentor Dashboard –∑–∞–ø—É—â–µ–Ω–∞")
        logger.info("üåê –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ http://localhost:8083")
        
        await server.serve()
        
    except KeyboardInterrupt:
        logger.info("üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
    finally:
        logger.info("üõë Mentor Dashboard –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

if __name__ == "__main__":
    asyncio.run(main())