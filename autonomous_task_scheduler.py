#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤
–°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏—Ö –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
"""

import asyncio
import json
import logging
import time
import random
from datetime import datetime, timedelta
from typing import Dict, List, Any
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class AutonomousTaskScheduler:
    """–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á"""
    
    def __init__(self, server_url="http://5.129.198.210:8080"):
        self.server_url = server_url
        self.running = False
        self.task_interval = 60  # —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏
        self.agents = {
            "general_assistant": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ü–æ–º–æ—â–Ω–∏–∫",
            "code_developer": "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ö–æ–¥–∞", 
            "data_analyst": "–ê–Ω–∞–ª–∏—Ç–∏–∫ –î–∞–Ω–Ω—ã—Ö",
            "project_manager": "–ú–µ–Ω–µ–¥–∂–µ—Ä –ü—Ä–æ–µ–∫—Ç–æ–≤",
            "designer": "–î–∏–∑–∞–π–Ω–µ—Ä",
            "qa_tester": "–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫"
        }
        
        # –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        self.autonomous_tasks = {
            "general_assistant": [
                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è",
                "–°–æ–∑–¥–∞–π –ø–ª–∞–Ω –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                "–ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫",
                "–ü—Ä–µ–¥–ª–æ–∂–∏ –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã"
            ],
            "code_developer": [
                "–°–æ–∑–¥–∞–π —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API",
                "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –∫–æ–¥ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", 
                "–°–æ–∑–¥–∞–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è",
                "–î–æ–±–∞–≤—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"
            ],
            "data_analyst": [
                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã",
                "–°–æ–∑–¥–∞–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–æ–≤",
                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API",
                "–°–æ–∑–¥–∞–π –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã"
            ],
            "project_manager": [
                "–°–æ–∑–¥–∞–π –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è —Å–∏—Å—Ç–µ–º—ã –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é",
                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞–¥–∞—á",
                "–°–æ–∑–¥–∞–π roadmap –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π",
                "–û—Ü–µ–Ω–∏ —Ä–∏—Å–∫–∏ –∏ —Å–æ–∑–¥–∞–π –ø–ª–∞–Ω –∏—Ö –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏"
            ],
            "designer": [
                "–£–ª—É—á—à–∏ –¥–∏–∑–∞–π–Ω –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
                "–°–æ–∑–¥–∞–π –∏–∫–æ–Ω–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π",
                "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π UX –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤",
                "–°–æ–∑–¥–∞–π –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–∏—Å—Ç–µ–º—ã"
            ],
            "qa_tester": [
                "–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π –≤—Å–µ API endpoints",
                "–ü—Ä–æ–≤–µ—Ä—å —Å–∏—Å—Ç–µ–º—É –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏",
                "–°–æ–∑–¥–∞–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã",
                "–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π"
            ]
        }
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á...")
        self.running = True
        
        while self.running:
            try:
                await self._create_autonomous_task()
                await asyncio.sleep(self.task_interval)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                await asyncio.sleep(10)
    
    async def _create_autonomous_task(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        try:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
            agent_type = random.choice(list(self.agents.keys()))
            agent_name = self.agents[agent_type]
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è –∞–≥–µ–Ω—Ç–∞
            task = random.choice(self.autonomous_tasks[agent_type])
            
            logger.info(f"üìã –°–æ–∑–¥–∞—é –∞–≤—Ç–æ–Ω–æ–º–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è {agent_name}: {task}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –∞–≥–µ–Ω—Ç—É
            await self._send_task_to_agent(agent_type, task)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
    
    async def _send_task_to_agent(self, agent_type: str, task: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç—É"""
        try:
            url = f"{self.server_url}/api/chat/send"
            data = {
                "message": task,
                "user_id": "autonomous_scheduler",
                "agent_type": agent_type
            }
            
            response = requests.post(url, json=data, timeout=30)
            
            if response.status_code == 200:
                result = response.json()
                logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {self.agents[agent_type]}: {result.get('success', False)}")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏: {response.status_code}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç—É: {e}")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
        self.running = False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    scheduler = AutonomousTaskScheduler()
    
    try:
        await scheduler.start()
    except KeyboardInterrupt:
        logger.info("üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
        scheduler.stop()

if __name__ == "__main__":
    asyncio.run(main())



