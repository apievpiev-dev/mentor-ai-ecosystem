#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —á–∞—Ç JARVIS —Å –Ω–∞—Å—Ç–æ—è—â–∏–º AI
"""

from fastapi import FastAPI, HTTPException
from fastapi.responses import HTMLResponse
from pydantic import BaseModel
import json
import time
import asyncio
import subprocess
import os
import logging
from datetime import datetime
from typing import Optional, Dict, Any

logger = logging.getLogger(__name__)

class ChatMessage(BaseModel):
    message: str
    user_id: str = "anonymous"
    context: Optional[str] = None

app = FastAPI(title="JARVIS Intelligent Chat")

class IntelligentChat:
    def __init__(self):
        self.conversation_history = []
        self.max_history = 10
        self.ai_models = ["llama3.1:8b", "llama2:latest"]
        self.current_model = self.ai_models[0]
        
    def get_ai_response(self, message: str, context: str = "") -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI
            system_prompt = f"""–¢—ã JARVIS - –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è AI-—Å–∏—Å—Ç–µ–º–∞ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏. 
–¢–≤–æ–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
- –°–∞–º–æ—É–ª—É—á—à–µ–Ω–∏–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞
- –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ UX/UI
- –°–∞–º–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º. 
–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç —á—Ç–æ-—Ç–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å - –ø—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è.
–ï—Å–ª–∏ —ç—Ç–æ –≤–æ–ø—Ä–æ—Å –æ —Å–∏—Å—Ç–µ–º–µ - –¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.
–ï—Å–ª–∏ —ç—Ç–æ —Ç–≤–æ—Ä—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ—è–≤–∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å.

–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}
–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {self.get_recent_history()}
"""
            
            user_prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            full_prompt = f"{system_prompt}\n\n{user_prompt}\n\nJARVIS:"
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏
            for model in self.ai_models:
                try:
                    response = self.call_ollama(model, full_prompt)
                    if response and len(response.strip()) > 10:
                        return response.strip()
                except Exception as e:
                    logger.debug(f"–ú–æ–¥–µ–ª—å {model} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
                    continue
            
            # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É –æ—Ç–≤–µ—Ç—É
            return self.get_fallback_response(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è AI –æ—Ç–≤–µ—Ç–∞: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    
    def call_ollama(self, model: str, prompt: str) -> Optional[str]:
        """–í—ã–∑–æ–≤ Ollama API"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ollama run –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
            result = subprocess.run([
                'ollama', 'run', model, prompt
            ], capture_output=True, text=True, timeout=120)
            
            if result.returncode == 0 and result.stdout.strip():
                response = result.stdout.strip()
                
                # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —á–∞—Å—Ç–µ–π –∏ escape-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
                response = response.replace('\x1b[?2026h', '').replace('\x1b[?25l', '')
                response = response.replace('\x1b[?2026l', '').replace('\x1b[?25h', '')
                response = response.replace('\x1b[1G', '').replace('\x1b[K', '')
                response = response.replace('\x1b[2K', '').replace('\x1b[?25l', '')
                response = response.replace('\x1b[?25h', '')
                
                # –£–±–∏—Ä–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                import re
                response = re.sub(r'[\u2800-\u28FF]', '', response)  # Braille patterns
                response = re.sub(r'[‚†Å-‚†ø]', '', response)  # Braille characters
                
                # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —á–∞—Å—Ç–µ–π
                if "JARVIS:" in response:
                    response = response.split("JARVIS:")[-1].strip()
                if "User:" in response:
                    response = response.split("User:")[0].strip()
                
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
                response = '\n'.join(line.strip() for line in response.split('\n') if line.strip())
                
                return response if response else None
            
        except subprocess.TimeoutExpired:
            logger.warning(f"–¢–∞–π–º–∞—É—Ç –¥–ª—è –º–æ–¥–µ–ª–∏ {model}")
        except FileNotFoundError:
            logger.error("Ollama –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ Ollama: {e}")
        
        return None
    
    def get_fallback_response(self, message: str) -> str:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        message_lower = message.lower().strip()
        
        if any(word in message_lower for word in ["—Å—Ç–∞—Ç—É—Å", "—Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–∫–∞–∫ –¥–µ–ª–∞"]):
            return """–°–∏—Å—Ç–µ–º–∞ JARVIS —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ:
‚Ä¢ –í—Å–µ –º–æ–¥—É–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã
‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ
‚Ä¢ –ì–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–¥–∞—á
‚Ä¢ AI –º–æ–¥–µ–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã (llama3.1, llama2)

–ß—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"""
        
        elif any(word in message_lower for word in ["–∞–Ω–∞–ª–∏–∑", "–¥–∞–Ω–Ω—ã–µ", "–æ—Ç—á–µ—Ç"]):
            return """–ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö:
‚Ä¢ –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç—ã
‚Ä¢ –°–æ–∑–¥–∞—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."""
        
        elif any(word in message_lower for word in ["–∫–æ–¥", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞"]):
            return """–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º:
‚Ä¢ Python, JavaScript, HTML/CSS
‚Ä¢ API —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
‚Ä¢ –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è

–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ - —Å–æ–∑–¥–∞–º –∫–æ–¥ –¥–ª—è –≤–∞—Å."""
        
        elif any(word in message_lower for word in ["–ø–æ–º–æ—â—å", "help", "—á—Ç–æ —É–º–µ–µ—à—å"]):
            return """–Ø JARVIS - –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è AI-—Å–∏—Å—Ç–µ–º–∞:

üß† –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –∏ —Ä–µ—à–µ–Ω–∏–π
‚Ä¢ –¢–≤–æ—Ä—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
‚Ä¢ –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º

üîß –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò:
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç—á–µ—Ç—ã
‚Ä¢ –°–∞–º–æ—É–ª—É—á—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ –°–∞–º–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ

–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å!"""
        
        else:
            return """–ü–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å! –Ø –∏—Å–ø–æ–ª—å–∑—É—é –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ AI-–º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∏ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á. 

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚Ä¢ –û–ø–∏—Å–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É
‚Ä¢ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ —Å–∏—Å—Ç–µ–º–µ
‚Ä¢ –ü–æ–ø—Ä–æ—Å–∏—Ç—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–¥
‚Ä¢ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö

–Ø –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!"""
    
    def get_recent_history(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        if len(self.conversation_history) <= 2:
            return "–ù–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä"
        
        recent = self.conversation_history[-4:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å–æ–æ–±—â–µ–Ω–∏—è
        history_text = []
        for msg in recent:
            role = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if msg["role"] == "user" else "JARVIS"
            history_text.append(f"{role}: {msg['content']}")
        
        return "\n".join(history_text)
    
    def add_to_history(self, role: str, content: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        self.conversation_history.append({
            "role": role,
            "content": content,
            "timestamp": datetime.now().isoformat()
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if len(self.conversation_history) > self.max_history:
            self.conversation_history = self.conversation_history[-self.max_history:]
    
    def get_system_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å AI –º–æ–¥–µ–ª–µ–π
            available_models = []
            for model in self.ai_models:
                try:
                    result = subprocess.run(['ollama', 'list'], capture_output=True, text=True, timeout=10)
                    if model in result.stdout:
                        available_models.append(model)
                except:
                    continue
            
            return {
                "ai_active": True,
                "available_models": available_models,
                "current_model": self.current_model,
                "conversation_length": len(self.conversation_history),
                "intelligence_level": "high" if available_models else "basic"
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {
                "ai_active": False,
                "error": str(e),
                "intelligence_level": "basic"
            }

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —á–∞—Ç–∞
intelligent_chat = IntelligentChat()

@app.get("/")
async def chat_interface():
    """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞"""
    html_content = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JARVIS Intelligent Chat</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }
        
        .container {
            width: 100%;
            max-width: 900px;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
        }
        
        .header {
            text-align: center;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 2px solid #f0f0f0;
        }
        
        .header h1 {
            color: #2c3e50;
            font-size: 2.5em;
            margin-bottom: 10px;
            background: linear-gradient(45deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        .header p {
            color: #7f8c8d;
            font-size: 1.1em;
        }
        
        .ai-status {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 10px;
            margin: 15px 0;
            padding: 10px 20px;
            background: linear-gradient(45deg, #4CAF50, #45a049);
            color: white;
            border-radius: 25px;
            font-weight: bold;
        }
        
        .chat-container {
            height: 450px;
            border: 2px solid #e0e0e0;
            border-radius: 15px;
            padding: 20px;
            overflow-y: auto;
            background: #f8f9fa;
            margin-bottom: 20px;
            display: flex;
            flex-direction: column;
            gap: 15px;
        }
        
        .message {
            max-width: 80%;
            padding: 15px 20px;
            border-radius: 20px;
            word-wrap: break-word;
            animation: fadeIn 0.3s ease-in;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .user-message {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            margin-left: auto;
            text-align: right;
        }
        
        .jarvis-message {
            background: linear-gradient(45deg, #f8f9fa, #e9ecef);
            color: #2c3e50;
            margin-right: auto;
            border: 1px solid #dee2e6;
        }
        
        .thinking {
            background: #fff3cd;
            color: #856404;
            border: 1px solid #ffeaa7;
            font-style: italic;
        }
        
        .input-container {
            display: flex;
            gap: 15px;
            align-items: center;
        }
        
        .message-input {
            flex: 1;
            padding: 15px 20px;
            border: 2px solid #e0e0e0;
            border-radius: 25px;
            font-size: 16px;
            outline: none;
            transition: border-color 0.3s ease;
        }
        
        .message-input:focus {
            border-color: #667eea;
        }
        
        .send-button {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 16px;
            font-weight: bold;
            transition: all 0.3s ease;
            min-width: 120px;
        }
        
        .send-button:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }
        
        .send-button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }
        
        .status {
            text-align: center;
            margin-top: 20px;
            color: #7f8c8d;
            font-size: 0.9em;
        }
        
        .typing-indicator {
            display: none;
            align-items: center;
            gap: 5px;
            color: #667eea;
            font-style: italic;
        }
        
        .typing-dots {
            display: flex;
            gap: 3px;
        }
        
        .typing-dots span {
            width: 6px;
            height: 6px;
            background: #667eea;
            border-radius: 50%;
            animation: typing 1.4s infinite;
        }
        
        .typing-dots span:nth-child(2) { animation-delay: 0.2s; }
        .typing-dots span:nth-child(3) { animation-delay: 0.4s; }
        
        @keyframes typing {
            0%, 60%, 100% { transform: translateY(0); }
            30% { transform: translateY(-10px); }
        }
        
        .model-info {
            position: absolute;
            top: 10px;
            right: 10px;
            background: rgba(102, 126, 234, 0.1);
            padding: 5px 10px;
            border-radius: 15px;
            font-size: 0.8em;
            color: #667eea;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>JARVIS Intelligent Chat</h1>
            <p>–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏</p>
            <div class="ai-status" id="aiStatus">
                üß† AI Active - Processing...
            </div>
        </div>
        
        <div class="chat-container" id="chatContainer">
            <div class="message jarvis-message">
                –ü—Ä–∏–≤–µ—Ç! –Ø JARVIS - –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è AI-—Å–∏—Å—Ç–µ–º–∞. –ò—Å–ø–æ–ª—å–∑—É—é –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∏ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?
            </div>
        </div>
        
        <div class="input-container">
            <input type="text" class="message-input" id="messageInput" 
                   placeholder="–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å..." 
                   onkeypress="handleKeyPress(event)">
            <button class="send-button" id="sendButton" onclick="sendMessage()">
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å
            </button>
        </div>
        
        <div class="typing-indicator" id="typingIndicator">
            JARVIS –ø–µ—á–∞—Ç–∞–µ—Ç
            <div class="typing-dots">
                <span></span>
                <span></span>
                <span></span>
            </div>
        </div>
        
        <div class="status" id="status">
            –ì–æ—Ç–æ–≤ –∫ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–º—É –æ–±—â–µ–Ω–∏—é
        </div>
        
        <div class="model-info" id="modelInfo">
            AI Model: Loading...
        </div>
    </div>

    <script>
        let isProcessing = false;
        
        async function handleKeyPress(event) {
            if (event.key === 'Enter' && !isProcessing) {
                sendMessage();
            }
        }

        async function sendMessage() {
            if (isProcessing) return;
            
            const input = document.getElementById('messageInput');
            const message = input.value.trim();
            
            if (!message) return;
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            addMessage(message, 'user');
            input.value = '';
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
            showTypingIndicator();
            setProcessing(true);
            
            try {
                const response = await fetch('/api/chat/send', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        message: message,
                        user_id: 'web_user'
                    })
                });
                
                const data = await response.json();
                
                hideTypingIndicator();
                
                if (data.error) {
                    addMessage('–û—à–∏–±–∫–∞: ' + data.error, 'jarvis');
                } else {
                    addMessage(data.message, 'jarvis');
                }
                
                updateStatus('–ì–æ—Ç–æ–≤ –∫ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–º—É –æ–±—â–µ–Ω–∏—é');
                
            } catch (error) {
                hideTypingIndicator();
                addMessage('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ' + error.message, 'jarvis');
                updateStatus('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
            } finally {
                setProcessing(false);
            }
        }

        function addMessage(text, sender) {
            const chatContainer = document.getElementById('chatContainer');
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${sender}-message`;
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            text = text.replace(/\\n/g, '<br>');
            text = text.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>');
            text = text.replace(/\\*(.*?)\\*/g, '<em>$1</em>');
            
            messageDiv.innerHTML = text;
            chatContainer.appendChild(messageDiv);
            chatContainer.scrollTop = chatContainer.scrollHeight;
        }

        function showTypingIndicator() {
            document.getElementById('typingIndicator').style.display = 'flex';
            updateStatus('JARVIS –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å...');
        }

        function hideTypingIndicator() {
            document.getElementById('typingIndicator').style.display = 'none';
        }

        function setProcessing(processing) {
            isProcessing = processing;
            const sendButton = document.getElementById('sendButton');
            const messageInput = document.getElementById('messageInput');
            
            sendButton.disabled = processing;
            messageInput.disabled = processing;
            
            if (processing) {
                sendButton.textContent = '–û–±—Ä–∞–±–æ—Ç–∫–∞...';
            } else {
                sendButton.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å';
            }
        }

        function updateStatus(text) {
            document.getElementById('status').textContent = text;
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å AI –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        async function loadAIStatus() {
            try {
                const response = await fetch('/api/chat/status');
                const data = await response.json();
                
                const aiStatus = document.getElementById('aiStatus');
                const modelInfo = document.getElementById('modelInfo');
                
                if (data.intelligence_level === 'high') {
                    aiStatus.innerHTML = 'üß† AI Active - High Intelligence';
                    aiStatus.style.background = 'linear-gradient(45deg, #4CAF50, #45a049)';
                    modelInfo.textContent = `AI: ${data.available_models.join(', ')}`;
                } else {
                    aiStatus.innerHTML = 'ü§ñ AI Active - Basic Mode';
                    aiStatus.style.background = 'linear-gradient(45deg, #FF9800, #F57C00)';
                    modelInfo.textContent = 'AI: Basic Mode';
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ AI:', error);
            }
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        loadAIStatus();
    </script>
</body>
</html>
    """
    return HTMLResponse(html_content)

@app.post("/api/chat/send")
async def send_message(message: ChatMessage):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —á–∞—Ç JARVIS"""
    try:
        if not message.message.strip():
            raise HTTPException(status_code=400, detail="–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        intelligent_chat.add_to_history("user", message.message)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        response = intelligent_chat.get_ai_response(message.message, message.context or "")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        intelligent_chat.add_to_history("assistant", response)
        
        return {
            "message": response,
            "timestamp": datetime.now().isoformat(),
            "user_id": message.user_id,
            "original_message": message.message,
            "intelligence_level": intelligent_chat.get_system_status().get("intelligence_level", "basic")
        }
                    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/chat/status")
async def chat_status():
    """–°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —á–∞—Ç–∞"""
    status = intelligent_chat.get_system_status()
    status.update({
        "chat_active": True,
        "websocket_active": False,
        "conversation_length": len(intelligent_chat.conversation_history),
        "timestamp": datetime.now().isoformat()
    })
    return status

@app.get("/api/chat/history")
async def chat_history():
    """–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    return {
        "history": intelligent_chat.conversation_history,
        "length": len(intelligent_chat.conversation_history)
    }

if __name__ == "__main__":
    import uvicorn
    print("üß† –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —á–∞—Ç–∞ JARVIS...")
    print("ü§ñ AI –º–æ–¥–µ–ª–∏: llama3.1:8b, llama2:latest")
    print("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:8083/")
    uvicorn.run(app, host="0.0.0.0", port=8083)
