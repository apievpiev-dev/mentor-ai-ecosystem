#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ AI –∞–≥–µ–Ω—Ç–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏
"""

import asyncio
import json
import logging
import os
import signal
import sys
import time
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Optional

from multi_agent_system import MultiAgentSystem
from ai_engine import ai_engine, generate_ai_response, generate_code
from chat_server import app, manager, system_stats

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/home/mentor/final_system.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class AIEnhancedAgent:
    """–ê–≥–µ–Ω—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ AI –Ω–∞–≤—ã–∫–∞–º–∏"""
    
    def __init__(self, agent_type: str, name: str, skills: List[str]):
        self.agent_type = agent_type
        self.name = name
        self.skills = skills
        self.status = "idle"
    
    async def process_message(self, message: str, user_id: str = "user") -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é AI"""
        try:
            self.status = "processing"
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞–≥–µ–Ω—Ç–∞
            system_prompt = self._get_system_prompt()
            user_prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç: {message}"
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
            response = await generate_ai_response(user_prompt, system_prompt)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–≤—ã–∫–æ–≤
            if "code_generation" in self.skills and any(word in message.lower() for word in ["–∫–æ–¥", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "—Å–æ–∑–¥–∞–π", "–Ω–∞–ø–∏—à–∏"]):
                response = await self._enhance_with_code(message, response)
            elif "data_analysis" in self.skills and any(word in message.lower() for word in ["–∞–Ω–∞–ª–∏–∑", "–¥–∞–Ω–Ω—ã–µ", "–æ—Ç—á–µ—Ç"]):
                response = await self._enhance_with_analysis(message, response)
            elif "project_planning" in self.skills and any(word in message.lower() for word in ["–ø—Ä–æ–µ–∫—Ç", "–ø–ª–∞–Ω", "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"]):
                response = await self._enhance_with_planning(message, response)
            
            self.status = "idle"
            
            return {
                "response": response,
                "agent": self.name,
                "agent_type": self.agent_type,
                "timestamp": datetime.now().isoformat(),
                "skills_used": self._get_used_skills(message)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.status = "error"
            return {
                "error": str(e),
                "agent": self.name,
                "agent_type": self.agent_type
            }
    
    def _get_system_prompt(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞"""
        prompts = {
            "code_developer": """–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç. –°–æ–∑–¥–∞–≤–∞–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π, —Ä–∞–±–æ—á–∏–π –∫–æ–¥.
            –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –æ–±—ä—è—Å–Ω—è–π —á—Ç–æ –¥–µ–ª–∞–µ—à—å.
            –í–∫–ª—é—á–∞–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫.""",
            
            "data_analyst": """–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ, –Ω–∞—Ö–æ–¥–∏ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏,
            —Å–æ–∑–¥–∞–≤–∞–π –∏–Ω—Å–∞–π—Ç—ã –∏ –¥–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
            –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.""",
            
            "project_manager": """–¢—ã –æ–ø—ã—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤. –°–æ–∑–¥–∞–≤–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã –ø—Ä–æ–µ–∫—Ç–æ–≤,
            —Ä–∞–∑–±–∏–≤–∞–π –∑–∞–¥–∞—á–∏ –Ω–∞ —ç—Ç–∞–ø—ã, –æ—Ü–µ–Ω–∏–≤–∞–π —Ä–∏—Å–∫–∏ –∏ —Ä–µ—Å—É—Ä—Å—ã.
            –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.""",
            
            "general_assistant": """–¢—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ü–æ–º–æ–≥–∞–π —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏,
            –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–µ–π. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""
        }
        return prompts.get(self.agent_type, "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.")
    
    async def _enhance_with_code(self, message: str, base_response: str) -> str:
        """–£–ª—É—á—à–∏—Ç—å –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
            language = "python"
            if "javascript" in message.lower() or "js" in message.lower():
                language = "javascript"
            elif "html" in message.lower():
                language = "html"
            elif "css" in message.lower():
                language = "css"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
            code = await generate_code(message, language)
            
            return f"{base_response}\n\n–í–æ—Ç –∫–æ–¥:\n```{language}\n{code}\n```"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: {e}")
            return base_response
    
    async def _enhance_with_analysis(self, message: str, base_response: str) -> str:
        """–£–ª—É—á—à–∏—Ç—å –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            analysis_prompt = f"""
            –î–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {message}
            
            –í–∫–ª—é—á–∏:
            1. –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—é –∞–Ω–∞–ª–∏–∑–∞
            2. –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            3. –í—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            4. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ (–æ–ø–∏—Å–∞–Ω–∏–µ)
            """
            
            analysis = await generate_ai_response(analysis_prompt)
            return f"{base_response}\n\n–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:\n{analysis}"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return base_response
    
    async def _enhance_with_planning(self, message: str, base_response: str) -> str:
        """–£–ª—É—á—à–∏—Ç—å –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            planning_prompt = f"""
            –°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è: {message}
            
            –í–∫–ª—é—á–∏:
            1. –≠—Ç–∞–ø—ã –ø—Ä–æ–µ–∫—Ç–∞
            2. –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
            3. –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã
            4. –†–∏—Å–∫–∏ –∏ –º–∏—Ç–∏–≥–∞—Ü–∏—è
            5. –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞
            """
            
            plan = await generate_ai_response(planning_prompt)
            return f"{base_response}\n\n–î–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω:\n{plan}"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return base_response
    
    def _get_used_skills(self, message: str) -> List[str]:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã"""
        used_skills = []
        
        if "code_generation" in self.skills and any(word in message.lower() for word in ["–∫–æ–¥", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "—Å–æ–∑–¥–∞–π", "–Ω–∞–ø–∏—à–∏"]):
            used_skills.append("code_generation")
        
        if "data_analysis" in self.skills and any(word in message.lower() for word in ["–∞–Ω–∞–ª–∏–∑", "–¥–∞–Ω–Ω—ã–µ", "–æ—Ç—á–µ—Ç"]):
            used_skills.append("data_analysis")
        
        if "project_planning" in self.skills and any(word in message.lower() for word in ["–ø—Ä–æ–µ–∫—Ç", "–ø–ª–∞–Ω", "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"]):
            used_skills.append("project_planning")
        
        return used_skills

class FinalAISystem:
    """–§–∏–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ AI –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.running = False
        self.agents = {}
        self.startup_time = None
        
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏
        self._create_agents()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGTERM, self._signal_handler)
        signal.signal(signal.SIGINT, self._signal_handler)
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
        self.running = False
        sys.exit(0)
    
    def _create_agents(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤"""
        agents_config = [
            {
                "type": "code_developer",
                "name": "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ö–æ–¥–∞",
                "skills": ["code_generation", "debugging", "code_review", "architecture_design"]
            },
            {
                "type": "data_analyst", 
                "name": "–ê–Ω–∞–ª–∏—Ç–∏–∫ –î–∞–Ω–Ω—ã—Ö",
                "skills": ["data_analysis", "reporting", "visualization", "predictive_modeling"]
            },
            {
                "type": "project_manager",
                "name": "–ú–µ–Ω–µ–¥–∂–µ—Ä –ü—Ä–æ–µ–∫—Ç–æ–≤", 
                "skills": ["project_planning", "task_management", "resource_allocation", "progress_tracking"]
            },
            {
                "type": "general_assistant",
                "name": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ü–æ–º–æ—â–Ω–∏–∫",
                "skills": ["general_help", "planning", "coordination"]
            }
        ]
        
        for config in agents_config:
            agent = AIEnhancedAgent(
                config["type"],
                config["name"], 
                config["skills"]
            )
            self.agents[config["type"]] = agent
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(self.agents)} AI –∞–≥–µ–Ω—Ç–æ–≤")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π AI —Å–∏—Å—Ç–µ–º—ã...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º AI –¥–≤–∏–∂–æ–∫
            ai_status = ai_engine.get_status()
            if ai_status.get("default_engine") == "none":
                logger.error("‚ùå AI –¥–≤–∏–∂–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            logger.info(f"‚úÖ AI –¥–≤–∏–∂–æ–∫: {ai_status.get('default_engine')}")
            logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {ai_status.get('available_models', {})}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º chat_server
            self._patch_chat_server()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
            self._start_web_server()
            
            self.running = True
            self.startup_time = datetime.now()
            
            logger.info("‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è AI —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            await self._main_loop()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
            raise
    
    def _patch_chat_server(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ chat_server"""
        try:
            import chat_server
            
            # –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            class AgentSystemWrapper:
                def __init__(self, agents):
                    self.agents = agents
                
                async def process_user_message(self, message: str, user_id: str = "user"):
                    # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
                    agent = self._select_agent(message)
                    return await agent.process_message(message, user_id)
                
                def _select_agent(self, message: str):
                    """–í—ã–±–æ—Ä –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
                    message_lower = message.lower()
                    
                    if any(word in message_lower for word in ["–∫–æ–¥", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "—Å–æ–∑–¥–∞–π", "–Ω–∞–ø–∏—à–∏"]):
                        return self.agents["code_developer"]
                    elif any(word in message_lower for word in ["–∞–Ω–∞–ª–∏–∑", "–¥–∞–Ω–Ω—ã–µ", "–æ—Ç—á–µ—Ç", "–≥—Ä–∞—Ñ–∏–∫"]):
                        return self.agents["data_analyst"]
                    elif any(word in message_lower for word in ["–ø—Ä–æ–µ–∫—Ç", "–ø–ª–∞–Ω", "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "–∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è"]):
                        return self.agents["project_manager"]
                    else:
                        return self.agents["general_assistant"]
                
                def get_system_status(self):
                    return {
                        "total_agents": len(self.agents),
                        "agents": [
                            {
                                "name": agent.name,
                                "type": agent.agent_type,
                                "status": agent.status,
                                "skills": agent.skills
                            }
                            for agent in self.agents.values()
                        ],
                        "system_status": "running"
                    }
            
            # –ó–∞–º–µ–Ω—è–µ–º multi_agent_system
            chat_server.multi_agent_system = AgentSystemWrapper(self.agents)
            
            logger.info("‚úÖ Chat server –æ–±–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è chat_server: {e}")
    
    def _start_web_server(self):
        """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            import uvicorn
            import threading
            
            def run_server():
                uvicorn.run(
                    app,
                    host="0.0.0.0",
                    port=8080,
                    log_level="info"
                )
            
            server_thread = threading.Thread(target=run_server, daemon=True)
            server_thread.start()
            
            logger.info("üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:8080")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")
    
    async def _main_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª"""
        try:
            while self.running:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
                await self._health_check()
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
                await asyncio.sleep(30)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
    
    async def _health_check(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º AI –¥–≤–∏–∂–æ–∫
            ai_status = ai_engine.get_status()
            ai_healthy = ai_status.get("default_engine") != "none"
            
            if ai_healthy:
                logger.info("üíö –°–∏—Å—Ç–µ–º–∞ –∑–¥–æ—Ä–æ–≤–∞")
            else:
                logger.warning("‚ö†Ô∏è AI –¥–≤–∏–∂–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        return {
            "running": self.running,
            "startup_time": self.startup_time.isoformat() if self.startup_time else None,
            "total_agents": len(self.agents),
            "ai_status": ai_engine.get_status()
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
final_ai_system = FinalAISystem()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
    async def main():
        try:
            await final_ai_system.start()
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    asyncio.run(main())


