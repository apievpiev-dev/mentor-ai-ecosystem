#!/usr/bin/env python3
"""
–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Ollama
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è AI –¥–≤–∏–∂–∫–∞
"""

import asyncio
import logging
import psutil
import requests
import subprocess
import time
from typing import Dict, Any

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class OllamaOptimizer:
    def __init__(self):
        self.ollama_url = "http://localhost:11434"
        self.optimization_threshold = 80  # CPU threshold for optimization
        
    def get_ollama_processes(self) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Ollama"""
        ollama_processes = []
        for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent', 'cmdline']):
            try:
                if 'ollama' in proc.info['name'].lower():
                    ollama_processes.append(proc.info)
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                continue
        return ollama_processes
    
    def check_ollama_health(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Ollama"""
        try:
            response = requests.get(f"{self.ollama_url}/api/tags", timeout=5)
            if response.status_code == 200:
                models = response.json().get("models", [])
                return {
                    "status": "healthy",
                    "models_count": len(models),
                    "response_time": response.elapsed.total_seconds()
                }
            else:
                return {
                    "status": "unhealthy",
                    "error": f"HTTP {response.status_code}"
                }
        except Exception as e:
            return {
                "status": "error",
                "error": str(e)
            }
    
    def optimize_ollama_performance(self):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Ollama"""
        processes = self.get_ollama_processes()
        
        for proc_info in processes:
            if proc_info['cpu_percent'] > self.optimization_threshold:
                logger.warning(f"‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å {proc_info['pid']}: {proc_info['cpu_percent']:.1f}% CPU")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–∏—Å –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
                if proc_info['cpu_percent'] > 500:  # –ê–Ω–æ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
                    logger.warning(f"üö® –ê–Ω–æ–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å {proc_info['pid']}: {proc_info['cpu_percent']:.1f}% CPU")
                    
                    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º Ollama –µ—Å–ª–∏ –æ–Ω –∑–∞–≤–∏—Å
                    self.restart_ollama_if_needed()
    
    def restart_ollama_if_needed(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Ollama –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        try:
            logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Ollama –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Ollama
            subprocess.run(['pkill', '-f', 'ollama'], check=False)
            time.sleep(2)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Ollama –∑–∞–Ω–æ–≤–æ
            subprocess.Popen(['ollama', 'serve'], 
                           stdout=subprocess.DEVNULL, 
                           stderr=subprocess.DEVNULL)
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
            time.sleep(5)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Ollama –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
            health = self.check_ollama_health()
            if health['status'] == 'healthy':
                logger.info("‚úÖ Ollama —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ Ollama: {health}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ Ollama: {e}")
    
    def get_system_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        processes = self.get_ollama_processes()
        health = self.check_ollama_health()
        
        total_cpu = sum(proc['cpu_percent'] for proc in processes)
        total_memory = sum(proc['memory_percent'] for proc in processes)
        
        return {
            "ollama_processes": len(processes),
            "total_cpu_usage": total_cpu,
            "total_memory_usage": total_memory,
            "health_status": health,
            "processes": processes
        }
    
    async def monitor_and_optimize(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Ollama...")
        
        while True:
            try:
                stats = self.get_system_stats()
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                logger.info(f"üìä Ollama —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['ollama_processes']} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, "
                          f"CPU: {stats['total_cpu_usage']:.1f}%, "
                          f"Memory: {stats['total_memory_usage']:.1f}%")
                
                # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                self.optimize_ollama_performance()
                
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(10)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    optimizer = OllamaOptimizer()
    await optimizer.monitor_and_optimize()

if __name__ == "__main__":
    asyncio.run(main())


