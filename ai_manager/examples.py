"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI Manager
"""

import asyncio
import json
from core.task_analyzer import TaskAnalyzer
from core.ai_manager import AIManager
from core.task_executor import TaskExecutor
from models.task import Task, TaskPriority, TaskCategory
from monitoring.logger import logger


async def example_basic_task():
    """–ü—Ä–∏–º–µ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
    print("üîß –ü—Ä–∏–º–µ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π –∑–∞–¥–∞—á–∏")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
    task_analyzer = TaskAnalyzer()
    ai_manager = AIManager()
    task_executor = TaskExecutor(ai_manager)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
    task = Task(
        description="–ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞",
        priority=TaskPriority.MEDIUM,
        category=TaskCategory.TEXT_PROCESSING
    )
    
    print(f"üìù –ó–∞–¥–∞—á–∞: {task.description}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
    analysis = await task_analyzer.analyze_task(task)
    print(f"üìä –ê–Ω–∞–ª–∏–∑: {json.dumps(analysis, ensure_ascii=False, indent=2)}")
    
    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
    agent = await ai_manager.create_agent_for_task(analysis)
    print(f"ü§ñ –°–æ–∑–¥–∞–Ω –∞–≥–µ–Ω—Ç: {agent.name} (—Ç–∏–ø: {agent.type})")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
    result = await task_executor.execute_task(task, agent)
    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(result, ensure_ascii=False, indent=2)}")


async def example_code_generation():
    """–ü—Ä–∏–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞"""
    print("\nüíª –ü—Ä–∏–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞")
    
    task_analyzer = TaskAnalyzer()
    ai_manager = AIManager()
    task_executor = TaskExecutor(ai_manager)
    
    task = Task(
        description="–°–æ–∑–¥–∞–π —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ Python –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ø–∏—Å–∫–∞ —á–∏—Å–µ–ª",
        priority=TaskPriority.HIGH,
        category=TaskCategory.CODE_GENERATION
    )
    
    print(f"üìù –ó–∞–¥–∞—á–∞: {task.description}")
    
    analysis = await task_analyzer.analyze_task(task)
    agent = await ai_manager.create_agent_for_task(analysis)
    result = await task_executor.execute_task(task, agent)
    
    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(result, ensure_ascii=False, indent=2)}")


async def example_creative_task():
    """–ü—Ä–∏–º–µ—Ä —Ç–≤–æ—Ä—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏"""
    print("\nüé® –ü—Ä–∏–º–µ—Ä —Ç–≤–æ—Ä—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏")
    
    task_analyzer = TaskAnalyzer()
    ai_manager = AIManager()
    task_executor = TaskExecutor(ai_manager)
    
    task = Task(
        description="–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –æ –≤–µ—Å–Ω–µ",
        priority=TaskPriority.LOW,
        category=TaskCategory.CREATIVE
    )
    
    print(f"üìù –ó–∞–¥–∞—á–∞: {task.description}")
    
    analysis = await task_analyzer.analyze_task(task)
    agent = await ai_manager.create_agent_for_task(analysis)
    result = await task_executor.execute_task(task, agent)
    
    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(result, ensure_ascii=False, indent=2)}")


async def example_multiple_tasks():
    """–ü—Ä–∏–º–µ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–¥–∞—á –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"""
    print("\n‚ö° –ü—Ä–∏–º–µ—Ä –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á")
    
    task_analyzer = TaskAnalyzer()
    ai_manager = AIManager()
    task_executor = TaskExecutor(ai_manager)
    
    tasks = [
        Task(
            description="–ü–µ—Ä–µ–≤–µ–¥–∏ 'Hello, world!' –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫",
            priority=TaskPriority.MEDIUM,
            category=TaskCategory.TRANSLATION
        ),
        Task(
            description="–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —Ç–µ–∫—Å—Ç–∞ –æ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏",
            priority=TaskPriority.MEDIUM,
            category=TaskCategory.SUMMARIZATION
        ),
        Task(
            description="–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ —á–∏—Å–ª–∞",
            priority=TaskPriority.MEDIUM,
            category=TaskCategory.CODE_GENERATION
        )
    ]
    
    print(f"üìù –ó–∞–ø—É—Å–∫ {len(tasks)} –∑–∞–¥–∞—á –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ...")
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    async def execute_single_task(task):
        analysis = await task_analyzer.analyze_task(task)
        agent = await ai_manager.create_agent_for_task(analysis)
        return await task_executor.execute_task(task, agent)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    results = await asyncio.gather(*[execute_single_task(task) for task in tasks])
    
    print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
    for i, result in enumerate(results, 1):
        print(f"  –ó–∞–¥–∞—á–∞ {i}: {result['status']} (–≤—Ä–µ–º—è: {result.get('execution_time', 0):.2f}—Å)")


async def example_system_stats():
    """–ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüìä –ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
    
    ai_manager = AIManager()
    task_executor = TaskExecutor(ai_manager)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–≥–µ–Ω—Ç–æ–≤
    agents = await ai_manager.get_active_agents()
    print(f"ü§ñ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤: {len(agents)}")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await ai_manager.get_system_stats()
    print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {json.dumps(stats, ensure_ascii=False, indent=2)}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–∞—á
    task_stats = await task_executor.get_system_stats()
    print(f"üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á: {json.dumps(task_stats, ensure_ascii=False, indent=2)}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏"""
    print("üöÄ AI Manager - –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n")
    
    try:
        # –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä
        await example_basic_task()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞
        await example_code_generation()
        
        # –¢–≤–æ—Ä—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞
        await example_creative_task()
        
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
        await example_multiple_tasks()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        await example_system_stats()
        
        print("\nüéâ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    asyncio.run(main())
