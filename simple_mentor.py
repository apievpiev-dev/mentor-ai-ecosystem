#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ MENTOR - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
"""

import json
import time
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler
from datetime import datetime

class SimpleMentorHandler(BaseHTTPRequestHandler):
    """–ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã MENTOR"""
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if self.path == '/':
            self.send_response(200)
            self.send_header('Content-type', 'text/html; charset=utf-8')
            self.end_headers()
            self.wfile.write(self.get_main_page().encode('utf-8'))
        
        elif self.path == '/api/status':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            status = {
                "system_name": "Simple MENTOR System",
                "status": "running",
                "agents": 6,
                "uptime": "0m",
                "timestamp": datetime.now().isoformat()
            }
            self.wfile.write(json.dumps(status).encode('utf-8'))
        
        else:
            self.send_response(404)
            self.end_headers()
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if self.path == '/api/chat':
            try:
                content_length = int(self.headers['Content-Length'])
                post_data = self.rfile.read(content_length)
                data = json.loads(post_data.decode('utf-8'))
                
                message = data.get("message", "")
                agent_type = data.get("agent_type", "general_assistant")
                
                # –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
                response = self.generate_response(message, agent_type)
                
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                
                result = {
                    "success": True,
                    "response": {
                        "response": response,
                        "agent": f"MENTOR {agent_type}",
                        "timestamp": datetime.now().isoformat()
                    }
                }
                self.wfile.write(json.dumps(result).encode('utf-8'))
                
            except Exception as e:
                self.send_response(500)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                error_response = {"error": str(e)}
                self.wfile.write(json.dumps(error_response).encode('utf-8'))
        
        else:
            self.send_response(404)
            self.end_headers()
    
    def generate_response(self, message, agent_type):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        message_lower = message.lower()
        
        if "–ø—Ä–∏–≤–µ—Ç" in message_lower:
            return f"–ü—Ä–∏–≤–µ—Ç! –Ø MENTOR {agent_type}. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!"
        elif "–∫–æ–¥" in message_lower:
            return "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–¥–∞. –°–æ–∑–¥–∞–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∏ –Ω–∞–ø–∏—à—É –∫–æ–¥."
        elif "–∞–Ω–∞–ª–∏–∑" in message_lower:
            return "–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–º –æ—Ç—á–µ—Ç—ã —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏."
        elif "–ø—Ä–æ–µ–∫—Ç" in message_lower:
            return "–Ø —Å–æ–∑–¥–∞–º –ø–ª–∞–Ω –ø—Ä–æ–µ–∫—Ç–∞ –∏ –±—É–¥—É —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏."
        elif "–¥–∏–∑–∞–π–Ω" in message_lower:
            return "–Ø —Å–æ–∑–¥–∞–º –¥–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ –ø—Ä–æ—Ç–æ—Ç–∏–ø—ã."
        elif "—Ç–µ—Å—Ç" in message_lower:
            return "–Ø –ø—Ä–æ–≤–µ–¥—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –Ω–∞–π–¥—É –±–∞–≥–∏."
        else:
            return f"–Ø MENTOR {agent_type}. –ü–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: '{message}'. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
    
    def get_main_page(self):
        """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
        return """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple MENTOR System</title>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
            margin: 0; 
            padding: 20px; 
            min-height: 100vh; 
        }
        .container { 
            max-width: 1000px; 
            margin: 0 auto; 
            background: white; 
            border-radius: 15px; 
            padding: 30px; 
            box-shadow: 0 10px 30px rgba(0,0,0,0.1); 
        }
        .header { 
            text-align: center; 
            margin-bottom: 30px; 
        }
        .header h1 { 
            color: #333; 
            font-size: 2.5em; 
            margin-bottom: 10px; 
        }
        .header p { 
            color: #666; 
            font-size: 1.2em; 
        }
        .chat-container { 
            display: flex; 
            gap: 20px; 
            height: 500px; 
        }
        .chat-messages { 
            flex: 2; 
            border: 1px solid #ddd; 
            border-radius: 10px; 
            padding: 20px; 
            overflow-y: auto; 
            background: #f9f9f9; 
        }
        .sidebar { 
            width: 300px; 
            border: 1px solid #ddd; 
            border-radius: 10px; 
            padding: 20px; 
            background: #f0f0f0; 
        }
        .message { 
            margin-bottom: 15px; 
            padding: 10px; 
            border-radius: 8px; 
        }
        .user-message { 
            background: #e3f2fd; 
            margin-left: 20px; 
        }
        .agent-message { 
            background: #f3e5f5; 
            margin-right: 20px; 
        }
        .system-message { 
            background: #e8f5e8; 
            text-align: center; 
            font-style: italic; 
        }
        .input-container { 
            display: flex; 
            gap: 10px; 
            margin-top: 20px; 
        }
        .message-input { 
            flex: 1; 
            padding: 15px; 
            border: 1px solid #ddd; 
            border-radius: 25px; 
            font-size: 16px; 
            outline: none; 
        }
        .send-button { 
            padding: 15px 30px; 
            background: #4CAF50; 
            color: white; 
            border: none; 
            border-radius: 25px; 
            cursor: pointer; 
            font-size: 16px; 
        }
        .send-button:hover { 
            background: #45a049; 
        }
        .agent-selector { 
            margin-bottom: 20px; 
        }
        .agent-selector select { 
            width: 100%; 
            padding: 10px; 
            border: 1px solid #ddd; 
            border-radius: 5px; 
        }
        .status { 
            background: #d4edda; 
            padding: 10px; 
            border-radius: 5px; 
            margin-bottom: 20px; 
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ü§ñ Simple MENTOR System</h1>
            <p>–ü—Ä–æ—Å—Ç–∞—è –º—É–ª—å—Ç–∏-–∞–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</p>
        </div>
        
        <div class="chat-container">
            <div class="chat-messages" id="chatMessages">
                <div class="message system-message">
                    <strong>Simple MENTOR System:</strong> –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!
                </div>
            </div>
            
            <div class="sidebar">
                <div class="status">
                    <h3>üìä –°—Ç–∞—Ç—É—Å</h3>
                    <p>–°–∏—Å—Ç–µ–º–∞: <span id="systemStatus">–ó–∞–≥—Ä—É–∑–∫–∞...</span></p>
                    <p>–ê–≥–µ–Ω—Ç–æ–≤: <span id="totalAgents">6</span></p>
                </div>
                
                <div class="agent-selector">
                    <label><strong>–í—ã–±–µ—Ä–∏—Ç–µ –∞–≥–µ–Ω—Ç–∞:</strong></label>
                    <select id="agentSelect">
                        <option value="general_assistant">–ü–æ–º–æ—â–Ω–∏–∫</option>
                        <option value="code_developer">–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫</option>
                        <option value="data_analyst">–ê–Ω–∞–ª–∏—Ç–∏–∫</option>
                        <option value="project_manager">–ú–µ–Ω–µ–¥–∂–µ—Ä</option>
                        <option value="designer">–î–∏–∑–∞–π–Ω–µ—Ä</option>
                        <option value="qa_tester">–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫</option>
                    </select>
                </div>
            </div>
        </div>
        
        <div class="input-container">
            <input type="text" id="messageInput" class="message-input" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." />
            <button onclick="sendMessage()" class="send-button">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
        </div>
    </div>

    <script>
        function addMessage(message, type, agent = '') {
            const chatMessages = document.getElementById('chatMessages');
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${type}-message`;
            
            if (type === 'user') {
                messageDiv.innerHTML = `<strong>–í—ã:</strong> ${message}`;
            } else {
                messageDiv.innerHTML = `<strong>${agent}:</strong> ${message}`;
            }
            
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
        
        async function sendMessage() {
            const input = document.getElementById('messageInput');
            const message = input.value.trim();
            const agentType = document.getElementById('agentSelect').value;
            
            if (message) {
                addMessage(message, 'user');
                
                try {
                    const response = await fetch('/api/chat', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            message: message,
                            agent_type: agentType
                        })
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        const result = data.response;
                        addMessage(result.response, 'agent', result.agent);
                    } else {
                        addMessage('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', 'agent', 'MENTOR System');
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞:', error);
                    addMessage('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', 'agent', 'System');
                }
                
                input.value = '';
            }
        }
        
        function updateStatus() {
            fetch('/api/status')
                .then(response => response.json())
                .then(data => {
                    document.getElementById('systemStatus').textContent = data.status;
                })
                .catch(error => console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error));
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter
        document.getElementById('messageInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        updateStatus();
        setInterval(updateStatus, 5000);
    </script>
</body>
</html>
        """

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ Simple MENTOR System...")
    
    server = HTTPServer(('0.0.0.0', 8080), SimpleMentorHandler)
    print("‚úÖ Simple MENTOR System –∑–∞–ø—É—â–µ–Ω–∞")
    print("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://0.0.0.0:8080")
    
    try:
        server.serve_forever()
    except KeyboardInterrupt:
        print("üõë Simple MENTOR System –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        server.shutdown()

if __name__ == "__main__":
    main()