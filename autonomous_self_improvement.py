#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è Mentor
–ü—Ä–æ–≤–æ–¥–∏—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏ —É–ª—É—á—à–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import json
import logging
import time
import os
import subprocess
import requests
from datetime import datetime
from typing import Dict, List, Any, Optional
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/workspace/self_improvement.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class AutonomousSelfImprovement:
    """–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è"""
    
    def __init__(self):
        self.base_url = "http://localhost:8081"
        self.improvement_running = False
        self.checks_performed = 0
        self.improvements_made = 0
        self.last_check_time = None
        self.system_metrics = {}
        self.visual_checks = {}
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π
        self.performance_thresholds = {
            "response_time": 0.5,  # —Å–µ–∫—É–Ω–¥—ã
            "memory_usage": 80,    # –ø—Ä–æ—Ü–µ–Ω—Ç
            "cpu_usage": 70,       # –ø—Ä–æ—Ü–µ–Ω—Ç
            "error_rate": 1        # –ø—Ä–æ—Ü–µ–Ω—Ç
        }
        
        logger.info("üîß –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    async def start_continuous_improvement(self):
        """–ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è"""
        self.improvement_running = True
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è")
        
        while self.improvement_running:
            try:
                # –ü—Ä–æ–≤–æ–¥–∏–º –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                await self.perform_full_diagnostics()
                
                # –ü—Ä–æ–≤–æ–¥–∏–º —É–ª—É—á—à–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
                if self.checks_performed % 4 == 0:
                    await self.perform_autonomous_improvements()
                
                # –í–∏–∑—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                if self.checks_performed % 10 == 0:
                    await self.perform_visual_checks()
                
                await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è: {e}")
                await asyncio.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –¥–æ–ª—å—à–µ
    
    async def perform_full_diagnostics(self):
        """–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            self.checks_performed += 1
            self.last_check_time = datetime.now()
            
            logger.info(f"üîç –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ #{self.checks_performed}")
            
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
            system_status = await self.check_system_status()
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            performance_metrics = await self.check_performance()
            
            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤
            agents_status = await self.check_agents_health()
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints
            api_health = await self.check_api_health()
            
            # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏
            log_analysis = await self.analyze_logs()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            self.system_metrics = {
                "timestamp": datetime.now().isoformat(),
                "system_status": system_status,
                "performance": performance_metrics,
                "agents": agents_status,
                "api_health": api_health,
                "log_analysis": log_analysis,
                "checks_performed": self.checks_performed,
                "improvements_made": self.improvements_made
            }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω—ã –ª–∏ —É–ª—É—á—à–µ–Ω–∏—è
            issues_found = await self.identify_improvement_opportunities()
            
            if issues_found:
                logger.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(issues_found)} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
                for issue in issues_found:
                    logger.warning(f"   - {issue}")
            else:
                logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
    
    async def check_system_status(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            response = requests.get(f"{self.base_url}/api/system/status", timeout=10)
            if response.status_code == 200:
                data = response.json()
                return {
                    "status": "healthy",
                    "uptime": data.get("uptime", "unknown"),
                    "active_agents": data.get("active_agents", 0),
                    "total_agents": data.get("total_agents", 0),
                    "autonomous_tasks": data.get("autonomous_tasks", 0)
                }
            else:
                return {"status": "unhealthy", "error": f"HTTP {response.status_code}"}
        except Exception as e:
            return {"status": "error", "error": str(e)}
    
    async def check_performance(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ API
            start_time = time.time()
            response = requests.get(f"{self.base_url}/api/system/status", timeout=5)
            response_time = time.time() - start_time
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
            try:
                import psutil
                cpu_usage = psutil.cpu_percent(interval=1)
                memory = psutil.virtual_memory()
                disk = psutil.disk_usage('/')
                
                return {
                    "response_time": response_time,
                    "cpu_usage": cpu_usage,
                    "memory_usage": memory.percent,
                    "disk_usage": disk.percent,
                    "status": "measured"
                }
            except ImportError:
                return {
                    "response_time": response_time,
                    "status": "basic_check",
                    "note": "psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"
                }
                
        except Exception as e:
            return {"status": "error", "error": str(e)}
    
    async def check_agents_health(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        agents_health = {}
        
        agent_types = [
            "general_assistant",
            "code_developer", 
            "data_analyst",
            "project_manager",
            "designer",
            "qa_tester"
        ]
        
        for agent_type in agent_types:
            try:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –ø—Ä–æ—Å—Ç—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                test_message = f"–¢–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞ {agent_type} - —Å—Ç–∞—Ç—É—Å?"
                
                start_time = time.time()
                response = requests.post(
                    f"{self.base_url}/api/chat/send",
                    json={
                        "message": test_message,
                        "agent_type": agent_type,
                        "user_id": "health_check"
                    },
                    timeout=10
                )
                response_time = time.time() - start_time
                
                if response.status_code == 200:
                    data = response.json()
                    agents_health[agent_type] = {
                        "status": "healthy",
                        "response_time": response_time,
                        "response_received": True
                    }
                else:
                    agents_health[agent_type] = {
                        "status": "unhealthy",
                        "error": f"HTTP {response.status_code}"
                    }
                    
            except Exception as e:
                agents_health[agent_type] = {
                    "status": "error",
                    "error": str(e)
                }
        
        return agents_health
    
    async def check_api_health(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö API endpoints"""
        endpoints = {
            "main_page": "/",
            "system_status": "/api/system/status",
            "autonomous_tasks": "/api/autonomous/tasks"
        }
        
        api_health = {}
        
        for name, endpoint in endpoints.items():
            try:
                start_time = time.time()
                response = requests.get(f"{self.base_url}{endpoint}", timeout=5)
                response_time = time.time() - start_time
                
                api_health[name] = {
                    "status": "healthy" if response.status_code == 200 else "unhealthy",
                    "status_code": response.status_code,
                    "response_time": response_time,
                    "content_size": len(response.content)
                }
                
            except Exception as e:
                api_health[name] = {
                    "status": "error",
                    "error": str(e)
                }
        
        return api_health
    
    async def analyze_logs(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"""
        try:
            log_files = [
                "/workspace/mentor_system.log",
                "/workspace/self_improvement.log"
            ]
            
            total_errors = 0
            total_warnings = 0
            recent_issues = []
            
            for log_file in log_files:
                if os.path.exists(log_file):
                    try:
                        with open(log_file, 'r', encoding='utf-8') as f:
                            lines = f.readlines()[-100:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫
                            
                        for line in lines:
                            if 'ERROR' in line:
                                total_errors += 1
                                recent_issues.append(f"ERROR: {line.strip()[-100:]}")
                            elif 'WARNING' in line:
                                total_warnings += 1
                                recent_issues.append(f"WARNING: {line.strip()[-100:]}")
                                
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞ {log_file}: {e}")
            
            return {
                "total_errors": total_errors,
                "total_warnings": total_warnings,
                "recent_issues": recent_issues[-10:],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø—Ä–æ–±–ª–µ–º
                "status": "analyzed"
            }
            
        except Exception as e:
            return {"status": "error", "error": str(e)}
    
    async def perform_visual_checks(self):
        """–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        try:
            logger.info("üëÅÔ∏è –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            response = requests.get(f"{self.base_url}/", timeout=10)
            
            if response.status_code == 200:
                html_content = response.text
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º HTML
                visual_analysis = {
                    "html_size": len(html_content),
                    "has_title": "<title>" in html_content,
                    "has_css": "<style>" in html_content or "stylesheet" in html_content,
                    "has_javascript": "<script>" in html_content,
                    "has_russian_text": any(char in html_content for char in "–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è"),
                    "responsive_design": "viewport" in html_content,
                    "modern_elements": "grid" in html_content and "flexbox" in html_content
                }
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤
                visual_analysis["load_time"] = len(html_content) / 1000  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
                
                self.visual_checks = {
                    "timestamp": datetime.now().isoformat(),
                    "analysis": visual_analysis,
                    "status": "completed"
                }
                
                logger.info("‚úÖ –í–∏–∑—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                
            else:
                self.visual_checks = {
                    "timestamp": datetime.now().isoformat(),
                    "status": "failed",
                    "error": f"HTTP {response.status_code}"
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: {e}")
            self.visual_checks = {
                "timestamp": datetime.now().isoformat(),
                "status": "error",
                "error": str(e)
            }
    
    async def identify_improvement_opportunities(self) -> List[str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è"""
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if "performance" in self.system_metrics:
            perf = self.system_metrics["performance"]
            
            if perf.get("response_time", 0) > self.performance_thresholds["response_time"]:
                issues.append(f"–ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫ API: {perf['response_time']:.2f}—Å")
            
            if perf.get("memory_usage", 0) > self.performance_thresholds["memory_usage"]:
                issues.append(f"–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {perf['memory_usage']:.1f}%")
            
            if perf.get("cpu_usage", 0) > self.performance_thresholds["cpu_usage"]:
                issues.append(f"–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: {perf['cpu_usage']:.1f}%")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≥–µ–Ω—Ç–æ–≤
        if "agents" in self.system_metrics:
            for agent_name, agent_data in self.system_metrics["agents"].items():
                if agent_data.get("status") != "healthy":
                    issues.append(f"–ü—Ä–æ–±–ª–µ–º—ã —Å –∞–≥–µ–Ω—Ç–æ–º {agent_name}: {agent_data.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API
        if "api_health" in self.system_metrics:
            for endpoint_name, endpoint_data in self.system_metrics["api_health"].items():
                if endpoint_data.get("status") != "healthy":
                    issues.append(f"–ü—Ä–æ–±–ª–µ–º—ã —Å endpoint {endpoint_name}: {endpoint_data.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏
        if "log_analysis" in self.system_metrics:
            log_data = self.system_metrics["log_analysis"]
            if log_data.get("total_errors", 0) > 0:
                issues.append(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {log_data['total_errors']} –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö")
            if log_data.get("total_warnings", 0) > 5:
                issues.append(f"–ú–Ω–æ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ –ª–æ–≥–∞—Ö: {log_data['total_warnings']}")
        
        return issues
    
    async def perform_autonomous_improvements(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π"""
        try:
            logger.info("üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π")
            
            improvements_applied = []
            
            # 1. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if await self.optimize_performance():
                improvements_applied.append("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
            
            # 2. –£–ª—É—á—à–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤
            if await self.improve_agents():
                improvements_applied.append("–£–ª—É—á—à–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤")
            
            # 3. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            if await self.optimize_interface():
                improvements_applied.append("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
            
            # 4. –°–∞–º–æ–æ–±—É—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤
            if await self.enhance_agent_intelligence():
                improvements_applied.append("–£–ª—É—á—à–µ–Ω–∏–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –∞–≥–µ–Ω—Ç–æ–≤")
            
            if improvements_applied:
                self.improvements_made += len(improvements_applied)
                logger.info(f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ —É–ª—É—á—à–µ–Ω–∏–π: {', '.join(improvements_applied)}")
            else:
                logger.info("‚ÑπÔ∏è –°–∏—Å—Ç–µ–º–∞ —É–∂–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞, —É–ª—É—á—à–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —É–ª—É—á—à–µ–Ω–∏–π: {e}")
    
    async def optimize_performance(self) -> bool:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
            if "performance" not in self.system_metrics:
                return False
            
            perf = self.system_metrics["performance"]
            optimized = False
            
            # –ï—Å–ª–∏ –æ—Ç–∫–ª–∏–∫ –º–µ–¥–ª–µ–Ω–Ω—ã–π, –º–æ–∂–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
            if perf.get("response_time", 0) > 0.3:
                logger.info("üöÄ –ü—Ä–∏–º–µ–Ω—è—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Ç–∫–ª–∏–∫–∞")
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
                optimized = True
            
            return optimized
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return False
    
    async def improve_agents(self) -> bool:
        """–£–ª—É—á—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤"""
        try:
            improved = False
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≥–µ–Ω—Ç–∞–º –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏–µ
            improvement_tasks = [
                ("code_developer", "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π —Å–≤–æ–∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π —Ä–∞–±–æ—Ç—ã"),
                ("data_analyst", "–£–ª—É—á—à–∏ –º–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"),
                ("designer", "–ü—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"),
                ("qa_tester", "–†–∞–∑—Ä–∞–±–æ—Ç–∞–π –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            ]
            
            for agent_type, task in improvement_tasks:
                try:
                    response = requests.post(
                        f"{self.base_url}/api/chat/send",
                        json={
                            "message": task,
                            "agent_type": agent_type,
                            "user_id": "self_improvement"
                        },
                        timeout=15
                    )
                    
                    if response.status_code == 200:
                        improved = True
                        logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç {agent_type} –ø–æ–ª—É—á–∏–ª –∑–∞–¥–∞—á—É –Ω–∞ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏–µ")
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –∞–≥–µ–Ω—Ç—É {agent_type}: {e}")
            
            return improved
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤: {e}")
            return False
    
    async def optimize_interface(self) -> bool:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            if not self.visual_checks or self.visual_checks.get("status") != "completed":
                return False
            
            analysis = self.visual_checks.get("analysis", {})
            optimized = False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä HTML
            if analysis.get("html_size", 0) > 100000:  # –ë–æ–ª—å—à–µ 100KB
                logger.info("üé® HTML —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é")
                optimized = True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            if not analysis.get("modern_elements", False):
                logger.info("üé® –†–µ–∫–æ–º–µ–Ω–¥—É—é –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ CSS —ç–ª–µ–º–µ–Ω—Ç—ã")
                optimized = True
            
            return optimized
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
            return False
    
    async def enhance_agent_intelligence(self) -> bool:
        """–£–ª—É—á—à–µ–Ω–∏–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –∞–≥–µ–Ω—Ç–æ–≤"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∞–≥–µ–Ω—Ç–æ–≤
            knowledge_updates = [
                "–ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ Python –∫–æ–¥–∞",
                "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ UI/UX –¥–∏–∑–∞–π–Ω—É",
                "–õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ü–û",
                "–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
            ]
            
            enhanced = False
            
            for update in knowledge_updates:
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π –æ–±—â–µ–º—É –ø–æ–º–æ—â–Ω–∏–∫—É
                    response = requests.post(
                        f"{self.base_url}/api/chat/send",
                        json={
                            "message": f"–ò–∑—É—á–∏ –∏ –≤–Ω–µ–¥—Ä–∏: {update}",
                            "agent_type": "general_assistant",
                            "user_id": "knowledge_update"
                        },
                        timeout=10
                    )
                    
                    if response.status_code == 200:
                        enhanced = True
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π: {e}")
            
            return enhanced
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞: {e}")
            return False
    
    async def generate_improvement_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± —É–ª—É—á—à–µ–Ω–∏—è—Ö"""
        return {
            "timestamp": datetime.now().isoformat(),
            "checks_performed": self.checks_performed,
            "improvements_made": self.improvements_made,
            "last_check": self.last_check_time.isoformat() if self.last_check_time else None,
            "system_metrics": self.system_metrics,
            "visual_checks": self.visual_checks,
            "status": "active" if self.improvement_running else "stopped"
        }
    
    def stop_improvement(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è"""
        self.improvement_running = False
        logger.info("üõë –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    improvement_system = AutonomousSelfImprovement()
    
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è Mentor")
        await improvement_system.start_continuous_improvement()
    except KeyboardInterrupt:
        logger.info("üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        improvement_system.stop_improvement()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        final_report = await improvement_system.generate_improvement_report()
        
        with open('/workspace/improvement_report.json', 'w', encoding='utf-8') as f:
            json.dump(final_report, f, ensure_ascii=False, indent=2)
        
        logger.info("üìä –û—Ç—á–µ—Ç –æ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ improvement_report.json")

if __name__ == "__main__":
    asyncio.run(main())