#!/usr/bin/env python3
# –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã –∞–≥–µ–Ω—Ç–æ–≤

import time
import subprocess
import requests
import json
from datetime import datetime

class AutonomousMonitor:
    def __init__(self):
        self.server_ip = '5.129.198.210'
        self.port = 8080
        self.check_interval = 30  # —Å–µ–∫—É–Ω–¥
        
    def check_system_health(self):
        try:
            response = requests.get(f'http://{self.server_ip}:{self.port}/api/system/status', timeout=10)
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ [{datetime.now()}] –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: {data.get('status', 'unknown')}")
                return True
            else:
                print(f"‚ùå [{datetime.now()}] –°–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: HTTP {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå [{datetime.now()}] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            return False
    
    def restart_system_if_needed(self):
        if not self.check_system_health():
            print(f"üîÑ [{datetime.now()}] –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã...")
            try:
                subprocess.run(['/home/mentor/manage_agents.sh', 'restart'], check=True)
                time.sleep(10)  # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
                if self.check_system_health():
                    print(f"‚úÖ [{datetime.now()}] –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞")
                else:
                    print(f"‚ùå [{datetime.now()}] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
            except Exception as e:
                print(f"‚ùå [{datetime.now()}] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")
    
    def run(self):
        print(f"üöÄ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –¥–ª—è {self.server_ip}:{self.port}")
        print(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.check_interval} —Å–µ–∫—É–Ω–¥")
        print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        try:
            while True:
                self.restart_system_if_needed()
                time.sleep(self.check_interval)
        except KeyboardInterrupt:
            print("\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    monitor = AutonomousMonitor()
    monitor.run()

