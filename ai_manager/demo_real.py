#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è AI Manager –ë–ï–ó –∑–∞–≥–ª—É—à–µ–∫ - —Ä–µ–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from models.task import Task, TaskPriority, TaskCategory
from models.agent import Agent, AgentType
from core.task_analyzer import TaskAnalyzer
from core.ai_manager import AIManager
from core.task_executor import TaskExecutor
from ai_providers.provider_manager import provider_manager
from monitoring.logger import logger


async def demo_real_ai_system():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã AI —Å–∏—Å—Ç–µ–º—ã"""
    print("ü§ñ AI Manager - –†–ï–ê–õ–¨–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ë–ï–ó –ó–ê–ì–õ–£–®–ï–ö")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...")
    task_analyzer = TaskAnalyzer()
    ai_manager = AIManager()
    task_executor = TaskExecutor(ai_manager)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
    await provider_manager.initialize_providers({
        "ollama_model": "llama2:7b",
        "hf_model": "microsoft/DialoGPT-medium"
    })
    
    health_status = await provider_manager.get_provider_health()
    print(f"‚úÖ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {len([p for p in health_status.values() if p['available']])} –¥–æ—Å—Ç—É–ø–Ω—ã")
    print(f"üéØ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {provider_manager.get_default_provider_name()}")
    print()
    
    return task_analyzer, ai_manager, task_executor


async def demo_real_text_processing(task_analyzer, ai_manager, task_executor):
    """–†–µ–∞–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞"""
    print("üìù –†–ï–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê")
    print("-" * 40)
    
    task = Task(
        description="–ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∏—Ä–µ",
        priority=TaskPriority.HIGH,
        category=TaskCategory.TEXT_PROCESSING
    )
    
    print(f"üìã –ó–∞–¥–∞—á–∞: {task.description}")
    
    # –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏
    analysis = await task_analyzer.analyze_task(task)
    print(f"üîç –ê–Ω–∞–ª–∏–∑: {analysis.get('category')} | –°–ª–æ–∂–Ω–æ—Å—Ç—å: {analysis.get('complexity')}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
    agent = await ai_manager.create_agent_for_task(analysis)
    print(f"ü§ñ –ê–≥–µ–Ω—Ç: {agent.name} ({agent.type})")
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    result = await task_executor.execute_task(task, agent)
    
    status_value = result['status'].value if hasattr(result['status'], 'value') else str(result['status'])
    print(f"‚ö° –°—Ç–∞—Ç—É—Å: {status_value}")
    print(f"‚è±Ô∏è –í—Ä–µ–º—è: {result.get('execution_time', 0):.2f}—Å")
    
    if result.get('result') and result.get('result').get('result'):
        response = result['result']['result']
        print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n{response[:300]}...")
        if len(response) > 300:
            print(f"[... –∏ –µ—â–µ {len(response) - 300} —Å–∏–º–≤–æ–ª–æ–≤]")
    
    print()


async def demo_real_code_generation(task_analyzer, ai_manager, task_executor):
    """–†–µ–∞–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞"""
    print("üíª –†–ï–ê–õ–¨–ù–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–û–î–ê")
    print("-" * 40)
    
    task = Task(
        description="–°–æ–∑–¥–∞–π —Ñ—É–Ω–∫—Ü–∏—é Python –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ø–∏—Å–∫–∞ —á–∏—Å–µ–ª –ø–æ —É–±—ã–≤–∞–Ω–∏—é",
        priority=TaskPriority.MEDIUM,
        category=TaskCategory.CODE_GENERATION
    )
    
    print(f"üìã –ó–∞–¥–∞—á–∞: {task.description}")
    
    # –ê–Ω–∞–ª–∏–∑ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    analysis = await task_analyzer.analyze_task(task)
    agent = await ai_manager.create_agent_for_task(analysis)
    result = await task_executor.execute_task(task, agent)
    
    status_value = result['status'].value if hasattr(result['status'], 'value') else str(result['status'])
    print(f"‚ö° –°—Ç–∞—Ç—É—Å: {status_value}")
    print(f"‚è±Ô∏è –í—Ä–µ–º—è: {result.get('execution_time', 0):.2f}—Å")
    
    if result.get('result') and result.get('result').get('result'):
        code = result['result']['result']
        print(f"üíª –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥:\n{code}")
    
    print()


async def demo_real_creative_writing(task_analyzer, ai_manager, task_executor):
    """–†–µ–∞–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–≤–æ—Ä—á–µ—Å–∫–æ–≥–æ –ø–∏—Å—å–º–∞"""
    print("üé® –†–ï–ê–õ–¨–ù–û–ï –¢–í–û–†–ß–ï–°–ö–û–ï –ü–ò–°–¨–ú–û")
    print("-" * 40)
    
    task = Task(
        description="–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –æ –≤–µ—Å–Ω–µ",
        priority=TaskPriority.LOW,
        category=TaskCategory.CREATIVE
    )
    
    print(f"üìã –ó–∞–¥–∞—á–∞: {task.description}")
    
    # –ê–Ω–∞–ª–∏–∑ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    analysis = await task_analyzer.analyze_task(task)
    agent = await ai_manager.create_agent_for_task(analysis)
    result = await task_executor.execute_task(task, agent)
    
    status_value = result['status'].value if hasattr(result['status'], 'value') else str(result['status'])
    print(f"‚ö° –°—Ç–∞—Ç—É—Å: {status_value}")
    print(f"‚è±Ô∏è –í—Ä–µ–º—è: {result.get('execution_time', 0):.2f}—Å")
    
    if result.get('result') and result.get('result').get('result'):
        poem = result['result']['result']
        print(f"üé≠ –°—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ:\n{poem}")
    
    print()


async def demo_real_translation(task_analyzer, ai_manager, task_executor):
    """–†–µ–∞–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞"""
    print("üåç –†–ï–ê–õ–¨–ù–´–ô –ü–ï–†–ï–í–û–î")
    print("-" * 40)
    
    task = Task(
        description="–ü–µ—Ä–µ–≤–µ–¥–∏ —Ñ—Ä–∞–∑—É 'Hello, AI Manager!' –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫",
        priority=TaskPriority.MEDIUM,
        category=TaskCategory.TRANSLATION
    )
    
    print(f"üìã –ó–∞–¥–∞—á–∞: {task.description}")
    
    # –ê–Ω–∞–ª–∏–∑ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    analysis = await task_analyzer.analyze_task(task)
    agent = await ai_manager.create_agent_for_task(analysis)
    result = await task_executor.execute_task(task, agent)
    
    status_value = result['status'].value if hasattr(result['status'], 'value') else str(result['status'])
    print(f"‚ö° –°—Ç–∞—Ç—É—Å: {status_value}")
    print(f"‚è±Ô∏è –í—Ä–µ–º—è: {result.get('execution_time', 0):.2f}—Å")
    
    if result.get('result') and result.get('result').get('result'):
        translation = result['result']['result']
        print(f"üåê –ü–µ—Ä–µ–≤–æ–¥: {translation}")
    
    print()


async def demo_real_provider_test():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    print("üî¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AI –ü–†–û–í–ê–ô–î–ï–†–û–í")
    print("-" * 40)
    
    prompt = "–û–±—ä—è—Å–Ω–∏, —á—Ç–æ —Ç–∞–∫–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –≤ –æ–¥–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏"
    print(f"üìù –ü—Ä–æ–º–ø—Ç: {prompt}")
    print()
    
    providers = ["local", "ollama", "huggingface"]
    
    for provider_name in providers:
        if provider_name in provider_manager.get_available_providers():
            print(f"ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {provider_name}...")
            
            start_time = asyncio.get_event_loop().time()
            response = await provider_manager.generate_response(prompt, provider_name=provider_name)
            end_time = asyncio.get_event_loop().time()
            
            if response.get("success"):
                result_text = response['result'][:100] + "..." if len(response['result']) > 100 else response['result']
                print(f"‚úÖ {provider_name}: {result_text}")
                print(f"‚è±Ô∏è –í—Ä–µ–º—è: {(end_time - start_time):.2f}—Å")
            else:
                print(f"‚ùå {provider_name}: {response.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        else:
            print(f"‚ö†Ô∏è {provider_name}: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        print()


async def demo_real_system_stats(ai_manager, task_executor):
    """–†–µ–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    print("üìä –†–ï–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´")
    print("-" * 40)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤
    agents = await ai_manager.get_active_agents()
    print(f"ü§ñ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤: {len(agents)}")
    
    for agent in agents[:3]:
        agent_type = agent.type if isinstance(agent.type, str) else agent.type.value
        print(f"   - {agent.name} ({agent_type})")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á
    task_stats = await task_executor.get_system_stats()
    print(f"üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á:")
    print(f"   - –ê–∫—Ç–∏–≤–Ω—ã—Ö: {task_stats.get('active_tasks', 0)}")
    print(f"   - –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {task_stats.get('completed_tasks', 0)}")
    print(f"   - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {task_stats.get('average_execution_time', 0):.2f}—Å")
    print(f"   - –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {task_stats.get('average_quality_score', 0):.2f}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    health_status = await provider_manager.get_provider_health()
    print(f"üîå AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã:")
    for name, status in health_status.items():
        status_icon = "‚úÖ" if status["available"] else "‚ùå"
        print(f"   - {status_icon} {name}: {status['status']}")
    
    print()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        print("üéØ –†–ï–ê–õ–¨–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø AI MANAGER")
        print("–ù–∏–∫–∞–∫–∏—Ö –∑–∞–≥–ª—É—à–µ–∫ - —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç–æ—è—â–∞—è —Ä–∞–±–æ—Ç–∞!")
        print()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        task_analyzer, ai_manager, task_executor = await demo_real_ai_system()
        
        # –†–µ–∞–ª—å–Ω—ã–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        await demo_real_text_processing(task_analyzer, ai_manager, task_executor)
        await demo_real_code_generation(task_analyzer, ai_manager, task_executor)
        await demo_real_creative_writing(task_analyzer, ai_manager, task_executor)
        await demo_real_translation(task_analyzer, ai_manager, task_executor)
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        await demo_real_provider_test()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        await demo_real_system_stats(ai_manager, task_executor)
        
        print("üéâ –†–ï–ê–õ–¨–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("\nüí° –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ AI –æ—Ç–≤–µ—Ç–∞–º–∏:")
        print("   - –ù–∏–∫–∞–∫–∏—Ö –∑–∞–≥–ª—É—à–µ–∫")
        print("   - –†–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        print("   - –ü–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å")
        print("\nüöÄ –ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        logger.logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
        await provider_manager.close_all()


if __name__ == "__main__":
    asyncio.run(main())


