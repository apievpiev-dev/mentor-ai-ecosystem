#!/usr/bin/env python3
"""
JARVIS Monitoring System
–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
"""

import os
import sys
import json
import time
import asyncio
import logging
import psutil
import requests
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from dataclasses import dataclass, asdict
import threading
import queue

logger = logging.getLogger(__name__)

@dataclass
class Metric:
    """–ú–µ—Ç—Ä–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    name: str
    value: float
    unit: str
    timestamp: str
    threshold_warning: float = 80.0
    threshold_critical: float = 90.0

@dataclass
class Alert:
    """–ê–ª–µ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã"""
    id: str
    type: str  # warning, critical, info
    message: str
    timestamp: str
    resolved: bool = False
    resolved_at: Optional[str] = None

class JarvisMonitor:
    """–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ JARVIS"""
    
    def __init__(self, core):
        self.core = core
        self.metrics_history = []
        self.active_alerts = []
        self.alert_history = []
        self.monitoring_enabled = True
        self.alert_queue = queue.Queue()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.start_monitoring()
        
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        # –ü–æ—Ç–æ–∫ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫
        metrics_thread = threading.Thread(
            target=self.run_metrics_collection,
            daemon=True
        )
        metrics_thread.start()
        
        # –ü–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤
        alerts_thread = threading.Thread(
            target=self.run_alert_processing,
            daemon=True
        )
        alerts_thread.start()
        
        # –ü–æ—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
        health_thread = threading.Thread(
            target=self.run_health_checks,
            daemon=True
        )
        health_thread.start()
        
        logger.info("üìä –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω–∞")
    
    def run_metrics_collection(self):
        """–°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã"""
        while self.monitoring_enabled:
            try:
                metrics = self.collect_system_metrics()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
                self.metrics_history.extend(metrics)
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
                if len(self.metrics_history) > 10000:
                    self.metrics_history = self.metrics_history[-5000:]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–∏ –∏ —Å–æ–∑–¥–∞–µ–º –∞–ª–µ—Ä—Ç—ã
                self.check_metric_thresholds(metrics)
                
                time.sleep(30)  # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫: {e}")
                time.sleep(60)
    
    def run_alert_processing(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
        while self.monitoring_enabled:
            try:
                if not self.alert_queue.empty():
                    alert = self.alert_queue.get()
                    self.process_alert(alert)
                
                time.sleep(5)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤: {e}")
                time.sleep(10)
    
    def run_health_checks(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        while self.monitoring_enabled:
            try:
                self.perform_health_checks()
                time.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
                time.sleep(60)
    
    def collect_system_metrics(self) -> List[Metric]:
        """–°–±–æ—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        metrics = []
        timestamp = datetime.now().isoformat()
        
        try:
            # CPU –º–µ—Ç—Ä–∏–∫–∏
            cpu_percent = psutil.cpu_percent(interval=1)
            metrics.append(Metric(
                name="cpu_usage",
                value=cpu_percent,
                unit="percent",
                timestamp=timestamp,
                threshold_warning=70,
                threshold_critical=85
            ))
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –ø–∞–º—è—Ç–∏
            memory = psutil.virtual_memory()
            metrics.append(Metric(
                name="memory_usage",
                value=memory.percent,
                unit="percent",
                timestamp=timestamp,
                threshold_warning=75,
                threshold_critical=90
            ))
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –¥–∏—Å–∫–∞
            disk = psutil.disk_usage('/')
            disk_percent = (disk.used / disk.total) * 100
            metrics.append(Metric(
                name="disk_usage",
                value=disk_percent,
                unit="percent",
                timestamp=timestamp,
                threshold_warning=80,
                threshold_critical=95
            ))
            
            # –ú–µ—Ç—Ä–∏–∫–∏ —Å–µ—Ç–∏
            network = psutil.net_io_counters()
            metrics.append(Metric(
                name="network_bytes_sent",
                value=network.bytes_sent,
                unit="bytes",
                timestamp=timestamp
            ))
            
            metrics.append(Metric(
                name="network_bytes_recv",
                value=network.bytes_recv,
                unit="bytes",
                timestamp=timestamp
            ))
            
            # –ú–µ—Ç—Ä–∏–∫–∏ JARVIS
            if self.core:
                metrics.append(Metric(
                    name="jarvis_active_tasks",
                    value=self.core.state.active_tasks,
                    unit="count",
                    timestamp=timestamp,
                    threshold_warning=8,
                    threshold_critical=12
                ))
                
                metrics.append(Metric(
                    name="jarvis_total_instances",
                    value=self.core.state.total_instances,
                    unit="count",
                    timestamp=timestamp
                ))
                
                metrics.append(Metric(
                    name="jarvis_performance_score",
                    value=self.core.state.performance_score * 100,
                    unit="percent",
                    timestamp=timestamp,
                    threshold_warning=60,
                    threshold_critical=40
                ))
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            processes = psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent'])
            jarvis_processes = [p for p in processes if 'jarvis' in p.info['name'].lower() or 'python' in p.info['name'].lower()]
            
            if jarvis_processes:
                total_cpu = sum(p.info['cpu_percent'] for p in jarvis_processes if p.info['cpu_percent'])
                total_memory = sum(p.info['memory_percent'] for p in jarvis_processes if p.info['memory_percent'])
                
                metrics.append(Metric(
                    name="jarvis_process_cpu",
                    value=total_cpu,
                    unit="percent",
                    timestamp=timestamp
                ))
                
                metrics.append(Metric(
                    name="jarvis_process_memory",
                    value=total_memory,
                    unit="percent",
                    timestamp=timestamp
                ))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫: {e}")
        
        return metrics
    
    def check_metric_thresholds(self, metrics: List[Metric]):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–æ–≤ –º–µ—Ç—Ä–∏–∫"""
        for metric in metrics:
            if metric.value > metric.threshold_critical:
                alert = Alert(
                    id=f"critical_{metric.name}_{int(time.time())}",
                    type="critical",
                    message=f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {metric.name}: {metric.value:.1f}{metric.unit}",
                    timestamp=datetime.now().isoformat()
                )
                self.alert_queue.put(alert)
                
            elif metric.value > metric.threshold_warning:
                alert = Alert(
                    id=f"warning_{metric.name}_{int(time.time())}",
                    type="warning",
                    message=f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {metric.name}: {metric.value:.1f}{metric.unit}",
                    timestamp=datetime.now().isoformat()
                )
                self.alert_queue.put(alert)
    
    def process_alert(self, alert: Alert):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–µ—Ä—Ç–∞"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã
            self.active_alerts.append(alert)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∞–ª–µ—Ä—Ç
            if alert.type == "critical":
                logger.critical(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–õ–ï–†–¢: {alert.message}")
            elif alert.type == "warning":
                logger.warning(f"‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: {alert.message}")
            else:
                logger.info(f"‚ÑπÔ∏è –ò–ù–§–û: {alert.message}")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤
            if alert.type == "critical":
                self.handle_critical_alert(alert)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
            if len(self.active_alerts) > 100:
                self.active_alerts = self.active_alerts[-50:]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.alert_history.append(alert)
            if len(self.alert_history) > 1000:
                self.alert_history = self.alert_history[-500:]
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–∞: {e}")
    
    def handle_critical_alert(self, alert: Alert):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        try:
            if "cpu_usage" in alert.message:
                # –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–µ CPU –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–ø–ª–∏–∫–∞—Ü–∏—é
                if self.core and self.core.replicator:
                    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏ –∏–∑-–∑–∞ –≤—ã—Å–æ–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ CPU")
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    import threading
                    def run_replication():
                        try:
                            import asyncio
                            asyncio.run(self.core.replicator.replicate())
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏: {e}")
                    threading.Thread(target=run_replication, daemon=True).start()
            
            elif "memory_usage" in alert.message:
                # –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–∞–º—è—Ç–∏ –æ—á–∏—â–∞–µ–º –∫—ç—à–∏
                logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–µ–π –∏–∑-–∑–∞ –≤—ã—Å–æ–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–º—è—Ç–∏")
                self.cleanup_memory()
            
            elif "disk_usage" in alert.message:
                # –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –¥–∏—Å–∫–∞ –æ—á–∏—â–∞–µ–º –ª–æ–≥–∏
                logger.info("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –∏–∑-–∑–∞ –Ω–µ—Ö–≤–∞—Ç–∫–∏ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ")
                self.cleanup_logs()
            
            elif "jarvis_performance_score" in alert.message:
                # –ü—Ä–∏ –Ω–∏–∑–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏–µ
                if self.core:
                    logger.info("üîß –ó–∞–ø—É—Å–∫ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è –∏–∑-–∑–∞ –Ω–∏–∑–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    import threading
                    def run_improvement():
                        try:
                            import asyncio
                            asyncio.run(self.core.self_improvement())
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è: {e}")
                    threading.Thread(target=run_improvement, daemon=True).start()
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–µ—Ä—Ç–∞: {e}")
    
    def cleanup_memory(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏"""
        try:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            if len(self.metrics_history) > 1000:
                self.metrics_history = self.metrics_history[-500:]
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∞–ª–µ—Ä—Ç—ã
            if len(self.alert_history) > 500:
                self.alert_history = self.alert_history[-250:]
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
            import gc
            gc.collect()
            
            logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏: {e}")
    
    def cleanup_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"""
        try:
            log_files = [
                "/home/mentor/jarvis.log",
                "/home/mentor/server.log",
                "/home/mentor/log.txt"
            ]
            
            for log_file in log_files:
                if os.path.exists(log_file):
                    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
                    backup_file = f"{log_file}.backup"
                    if os.path.getsize(log_file) > 50 * 1024 * 1024:  # 50MB
                        os.rename(log_file, backup_file)
                        logger.info(f"üì¶ –õ–æ–≥-—Ñ–∞–π–ª {log_file} –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω")
            
            logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤: {e}")
    
    def perform_health_checks(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –∑–¥–æ—Ä–æ–≤—å—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            try:
                response = requests.get("http://localhost:8080/api/status", timeout=10)
                if response.status_code != 200:
                    alert = Alert(
                        id=f"health_web_interface_{int(time.time())}",
                        type="warning",
                        message="–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                        timestamp=datetime.now().isoformat()
                    )
                    self.alert_queue.put(alert)
            except:
                alert = Alert(
                    id=f"health_web_interface_{int(time.time())}",
                    type="critical",
                    message="–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç",
                    timestamp=datetime.now().isoformat()
                )
                self.alert_queue.put(alert)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Docker
            try:
                if self.core and self.core.replicator:
                    docker_client = self.core.replicator.docker_client
                    docker_client.ping()
            except:
                alert = Alert(
                    id=f"health_docker_{int(time.time())}",
                    type="warning",
                    message="Docker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    timestamp=datetime.now().isoformat()
                )
                self.alert_queue.put(alert)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å SSH –∫–ª—é—á–µ–π
            ssh_keys_path = "/home/mentor/.ssh/"
            if not os.path.exists(ssh_keys_path):
                alert = Alert(
                    id=f"health_ssh_keys_{int(time.time())}",
                    type="warning",
                    message="SSH –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                    timestamp=datetime.now().isoformat()
                )
                self.alert_queue.put(alert)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
    
    def get_monitoring_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        current_metrics = {}
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        if self.metrics_history:
            latest_metrics = {}
            for metric in self.metrics_history[-50:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 –º–µ—Ç—Ä–∏–∫
                latest_metrics[metric.name] = {
                    "value": metric.value,
                    "unit": metric.unit,
                    "timestamp": metric.timestamp
                }
            current_metrics = latest_metrics
        
        return {
            "monitoring_enabled": self.monitoring_enabled,
            "total_metrics_collected": len(self.metrics_history),
            "active_alerts": len(self.active_alerts),
            "total_alerts": len(self.alert_history),
            "current_metrics": current_metrics,
            "active_alerts_list": [asdict(alert) for alert in self.active_alerts[-10:]],
            "recent_alerts": [asdict(alert) for alert in self.alert_history[-20:]]
        }
    
    def resolve_alert(self, alert_id: str):
        """–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞"""
        for alert in self.active_alerts:
            if alert.id == alert_id:
                alert.resolved = True
                alert.resolved_at = datetime.now().isoformat()
                self.active_alerts.remove(alert)
                logger.info(f"‚úÖ –ê–ª–µ—Ä—Ç {alert_id} —Ä–∞–∑—Ä–µ—à–µ–Ω")
                return True
        return False
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.monitoring_enabled = False
        logger.info("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")



JARVIS Monitoring System
–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
"""

import os
import sys
import json
import time
import asyncio
import logging
import psutil
import requests
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from dataclasses import dataclass, asdict
import threading
import queue

logger = logging.getLogger(__name__)

@dataclass
class Metric:
    """–ú–µ—Ç—Ä–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    name: str
    value: float
    unit: str
    timestamp: str
    threshold_warning: float = 80.0
    threshold_critical: float = 90.0

@dataclass
class Alert:
    """–ê–ª–µ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã"""
    id: str
    type: str  # warning, critical, info
    message: str
    timestamp: str
    resolved: bool = False
    resolved_at: Optional[str] = None

class JarvisMonitor:
    """–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ JARVIS"""
    
    def __init__(self, core):
        self.core = core
        self.metrics_history = []
        self.active_alerts = []
        self.alert_history = []
        self.monitoring_enabled = True
        self.alert_queue = queue.Queue()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.start_monitoring()
        
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        # –ü–æ—Ç–æ–∫ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫
        metrics_thread = threading.Thread(
            target=self.run_metrics_collection,
            daemon=True
        )
        metrics_thread.start()
        
        # –ü–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤
        alerts_thread = threading.Thread(
            target=self.run_alert_processing,
            daemon=True
        )
        alerts_thread.start()
        
        # –ü–æ—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
        health_thread = threading.Thread(
            target=self.run_health_checks,
            daemon=True
        )
        health_thread.start()
        
        logger.info("üìä –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω–∞")
    
    def run_metrics_collection(self):
        """–°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã"""
        while self.monitoring_enabled:
            try:
                metrics = self.collect_system_metrics()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
                self.metrics_history.extend(metrics)
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
                if len(self.metrics_history) > 10000:
                    self.metrics_history = self.metrics_history[-5000:]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–∏ –∏ —Å–æ–∑–¥–∞–µ–º –∞–ª–µ—Ä—Ç—ã
                self.check_metric_thresholds(metrics)
                
                time.sleep(30)  # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫: {e}")
                time.sleep(60)
    
    def run_alert_processing(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
        while self.monitoring_enabled:
            try:
                if not self.alert_queue.empty():
                    alert = self.alert_queue.get()
                    self.process_alert(alert)
                
                time.sleep(5)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤: {e}")
                time.sleep(10)
    
    def run_health_checks(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        while self.monitoring_enabled:
            try:
                self.perform_health_checks()
                time.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
                time.sleep(60)
    
    def collect_system_metrics(self) -> List[Metric]:
        """–°–±–æ—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        metrics = []
        timestamp = datetime.now().isoformat()
        
        try:
            # CPU –º–µ—Ç—Ä–∏–∫–∏
            cpu_percent = psutil.cpu_percent(interval=1)
            metrics.append(Metric(
                name="cpu_usage",
                value=cpu_percent,
                unit="percent",
                timestamp=timestamp,
                threshold_warning=70,
                threshold_critical=85
            ))
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –ø–∞–º—è—Ç–∏
            memory = psutil.virtual_memory()
            metrics.append(Metric(
                name="memory_usage",
                value=memory.percent,
                unit="percent",
                timestamp=timestamp,
                threshold_warning=75,
                threshold_critical=90
            ))
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –¥–∏—Å–∫–∞
            disk = psutil.disk_usage('/')
            disk_percent = (disk.used / disk.total) * 100
            metrics.append(Metric(
                name="disk_usage",
                value=disk_percent,
                unit="percent",
                timestamp=timestamp,
                threshold_warning=80,
                threshold_critical=95
            ))
            
            # –ú–µ—Ç—Ä–∏–∫–∏ —Å–µ—Ç–∏
            network = psutil.net_io_counters()
            metrics.append(Metric(
                name="network_bytes_sent",
                value=network.bytes_sent,
                unit="bytes",
                timestamp=timestamp
            ))
            
            metrics.append(Metric(
                name="network_bytes_recv",
                value=network.bytes_recv,
                unit="bytes",
                timestamp=timestamp
            ))
            
            # –ú–µ—Ç—Ä–∏–∫–∏ JARVIS
            if self.core:
                metrics.append(Metric(
                    name="jarvis_active_tasks",
                    value=self.core.state.active_tasks,
                    unit="count",
                    timestamp=timestamp,
                    threshold_warning=8,
                    threshold_critical=12
                ))
                
                metrics.append(Metric(
                    name="jarvis_total_instances",
                    value=self.core.state.total_instances,
                    unit="count",
                    timestamp=timestamp
                ))
                
                metrics.append(Metric(
                    name="jarvis_performance_score",
                    value=self.core.state.performance_score * 100,
                    unit="percent",
                    timestamp=timestamp,
                    threshold_warning=60,
                    threshold_critical=40
                ))
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            processes = psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent'])
            jarvis_processes = [p for p in processes if 'jarvis' in p.info['name'].lower() or 'python' in p.info['name'].lower()]
            
            if jarvis_processes:
                total_cpu = sum(p.info['cpu_percent'] for p in jarvis_processes if p.info['cpu_percent'])
                total_memory = sum(p.info['memory_percent'] for p in jarvis_processes if p.info['memory_percent'])
                
                metrics.append(Metric(
                    name="jarvis_process_cpu",
                    value=total_cpu,
                    unit="percent",
                    timestamp=timestamp
                ))
                
                metrics.append(Metric(
                    name="jarvis_process_memory",
                    value=total_memory,
                    unit="percent",
                    timestamp=timestamp
                ))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫: {e}")
        
        return metrics
    
    def check_metric_thresholds(self, metrics: List[Metric]):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–æ–≤ –º–µ—Ç—Ä–∏–∫"""
        for metric in metrics:
            if metric.value > metric.threshold_critical:
                alert = Alert(
                    id=f"critical_{metric.name}_{int(time.time())}",
                    type="critical",
                    message=f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {metric.name}: {metric.value:.1f}{metric.unit}",
                    timestamp=datetime.now().isoformat()
                )
                self.alert_queue.put(alert)
                
            elif metric.value > metric.threshold_warning:
                alert = Alert(
                    id=f"warning_{metric.name}_{int(time.time())}",
                    type="warning",
                    message=f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {metric.name}: {metric.value:.1f}{metric.unit}",
                    timestamp=datetime.now().isoformat()
                )
                self.alert_queue.put(alert)
    
    def process_alert(self, alert: Alert):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–µ—Ä—Ç–∞"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã
            self.active_alerts.append(alert)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∞–ª–µ—Ä—Ç
            if alert.type == "critical":
                logger.critical(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–õ–ï–†–¢: {alert.message}")
            elif alert.type == "warning":
                logger.warning(f"‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: {alert.message}")
            else:
                logger.info(f"‚ÑπÔ∏è –ò–ù–§–û: {alert.message}")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤
            if alert.type == "critical":
                self.handle_critical_alert(alert)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
            if len(self.active_alerts) > 100:
                self.active_alerts = self.active_alerts[-50:]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.alert_history.append(alert)
            if len(self.alert_history) > 1000:
                self.alert_history = self.alert_history[-500:]
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–∞: {e}")
    
    def handle_critical_alert(self, alert: Alert):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        try:
            if "cpu_usage" in alert.message:
                # –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–µ CPU –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–ø–ª–∏–∫–∞—Ü–∏—é
                if self.core and self.core.replicator:
                    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏ –∏–∑-–∑–∞ –≤—ã—Å–æ–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ CPU")
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    import threading
                    def run_replication():
                        try:
                            import asyncio
                            asyncio.run(self.core.replicator.replicate())
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏: {e}")
                    threading.Thread(target=run_replication, daemon=True).start()
            
            elif "memory_usage" in alert.message:
                # –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–∞–º—è—Ç–∏ –æ—á–∏—â–∞–µ–º –∫—ç—à–∏
                logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–µ–π –∏–∑-–∑–∞ –≤—ã—Å–æ–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–º—è—Ç–∏")
                self.cleanup_memory()
            
            elif "disk_usage" in alert.message:
                # –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –¥–∏—Å–∫–∞ –æ—á–∏—â–∞–µ–º –ª–æ–≥–∏
                logger.info("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –∏–∑-–∑–∞ –Ω–µ—Ö–≤–∞—Ç–∫–∏ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ")
                self.cleanup_logs()
            
            elif "jarvis_performance_score" in alert.message:
                # –ü—Ä–∏ –Ω–∏–∑–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏–µ
                if self.core:
                    logger.info("üîß –ó–∞–ø—É—Å–∫ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è –∏–∑-–∑–∞ –Ω–∏–∑–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    import threading
                    def run_improvement():
                        try:
                            import asyncio
                            asyncio.run(self.core.self_improvement())
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è: {e}")
                    threading.Thread(target=run_improvement, daemon=True).start()
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–µ—Ä—Ç–∞: {e}")
    
    def cleanup_memory(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏"""
        try:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            if len(self.metrics_history) > 1000:
                self.metrics_history = self.metrics_history[-500:]
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∞–ª–µ—Ä—Ç—ã
            if len(self.alert_history) > 500:
                self.alert_history = self.alert_history[-250:]
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
            import gc
            gc.collect()
            
            logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏: {e}")
    
    def cleanup_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"""
        try:
            log_files = [
                "/home/mentor/jarvis.log",
                "/home/mentor/server.log",
                "/home/mentor/log.txt"
            ]
            
            for log_file in log_files:
                if os.path.exists(log_file):
                    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
                    backup_file = f"{log_file}.backup"
                    if os.path.getsize(log_file) > 50 * 1024 * 1024:  # 50MB
                        os.rename(log_file, backup_file)
                        logger.info(f"üì¶ –õ–æ–≥-—Ñ–∞–π–ª {log_file} –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω")
            
            logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤: {e}")
    
    def perform_health_checks(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –∑–¥–æ—Ä–æ–≤—å—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            try:
                response = requests.get("http://localhost:8080/api/status", timeout=10)
                if response.status_code != 200:
                    alert = Alert(
                        id=f"health_web_interface_{int(time.time())}",
                        type="warning",
                        message="–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                        timestamp=datetime.now().isoformat()
                    )
                    self.alert_queue.put(alert)
            except:
                alert = Alert(
                    id=f"health_web_interface_{int(time.time())}",
                    type="critical",
                    message="–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç",
                    timestamp=datetime.now().isoformat()
                )
                self.alert_queue.put(alert)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Docker
            try:
                if self.core and self.core.replicator:
                    docker_client = self.core.replicator.docker_client
                    docker_client.ping()
            except:
                alert = Alert(
                    id=f"health_docker_{int(time.time())}",
                    type="warning",
                    message="Docker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    timestamp=datetime.now().isoformat()
                )
                self.alert_queue.put(alert)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å SSH –∫–ª—é—á–µ–π
            ssh_keys_path = "/home/mentor/.ssh/"
            if not os.path.exists(ssh_keys_path):
                alert = Alert(
                    id=f"health_ssh_keys_{int(time.time())}",
                    type="warning",
                    message="SSH –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                    timestamp=datetime.now().isoformat()
                )
                self.alert_queue.put(alert)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
    
    def get_monitoring_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        current_metrics = {}
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        if self.metrics_history:
            latest_metrics = {}
            for metric in self.metrics_history[-50:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 –º–µ—Ç—Ä–∏–∫
                latest_metrics[metric.name] = {
                    "value": metric.value,
                    "unit": metric.unit,
                    "timestamp": metric.timestamp
                }
            current_metrics = latest_metrics
        
        return {
            "monitoring_enabled": self.monitoring_enabled,
            "total_metrics_collected": len(self.metrics_history),
            "active_alerts": len(self.active_alerts),
            "total_alerts": len(self.alert_history),
            "current_metrics": current_metrics,
            "active_alerts_list": [asdict(alert) for alert in self.active_alerts[-10:]],
            "recent_alerts": [asdict(alert) for alert in self.alert_history[-20:]]
        }
    
    def resolve_alert(self, alert_id: str):
        """–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞"""
        for alert in self.active_alerts:
            if alert.id == alert_id:
                alert.resolved = True
                alert.resolved_at = datetime.now().isoformat()
                self.active_alerts.remove(alert)
                logger.info(f"‚úÖ –ê–ª–µ—Ä—Ç {alert_id} —Ä–∞–∑—Ä–µ—à–µ–Ω")
                return True
        return False
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.monitoring_enabled = False
        logger.info("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")