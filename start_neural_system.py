#!/usr/bin/env python3
"""
Start Neural System - –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π
–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
"""

import asyncio
import logging
import signal
import sys
import time
import subprocess
import os
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/workspace/neural_system.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class NeuralSystemLauncher:
    """–ó–∞–ø—É—Å–∫–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π"""
    
    def __init__(self):
        self.processes = {}
        self.running = False
        self.base_path = Path("/workspace")
        
    async def check_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –º–æ–¥—É–ª–∏
        required_modules = [
            "fastapi", "uvicorn", "aiohttp", "asyncio", 
            "requests", "numpy", "pandas", "matplotlib"
        ]
        
        missing_modules = []
        for module in required_modules:
            try:
                __import__(module)
            except ImportError:
                missing_modules.append(module)
        
        if missing_modules:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–æ–¥—É–ª–∏: {', '.join(missing_modules)}")
            logger.info("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π: pip install " + " ".join(missing_modules))
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Ollama
        try:
            result = subprocess.run(['ollama', '--version'], capture_output=True, text=True)
            if result.returncode == 0:
                logger.info("‚úÖ Ollama –Ω–∞–π–¥–µ–Ω")
            else:
                logger.warning("‚ö†Ô∏è Ollama –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ —Å–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏")
        except FileNotFoundError:
            logger.warning("‚ö†Ô∏è Ollama –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ —Å–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏")
        
        logger.info("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
        return True
    
    async def start_ollama(self):
        """–ó–∞–ø—É—Å–∫ Ollama"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ Ollama...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ Ollama
            result = subprocess.run(['pgrep', '-f', 'ollama'], capture_output=True, text=True)
            if result.returncode == 0:
                logger.info("‚úÖ Ollama —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                return True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Ollama
            process = subprocess.Popen(
                ['ollama', 'serve'],
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL,
                preexec_fn=os.setsid
            )
            
            self.processes['ollama'] = process
            logger.info(f"‚úÖ Ollama –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
            await asyncio.sleep(5)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            import requests
            try:
                response = requests.get("http://localhost:11434/api/tags", timeout=5)
                if response.status_code == 200:
                    logger.info("‚úÖ Ollama –¥–æ—Å—Ç—É–ø–µ–Ω")
                    return True
                else:
                    logger.warning("‚ö†Ô∏è Ollama –∑–∞–ø—É—â–µ–Ω, –Ω–æ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    return False
            except:
                logger.warning("‚ö†Ô∏è Ollama –∑–∞–ø—É—â–µ–Ω, –Ω–æ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Ollama: {e}")
            return False
    
    async def start_unified_interface(self):
        """–ó–∞–ø—É—Å–∫ –µ–¥–∏–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ Unified Neural Interface...")
            
            process = subprocess.Popen(
                [sys.executable, str(self.base_path / "unified_neural_interface.py")],
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL,
                preexec_fn=os.setsid
            )
            
            self.processes['unified_interface'] = process
            logger.info(f"‚úÖ Unified Neural Interface –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
            await asyncio.sleep(10)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            import requests
            try:
                response = requests.get("http://localhost:8081/api/system/status", timeout=10)
                if response.status_code == 200:
                    logger.info("‚úÖ Unified Neural Interface –¥–æ—Å—Ç—É–ø–µ–Ω")
                    return True
                else:
                    logger.warning("‚ö†Ô∏è Unified Neural Interface –∑–∞–ø—É—â–µ–Ω, –Ω–æ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    return False
            except:
                logger.warning("‚ö†Ô∏è Unified Neural Interface –∑–∞–ø—É—â–µ–Ω, –Ω–æ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Unified Neural Interface: {e}")
            return False
    
    async def start_autonomous_system(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ Autonomous Neural System...")
            
            process = subprocess.Popen(
                [sys.executable, str(self.base_path / "autonomous_neural_system.py")],
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL,
                preexec_fn=os.setsid
            )
            
            self.processes['autonomous_system'] = process
            logger.info(f"‚úÖ Autonomous Neural System –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
            await asyncio.sleep(5)
            
            logger.info("‚úÖ Autonomous Neural System –∑–∞–ø—É—â–µ–Ω")
            return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Autonomous Neural System: {e}")
            return False
    
    async def monitor_processes(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        while self.running:
            try:
                for name, process in self.processes.items():
                    if process.poll() is not None:
                        logger.warning(f"‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å {name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ (PID: {process.pid})")
                        
                        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
                        if name == 'ollama':
                            await self.start_ollama()
                        elif name == 'unified_interface':
                            await self.start_unified_interface()
                        elif name == 'autonomous_system':
                            await self.start_autonomous_system()
                
                await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
                await asyncio.sleep(30)
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Neural System...")
        self.running = True
        
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            if not await self.check_dependencies():
                logger.error("‚ùå –ù–µ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                return False
            
            # 2. –ó–∞–ø—É—Å–∫–∞–µ–º Ollama
            await self.start_ollama()
            
            # 3. –ó–∞–ø—É—Å–∫–∞–µ–º Unified Neural Interface
            if not await self.start_unified_interface():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Unified Neural Interface")
                return False
            
            # 4. –ó–∞–ø—É—Å–∫–∞–µ–º Autonomous Neural System
            await self.start_autonomous_system()
            
            logger.info("‚úÖ Neural System –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—â–µ–Ω–∞!")
            logger.info("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:8081")
            logger.info("üìä API —Å—Ç–∞—Ç—É—Å–∞: http://localhost:8081/api/system/status")
            logger.info("ü§ñ –°–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤: http://localhost:8081/api/agents")
            
            # 5. –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            await self.monitor_processes()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
            await self.stop()
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Neural System...")
        self.running = False
        
        for name, process in self.processes.items():
            try:
                if process.poll() is None:
                    logger.info(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ {name} (PID: {process.pid})")
                    os.killpg(os.getpgid(process.pid), signal.SIGTERM)
                    process.wait(timeout=10)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ {name}: {e}")
        
        self.processes.clear()
        logger.info("‚úÖ Neural System –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    asyncio.create_task(launcher.stop())

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global launcher
    launcher = NeuralSystemLauncher()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        await launcher.start()
    except KeyboardInterrupt:
        logger.info("üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await launcher.stop()

if __name__ == "__main__":
    print("üß† Neural System Launcher")
    print("=" * 50)
    print("–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π...")
    print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("=" * 50)
    
    asyncio.run(main())