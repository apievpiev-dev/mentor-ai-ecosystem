#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö AI-–∞–≥–µ–Ω—Ç–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω—É—é —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
"""

import os
import sys
import subprocess
import logging
import time
import json
import requests
from datetime import datetime
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/home/mentor/deployment.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class ServerDeployment:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
    
    def __init__(self):
        self.project_dir = Path("/home/mentor")
        self.service_name = "multi-agent-system"
        self.port = 8080
        self.systemd_service_file = f"/etc/systemd/system/{self.service_name}.service"
        
    def check_system_requirements(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
        
        requirements = {
            "python3": self._check_command("python3 --version"),
            "pip": self._check_command("pip --version"),
            "systemd": self._check_command("systemctl --version"),
            "nginx": self._check_command("nginx -v"),
            "ufw": self._check_command("ufw --version")
        }
        
        for req, status in requirements.items():
            if status:
                logger.info(f"‚úÖ {req}: OK")
            else:
                logger.warning(f"‚ö†Ô∏è {req}: –ù–ï –ù–ê–ô–î–ï–ù")
        
        return all(requirements.values())
    
    def _check_command(self, command):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã"""
        try:
            result = subprocess.run(command.split(), capture_output=True, text=True)
            return result.returncode == 0
        except:
            return False
    
    def setup_environment(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        venv_path = self.project_dir / "multi_agent_env"
        if not venv_path.exists():
            logger.info("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
            subprocess.run(["python3", "-m", "venv", str(venv_path)], check=True)
        
        # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        pip_path = venv_path / "bin" / "pip"
        requirements_file = self.project_dir / "requirements_multi_agent.txt"
        
        if requirements_file.exists():
            logger.info("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
            subprocess.run([str(pip_path), "install", "-r", str(requirements_file)], check=True)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        additional_packages = [
            "selenium",
            "pillow",
            "requests",
            "psutil",
            "schedule",
            "crontab"
        ]
        
        for package in additional_packages:
            try:
                subprocess.run([str(pip_path), "install", package], check=True)
                logger.info(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {package}")
            except subprocess.CalledProcessError:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {package}")
    
    def create_systemd_service(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã"""
        logger.info("üîß –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞...")
        
        service_content = f"""[Unit]
Description=Multi-Agent AI System
After=network.target
Wants=network.target

[Service]
Type=simple
User=mentor
Group=mentor
WorkingDirectory={self.project_dir}
Environment=PATH={self.project_dir}/multi_agent_env/bin
ExecStart={self.project_dir}/multi_agent_env/bin/python {self.project_dir}/start_multi_agent_system.py
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ —Å–±–æ—è—Ö
Restart=on-failure
RestartSec=5
StartLimitInterval=60s
StartLimitBurst=3

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
MemoryLimit=2G
CPUQuota=200%

[Install]
WantedBy=multi-user.target
"""
        
        try:
            with open(self.systemd_service_file, 'w') as f:
                f.write(service_content)
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ systemd –∏ –≤–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
            subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
            subprocess.run(["sudo", "systemctl", "enable", self.service_name], check=True)
            
            logger.info("‚úÖ Systemd —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω –∏ –≤–∫–ª—é—á–µ–Ω")
            return True
            
        except subprocess.CalledProcessError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è systemd —Å–µ—Ä–≤–∏—Å–∞: {e}")
            return False
    
    def setup_nginx_proxy(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx –∫–∞–∫ –ø—Ä–æ–∫—Å–∏"""
        logger.info("üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx –ø—Ä–æ–∫—Å–∏...")
        
        nginx_config = f"""
server {{
    listen 80;
    server_name _;
    
    location / {{
        proxy_pass http://127.0.0.1:{self.port};
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 86400;
    }}
    
    # WebSocket –ø–æ–¥–¥–µ—Ä–∂–∫–∞
    location /ws {{
        proxy_pass http://127.0.0.1:{self.port};
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }}
}}
"""
        
        try:
            config_file = "/etc/nginx/sites-available/multi-agent-system"
            with open(config_file, 'w') as f:
                f.write(nginx_config)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–∏
            subprocess.run(["sudo", "ln", "-sf", config_file, "/etc/nginx/sites-enabled/"], check=True)
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ —Å–∞–π—Ç–∞
            default_site = "/etc/nginx/sites-enabled/default"
            if os.path.exists(default_site):
                subprocess.run(["sudo", "rm", default_site], check=True)
            
            # –¢–µ—Å—Ç –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ Nginx
            subprocess.run(["sudo", "nginx", "-t"], check=True)
            subprocess.run(["sudo", "systemctl", "reload", "nginx"], check=True)
            
            logger.info("‚úÖ Nginx –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–∞–∫ –ø—Ä–æ–∫—Å–∏")
            return True
            
        except subprocess.CalledProcessError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Nginx: {e}")
            return False
    
    def setup_firewall(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞"""
        logger.info("üî• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞...")
        
        try:
            # –í–∫–ª—é—á–µ–Ω–∏–µ UFW
            subprocess.run(["sudo", "ufw", "--force", "enable"], check=True)
            
            # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ SSH
            subprocess.run(["sudo", "ufw", "allow", "ssh"], check=True)
            
            # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ HTTP –∏ HTTPS
            subprocess.run(["sudo", "ufw", "allow", "80/tcp"], check=True)
            subprocess.run(["sudo", "ufw", "allow", "443/tcp"], check=True)
            
            # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—Ä—Ç—É —Å–∏—Å—Ç–µ–º—ã
            subprocess.run(["sudo", "ufw", "allow", "from", "127.0.0.1", "to", "any", "port", str(self.port)], check=True)
            
            logger.info("‚úÖ –§–∞–π—Ä–≤–æ–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return True
            
        except subprocess.CalledProcessError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π—Ä–≤–æ–ª–∞: {e}")
            return False
    
    def setup_monitoring(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        monitor_script = self.project_dir / "monitor_system.py"
        monitor_content = '''#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö AI-–∞–≥–µ–Ω—Ç–æ–≤
"""

import requests
import time
import logging
import subprocess
from datetime import datetime

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def check_system_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    try:
        response = requests.get("http://localhost:8080/api/system/status", timeout=5)
        if response.status_code == 200:
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
            return True
        else:
            logger.warning(f"‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º {response.status_code}")
            return False
    except Exception as e:
        logger.error(f"‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
        return False

def restart_system():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        subprocess.run(["sudo", "systemctl", "restart", "multi-agent-system"], check=True)
        logger.info("üîÑ –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    consecutive_failures = 0
    max_failures = 3
    
    while True:
        if check_system_health():
            consecutive_failures = 0
        else:
            consecutive_failures += 1
            if consecutive_failures >= max_failures:
                logger.warning("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–±–æ–µ–≤, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã...")
                restart_system()
                consecutive_failures = 0
        
        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

if __name__ == "__main__":
    main()
'''
        
        with open(monitor_script, 'w') as f:
            f.write(monitor_content)
        
        # –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
        os.chmod(monitor_script, 0o755)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        monitor_service = f"""[Unit]
Description=Multi-Agent System Monitor
After=multi-agent-system.service

[Service]
Type=simple
User=mentor
Group=mentor
WorkingDirectory={self.project_dir}
ExecStart={self.project_dir}/monitor_system.py
Restart=always
RestartSec=30

[Install]
WantedBy=multi-user.target
"""
        
        with open("/etc/systemd/system/multi-agent-monitor.service", 'w') as f:
            f.write(monitor_service)
        
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "enable", "multi-agent-monitor"], check=True)
        
        logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    def setup_autonomous_features(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        logger.info("ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è
        autonomous_script = self.project_dir / "autonomous_improvement.py"
        autonomous_content = '''#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–æ–≤
"""

import asyncio
import requests
import logging
from datetime import datetime
from vision_agent import vision_agent

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def autonomous_improvement_cycle():
    """–¶–∏–∫–ª –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Vision Agent
        await vision_agent.initialize()
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        logger.info("üîç –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...")
        improvements = await vision_agent.suggest_improvements()
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º—É
        if improvements and not improvements.get("error"):
            logger.info("üí° –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ API
            for suggestion in improvements.get("ui_improvements", []):
                await send_improvement_suggestion(suggestion)
            
            for issue in improvements.get("ui_issues", []):
                await report_issue(issue)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
        health_check = await vision_agent.monitor_system_health()
        if health_check.get("web_interface", {}).get("status") != "online":
            logger.warning("üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º")
            await request_system_restart()
        
        await vision_agent.cleanup()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è: {e}")

async def send_improvement_suggestion(suggestion):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"""
    try:
        response = requests.post(
            "http://localhost:8080/api/chat/send",
            json={
                "message": f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é: {suggestion}",
                "user_id": "autonomous_agent"
            },
            timeout=10
        )
        if response.status_code == 200:
            logger.info(f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {suggestion}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}")

async def report_issue(issue):
    """–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ"""
    try:
        response = requests.post(
            "http://localhost:8080/api/chat/send",
            json={
                "message": f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞: {issue}",
                "user_id": "autonomous_agent"
            },
            timeout=10
        )
        if response.status_code == 200:
            logger.info(f"‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞: {issue}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–±–ª–µ–º—ã: {e}")

async def request_system_restart():
    """–ó–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    logger.warning("üîÑ –ó–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞

async def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª"""
    while True:
        await autonomous_improvement_cycle()
        await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å

if __name__ == "__main__":
    asyncio.run(main())
'''
        
        with open(autonomous_script, 'w') as f:
            f.write(autonomous_content)
        
        os.chmod(autonomous_script, 0o755)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è
        autonomous_service = f"""[Unit]
Description=Autonomous System Improvement
After=multi-agent-system.service

[Service]
Type=simple
User=mentor
Group=mentor
WorkingDirectory={self.project_dir}
Environment=PATH={self.project_dir}/multi_agent_env/bin
ExecStart={self.project_dir}/multi_agent_env/bin/python {self.project_dir}/autonomous_improvement.py
Restart=always
RestartSec=300

[Install]
WantedBy=multi-user.target
"""
        
        with open("/etc/systemd/system/autonomous-improvement.service", 'w') as f:
            f.write(autonomous_service)
        
        subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
        subprocess.run(["sudo", "systemctl", "enable", "autonomous-improvement"], check=True)
        
        logger.info("‚úÖ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    def start_services(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        services = [
            "multi-agent-system",
            "multi-agent-monitor", 
            "autonomous-improvement",
            "nginx"
        ]
        
        for service in services:
            try:
                subprocess.run(["sudo", "systemctl", "start", service], check=True)
                subprocess.run(["sudo", "systemctl", "enable", service], check=True)
                logger.info(f"‚úÖ –°–µ—Ä–≤–∏—Å {service} –∑–∞–ø—É—â–µ–Ω")
            except subprocess.CalledProcessError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ {service}: {e}")
    
    def verify_deployment(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
        max_attempts = 30
        for attempt in range(max_attempts):
            try:
                response = requests.get(f"http://localhost:{self.port}/api/system/status", timeout=5)
                if response.status_code == 200:
                    logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    return True
            except:
                pass
            
            time.sleep(2)
            logger.info(f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}...")
        
        logger.error("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è")
        return False
    
    def deploy(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        logger.info("üöÄ –ù–∞—á–∞–ª–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö AI-–∞–≥–µ–Ω—Ç–æ–≤...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
            if not self.check_system_requirements():
                logger.error("‚ùå –ù–µ –≤—Å–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
                return False
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            self.setup_environment()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞
            if not self.create_systemd_service():
                return False
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx
            if not self.setup_nginx_proxy():
                return False
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞
            if not self.setup_firewall():
                return False
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            self.setup_monitoring()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
            self.setup_autonomous_features()
            
            # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
            self.start_services()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
            if self.verify_deployment():
                logger.info("üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                logger.info(f"üåê –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: http://your-server-ip")
                logger.info("ü§ñ –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ –¥–∞–∂–µ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞")
                return True
            else:
                logger.error("‚ùå –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: {e}")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    deployment = ServerDeployment()
    success = deployment.deploy()
    
    if success:
        print("\nüéâ –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("üåê –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: http://your-server-ip")
        print("ü§ñ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ")
        print("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω")
        print("üîÑ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã")
    else:
        print("\n‚ùå –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ò–õ–û–°–¨ –° –û–®–ò–ë–ö–ê–ú–ò")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: /home/mentor/deployment.log")
        sys.exit(1)

if __name__ == "__main__":
    main()

