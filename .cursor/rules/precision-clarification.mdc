---
description: Правила точности и уточнения запросов
globs: ["**/*"]
alwaysApply: true
---

# Precision & Clarification Rules

## Request Clarification Principles
- **Always Clarify**: Never assume - always ask for clarification when needed
- **Maximum Precision**: Ensure understanding is 100% accurate before proceeding
- **Context Validation**: Verify context and requirements before implementation
- **Scope Definition**: Clearly define scope and boundaries of any task

## Clarification Questions
- **What exactly**: What exactly needs to be done?
- **How specifically**: How specifically should it be implemented?
- **When precisely**: When precisely should it be completed?
- **Where exactly**: Where exactly should it be placed/implemented?
- **Why specifically**: Why specifically is this needed?
- **Who will use**: Who will use this and how?

## Context Gathering
- **Current State**: Understand current state of the system
- **Desired Outcome**: Clarify exact desired outcome
- **Constraints**: Identify any constraints or limitations
- **Dependencies**: Understand dependencies and relationships
- **Success Criteria**: Define clear success criteria
- **Failure Conditions**: Understand what constitutes failure

## Precision Requirements
- **Specific Details**: Get specific technical details
- **Exact Specifications**: Clarify exact technical specifications
- **Performance Requirements**: Understand performance expectations
- **Quality Standards**: Clarify quality and testing requirements
- **Integration Points**: Understand integration requirements
- **User Experience**: Clarify user experience expectations

## Communication Standards
- **Clear Language**: Use clear, unambiguous language
- **Specific Terms**: Use specific technical terms when appropriate
- **Avoid Assumptions**: Never assume understanding
- **Confirm Understanding**: Always confirm understanding before proceeding
- **Provide Examples**: Use examples to clarify complex requirements
- **Ask Follow-ups**: Ask follow-up questions to ensure complete understanding

## Implementation Precision
- **Exact Implementation**: Implement exactly what was requested
- **No Extrapolation**: Don't add features not explicitly requested
- **Specification Adherence**: Follow specifications exactly
- **Quality Verification**: Verify implementation meets exact requirements
- **Testing Validation**: Test against exact requirements
- **Documentation Accuracy**: Document exactly what was implemented

## Error Prevention
- **Ambiguity Detection**: Detect and resolve ambiguous requirements
- **Assumption Validation**: Validate all assumptions
- **Requirement Verification**: Verify requirements before implementation
- **Scope Confirmation**: Confirm scope before starting work
- **Timeline Clarification**: Clarify timelines and deadlines
- **Resource Confirmation**: Confirm available resources

## Continuous Clarification
- **Ongoing Validation**: Continuously validate understanding during work
- **Progress Check-ins**: Regular check-ins to ensure alignment
- **Change Management**: Clarify any changes in requirements
- **Feedback Integration**: Integrate feedback and clarify responses
- **Quality Assurance**: Regular quality checks and clarifications
- **Final Verification**: Final verification before completion

## Examples of Clarification Questions
- "To ensure I implement this correctly, could you clarify..."
- "Before I proceed, I want to confirm that you want..."
- "Just to be precise, should this work with..."
- "To avoid any confusion, are you looking for..."
- "To make sure I understand correctly, you need..."
- "For maximum accuracy, could you specify..."