#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è —Ä–∞–±–æ—á–∞—è —Å–∏—Å—Ç–µ–º–∞ —á–∞—Ç–∞ –±–µ–∑ AI
–ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã, —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
"""

import asyncio
import json
import time
import logging
from datetime import datetime
from typing import Dict, Any, List
from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from fastapi.responses import HTMLResponse, JSONResponse
import uvicorn

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

app = FastAPI(title="Simple Working Chat")

# –ü—Ä–æ—Å—Ç—ã–µ –∞–≥–µ–Ω—Ç—ã –±–µ–∑ AI
class SimpleAgent:
    def __init__(self, name: str, agent_type: str, skills: List[str]):
        self.name = name
        self.agent_type = agent_type
        self.skills = skills
        self.is_active = True
        self.status = "active"
        self.message_count = 0
        
    def get_response(self, message: str) -> str:
        """–ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ AI"""
        self.message_count += 1
        
        if self.agent_type == "general_assistant":
            return f"–ü—Ä–∏–≤–µ—Ç! –Ø {self.name}. –ü–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{message}'. –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?"
        
        elif self.agent_type == "code_developer":
            return f"–Ø {self.name}, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–¥–∞. –ü–æ –ø–æ–≤–æ–¥—É '{message}' - –º–æ–≥—É –ø–æ–º–æ—á—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –Ω–∞ Python, JavaScript, —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–π –∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤."
        
        elif self.agent_type == "data_analyst":
            return f"–Ø {self.name}, –∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö. –ü–æ –ø–æ–≤–æ–¥—É '{message}' - –º–æ–≥—É –ø–æ–º–æ—á—å —Å –∞–Ω–∞–ª–∏–∑–æ–º –¥–∞–Ω–Ω—ã—Ö, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π, –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π."
        
        elif self.agent_type == "project_manager":
            return f"–Ø {self.name}, –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤. –ü–æ –ø–æ–≤–æ–¥—É '{message}' - –º–æ–≥—É –ø–æ–º–æ—á—å —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∑–∞–¥–∞—á–∞–º–∏, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–µ–π."
        
        elif self.agent_type == "designer":
            return f"–Ø {self.name}, –¥–∏–∑–∞–π–Ω–µ—Ä. –ü–æ –ø–æ–≤–æ–¥—É '{message}' - –º–æ–≥—É –ø–æ–º–æ—á—å —Å UI/UX –¥–∏–∑–∞–π–Ω–æ–º, —Å–æ–∑–¥–∞–Ω–∏–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤."
        
        elif self.agent_type == "qa_tester":
            return f"–Ø {self.name}, —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫. –ü–æ –ø–æ–≤–æ–¥—É '{message}' - –º–æ–≥—É –ø–æ–º–æ—á—å —Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –ø–æ–∏—Å–∫–æ–º –±–∞–≥–æ–≤, –∫–∞—á–µ—Å—Ç–≤–æ–º."
        
        else:
            return f"–Ø {self.name}. –ü–æ–ª—É—á–∏–ª: '{message}'. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!"

# –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
agents = {
    "general_assistant": SimpleAgent("–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ü–æ–º–æ—â–Ω–∏–∫", "general_assistant", ["general_help", "planning"]),
    "code_developer": SimpleAgent("–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ö–æ–¥–∞", "code_developer", ["programming", "algorithms"]),
    "data_analyst": SimpleAgent("–ê–Ω–∞–ª–∏—Ç–∏–∫ –î–∞–Ω–Ω—ã—Ö", "data_analyst", ["data_analysis", "statistics"]),
    "project_manager": SimpleAgent("–ú–µ–Ω–µ–¥–∂–µ—Ä –ü—Ä–æ–µ–∫—Ç–æ–≤", "project_manager", ["project_planning", "management"]),
    "designer": SimpleAgent("–î–∏–∑–∞–π–Ω–µ—Ä", "designer", ["ui_design", "ux_design"]),
    "qa_tester": SimpleAgent("–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫", "qa_tester", ["testing", "quality_assurance"])
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
system_running = True
startup_time = time.time()
active_connections = set()

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —á–∞—Ç–æ–º"""
    return HTMLResponse(content="""
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Simple Working Chat</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
            .container { max-width: 1200px; margin: 0 auto; background: white; border-radius: 10px; padding: 20px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
            .header { text-align: center; margin-bottom: 30px; }
            .header h1 { color: #333; margin: 0; }
            .header p { color: #666; margin: 5px 0; }
            .chat-container { display: flex; gap: 20px; }
            .chat-messages { flex: 1; height: 400px; border: 1px solid #ddd; border-radius: 8px; padding: 15px; overflow-y: auto; background: #fafafa; }
            .message { margin-bottom: 15px; padding: 10px; border-radius: 8px; }
            .user-message { background: #007bff; color: white; margin-left: 20px; }
            .agent-message { background: #28a745; color: white; margin-right: 20px; }
            .system-message { background: #6c757d; color: white; text-align: center; }
            .chat-sidebar { width: 300px; }
            .system-info { background: #e9ecef; padding: 15px; border-radius: 8px; margin-bottom: 20px; }
            .system-info h3 { margin-top: 0; color: #495057; }
            .status-item { margin: 8px 0; }
            .status-label { font-weight: bold; }
            .agent-selector { background: #e9ecef; padding: 15px; border-radius: 8px; }
            .agent-selector label { display: block; margin-bottom: 8px; font-weight: bold; }
            .agent-selector select { width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px; }
            .input-container { display: flex; gap: 10px; margin-top: 20px; }
            .message-input { flex: 1; padding: 12px; border: 1px solid #ddd; border-radius: 6px; font-size: 16px; }
            .send-button { padding: 12px 24px; background: #007bff; color: white; border: none; border-radius: 6px; cursor: pointer; font-size: 16px; }
            .send-button:hover { background: #0056b3; }
            .status-online { color: #28a745; font-weight: bold; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üöÄ Simple Working Chat</h1>
                <p>–ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã, —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞</p>
            </div>
            
            <div class="chat-container">
                <div class="chat-messages" id="chatMessages">
                    <div class="message system-message">
                        <strong>–°–∏—Å—Ç–µ–º–∞:</strong> –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—Å–µ –∞–≥–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –±—ã—Å—Ç—Ä–æ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ.
                    </div>
                </div>
                
                <div class="chat-sidebar">
                    <div class="system-info">
                        <h3>üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</h3>
                        <p><span class="status-indicator status-online"></span>–°–∏—Å—Ç–µ–º–∞: <span id="systemStatus">–ó–∞–≥—Ä—É–∑–∫–∞...</span></p>
                        <p>–ê–≥–µ–Ω—Ç–æ–≤: <span id="totalAgents">6</span></p>
                        <p>–ê–∫—Ç–∏–≤–Ω—ã—Ö: <span id="activeAgents">6</span></p>
                        <p>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: <span id="uptime">0–º</span></p>
                        <p>–°–æ–æ–±—â–µ–Ω–∏–π: <span id="totalMessages">0</span></p>
                    </div>
                    
                    <div class="agent-selector">
                        <label for="agentSelect"><strong>–í—ã–±–µ—Ä–∏—Ç–µ –∞–≥–µ–Ω—Ç–∞:</strong></label>
                        <select id="agentSelect">
                            <option value="">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä</option>
                            <option value="general_assistant">–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ü–æ–º–æ—â–Ω–∏–∫</option>
                            <option value="code_developer">–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ö–æ–¥–∞</option>
                            <option value="data_analyst">–ê–Ω–∞–ª–∏—Ç–∏–∫ –î–∞–Ω–Ω—ã—Ö</option>
                            <option value="project_manager">–ú–µ–Ω–µ–¥–∂–µ—Ä –ü—Ä–æ–µ–∫—Ç–æ–≤</option>
                            <option value="designer">–î–∏–∑–∞–π–Ω–µ—Ä</option>
                            <option value="qa_tester">–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫</option>
                        </select>
                    </div>
                </div>
            </div>
            
            <div class="input-container">
                <input type="text" id="messageInput" class="message-input" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." />
                <button onclick="sendMessage()" class="send-button">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
            </div>
        </div>

        <script>
            let totalMessages = 0;
            
            function addMessage(content, type) {
                const messagesDiv = document.getElementById('chatMessages');
                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${type}-message`;
                messageDiv.innerHTML = content;
                messagesDiv.appendChild(messageDiv);
                messagesDiv.scrollTop = messagesDiv.scrollHeight;
            }
            
            async function sendMessage() {
                const input = document.getElementById('messageInput');
                const agentSelect = document.getElementById('agentSelect');
                const message = input.value.trim();
                
                if (!message) return;
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                addMessage(`<strong>–í—ã:</strong> ${message}`, 'user');
                input.value = '';
                totalMessages++;
                updateStatus();
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                try {
                    const response = await fetch('/api/chat/send', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            message: message,
                            agent_type: agentSelect.value || null,
                            user_id: 'user_' + Math.random().toString(36).substr(2, 9)
                        })
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        addMessage(`<strong>${data.response.agent}:</strong> ${data.response.response}`, 'agent');
                    } else {
                        addMessage(`<strong>–û—à–∏–±–∫–∞:</strong> ${data.error}`, 'system');
                    }
                } catch (error) {
                    addMessage(`<strong>–û—à–∏–±–∫–∞:</strong> ${error.message}`, 'system');
                }
            }
            
            function updateStatus() {
                document.getElementById('totalMessages').textContent = totalMessages;
                document.getElementById('systemStatus').textContent = 'running';
                document.getElementById('activeAgents').textContent = '6';
                
                const uptime = Math.floor((Date.now() - """ + str(int(startup_time * 1000)) + """) / 60000);
                document.getElementById('uptime').textContent = uptime + '–º';
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter
            document.getElementById('messageInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    sendMessage();
                }
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            setInterval(updateStatus, 5000);
            updateStatus();
        </script>
    </body>
    </html>
    """)

@app.post("/api/chat/send")
async def send_message(request: Dict[str, Any]):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≥–µ–Ω—Ç—É"""
    try:
        message = request.get("message", "")
        agent_type = request.get("agent_type")
        user_id = request.get("user_id", "anonymous")
        
        if not message:
            return JSONResponse(content={"success": False, "error": "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"})
        
        # –í—ã–±–∏—Ä–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        if agent_type and agent_type in agents:
            agent = agents[agent_type]
        else:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –∞–≥–µ–Ω—Ç–∞
            agent = agents["general_assistant"]
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        response = agent.get_response(message)
        
        return JSONResponse(content={
            "success": True,
            "response": {
                "response": response,
                "agent": agent.name,
                "agent_type": agent.agent_type,
                "timestamp": datetime.now().isoformat(),
                "success": True,
                "ai_used": False
            },
            "timestamp": datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return JSONResponse(content={"success": False, "error": str(e)})

@app.get("/api/system/status")
async def get_system_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    try:
        uptime_seconds = int(time.time() - startup_time)
        uptime_minutes = uptime_seconds // 60
        
        total_messages = sum(agent.message_count for agent in agents.values())
        
        return JSONResponse(content={
            "system_status": "running" if system_running else "stopped",
            "total_agents": len(agents),
            "active_agents": len([a for a in agents.values() if a.is_active]),
            "uptime": f"{uptime_minutes}–º",
            "total_messages": total_messages,
            "ai_engine_status": "not_used",
            "autonomous_tasks": 0
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return JSONResponse(content={"system_status": "error", "error": str(e)})

@app.websocket("/ws/{user_id}")
async def websocket_endpoint(websocket: WebSocket, user_id: str):
    """WebSocket –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    await websocket.accept()
    active_connections.add(websocket)
    
    try:
        while True:
            data = await websocket.receive_text()
            message_data = json.loads(data)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            response = await send_message(message_data)
            await websocket.send_text(json.dumps(response))
            
    except WebSocketDisconnect:
        active_connections.remove(websocket)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}")
        active_connections.discard(websocket)

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–π —Ä–∞–±–æ—á–µ–π —Å–∏—Å—Ç–µ–º—ã —á–∞—Ç–∞...")
    logger.info("‚úÖ –í—Å–µ –∞–≥–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ")
    logger.info("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://0.0.0.0:8080")
    
    uvicorn.run(app, host="0.0.0.0", port=8080, log_level="info")


