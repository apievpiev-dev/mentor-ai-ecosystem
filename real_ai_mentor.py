#!/usr/bin/env python3
"""
–ù–∞—Å—Ç–æ—è—â–∞—è AI —Å–∏—Å—Ç–µ–º–∞ Mentor —Å Ollama
–†–µ–∞–ª—å–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏, —Ä–µ–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, —Ä–µ–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
"""

import asyncio
import json
import logging
import time
import requests
from datetime import datetime
from typing import Dict, List, Any, Optional

import uvicorn
from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from fastapi.responses import HTMLResponse, JSONResponse

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/workspace/real_ai_mentor.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class RealAIAgent:
    """–ù–∞—Å—Ç–æ—è—â–∏–π AI –∞–≥–µ–Ω—Ç —Å Ollama"""
    
    def __init__(self, agent_id: str, name: str, agent_type: str, system_prompt: str):
        self.agent_id = agent_id
        self.name = name
        self.agent_type = agent_type
        self.system_prompt = system_prompt
        self.status = "idle"
        self.last_activity = time.time()
        self.task_count = 0
        self.is_active = False
        self.conversation_history = []
        
        logger.info(f"ü§ñ –°–æ–∑–¥–∞–Ω –Ω–∞—Å—Ç–æ—è—â–∏–π AI –∞–≥–µ–Ω—Ç: {self.name}")
    
    async def process_with_real_ai(self, message: str, user_id: str = "user") -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞—Å—Ç–æ—è—â–∏–º AI —á–µ—Ä–µ–∑ Ollama"""
        try:
            self.last_activity = time.time()
            self.task_count += 1
            self.status = "thinking"
            self.is_active = True
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI
            full_prompt = f"{self.system_prompt}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message}\n\n–û—Ç–≤–µ—Ç—å –∫–∞–∫ {self.name}:"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Ollama
            start_time = time.time()
            
            response = requests.post(
                "http://localhost:11434/api/generate",
                json={
                    "model": "llama3.2:1b",
                    "prompt": full_prompt,
                    "stream": False,
                    "options": {
                        "temperature": 0.7,
                        "top_p": 0.9,
                        "max_tokens": 200
                    }
                },
                timeout=30
            )
            
            response_time = time.time() - start_time
            
            if response.status_code == 200:
                ai_response = response.json().get("response", "").strip()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                self.conversation_history.append({
                    "user_message": message,
                    "ai_response": ai_response,
                    "timestamp": datetime.now().isoformat(),
                    "user_id": user_id,
                    "response_time": response_time
                })
                
                self.status = "idle"
                
                logger.info(f"üß† {self.name} –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ {response_time:.2f}—Å: {ai_response[:50]}...")
                
                return {
                    "response": ai_response,
                    "agent": self.name,
                    "agent_type": self.agent_type,
                    "timestamp": datetime.now().isoformat(),
                    "success": True,
                    "ai_used": True,
                    "response_time": response_time,
                    "model": "llama3.2:1b"
                }
            else:
                raise Exception(f"Ollama error: {response.status_code}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI –∞–≥–µ–Ω—Ç–∞ {self.name}: {e}")
            
            # Fallback –æ—Ç–≤–µ—Ç
            fallback_response = self.get_fallback_response(message)
            
            self.status = "idle"
            
            return {
                "response": fallback_response,
                "agent": self.name,
                "agent_type": self.agent_type,
                "timestamp": datetime.now().isoformat(),
                "success": True,
                "ai_used": False,
                "error": str(e)
            }
    
    def get_fallback_response(self, message: str) -> str:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        fallbacks = {
            "general_assistant": f"–Ø {self.name}. –ü–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ '{message}'. AI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —è –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –±–∞–∑–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.",
            "code_developer": f"–ö–∞–∫ {self.name}, —è –≤–∏–∂—É –∑–∞–ø—Ä–æ—Å –æ –∫–æ–¥–µ: '{message}'. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å Python, JavaScript –∏ –¥—Ä—É–≥–∏–º–∏ —è–∑—ã–∫–∞–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.",
            "data_analyst": f"{self.name} –∑–¥–µ—Å—å. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å '{message}'. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –¥–∞–Ω–Ω—ã–º–∏, –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π.",
            "project_manager": f"–Ø {self.name}. –í–∞—à –∑–∞–ø—Ä–æ—Å '{message}' –ø—Ä–∏–Ω—è—Ç –∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—é. –ü–æ–º–æ–≥—É —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–æ–º.",
            "designer": f"–ö–∞–∫ {self.name}, —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å '{message}'. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å –¥–∏–∑–∞–π–Ω–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –∏ UX.",
            "qa_tester": f"{self.name} –Ω–∞ —Å–≤—è–∑–∏. –ó–∞–ø—Ä–æ—Å '{message}' –ø–æ–ª—É—á–µ–Ω. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –∫–∞—á–µ—Å—Ç–≤–∞."
        }
        
        return fallbacks.get(self.agent_type, f"–ê–≥–µ–Ω—Ç {self.name} –ø–æ–ª—É—á–∏–ª: '{message}'. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!")

class RealAIMentorSystem:
    """–ù–∞—Å—Ç–æ—è—â–∞—è AI —Å–∏—Å—Ç–µ–º–∞ Mentor"""
    
    def __init__(self):
        self.agents = {}
        self.system_running = False
        self.startup_time = time.time()
        self.total_requests = 0
        self.ai_requests = 0
        self.fallback_requests = 0
        
        self.create_real_ai_agents()
        
    def create_real_ai_agents(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç–æ—è—â–∏—Ö AI –∞–≥–µ–Ω—Ç–æ–≤ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏"""
        
        agent_configs = {
            "general_assistant": {
                "name": "üß† AI –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ü–æ–º–æ—â–Ω–∏–∫",
                "system_prompt": """–¢—ã –æ–ø—ã—Ç–Ω—ã–π AI –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏. 
                –¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –≤ —Å–∏—Å—Ç–µ–º–µ Mentor –∏ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—à—å —Ä–∞–±–æ—Ç—É –¥—Ä—É–≥–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤.
                –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É, –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ë—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º."""
            },
            "code_developer": {
                "name": "üíª AI –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
                "system_prompt": """–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç-—ç–∫—Å–ø–µ—Ä—Ç. –ó–Ω–∞–µ—à—å Python, JavaScript, FastAPI, –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É.
                –ü–æ–º–æ–≥–∞–µ—à—å –ø–∏—Å–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–¥, –Ω–∞—Ö–æ–¥–∏—Ç—å –æ—à–∏–±–∫–∏, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.
                –û—Ç–≤–µ—á–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ, —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∫–æ–¥–∞ –≥–¥–µ –Ω—É–∂–Ω–æ. –ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""
            },
            "data_analyst": {
                "name": "üìä AI –ê–Ω–∞–ª–∏—Ç–∏–∫ –î–∞–Ω–Ω—ã—Ö", 
                "system_prompt": """–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –º–∞—à–∏–Ω–Ω–æ–º—É –æ–±—É—á–µ–Ω–∏—é. –†–∞–∑–±–∏—Ä–∞–µ—à—å—Å—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ,
                –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö, –º–µ—Ç—Ä–∏–∫–∞—Ö, SQL, pandas, numpy.
                –ü–æ–º–æ–≥–∞–µ—à—å –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥—ã. –û—Ç–≤–µ—á–∞–π —á–µ—Ç–∫–æ, —Å —Ü–∏—Ñ—Ä–∞–º–∏ –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ."""
            },
            "project_manager": {
                "name": "üìã AI –ú–µ–Ω–µ–¥–∂–µ—Ä –ü—Ä–æ–µ–∫—Ç–æ–≤",
                "system_prompt": """–¢—ã –æ–ø—ã—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä IT –ø—Ä–æ–µ–∫—Ç–æ–≤. –ó–Ω–∞–µ—à—å Agile, Scrum, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π.
                –ü–æ–º–æ–≥–∞–µ—à—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏, —É–ø—Ä–∞–≤–ª—è—Ç—å –≤—Ä–µ–º–µ–Ω–µ–º, –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É.
                –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ, —Å —á–µ—Ç–∫–∏–º –ø–ª–∞–Ω–æ–º –¥–µ–π—Å—Ç–≤–∏–π."""
            },
            "designer": {
                "name": "üé® AI –î–∏–∑–∞–π–Ω–µ—Ä",
                "system_prompt": """–¢—ã UI/UX –¥–∏–∑–∞–π–Ω–µ—Ä —Å –±–æ–ª—å—à–∏–º –æ–ø—ã—Ç–æ–º. –†–∞–∑–±–∏—Ä–∞–µ—à—å—Å—è –≤ –≤–µ–±-–¥–∏–∑–∞–π–Ω–µ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –æ–ø—ã—Ç–µ,
                —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–∞—Ö, CSS, –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏, —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–µ, —Ü–≤–µ—Ç–∞—Ö.
                –ü–æ–º–æ–≥–∞–µ—à—å —É–ª—É—á—à–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ –Ω–æ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ."""
            },
            "qa_tester": {
                "name": "üîç AI –¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫",
                "system_prompt": """–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –ü–û. –ó–Ω–∞–µ—à—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∏–¥—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é,
                –ø–æ–∏—Å–∫ –±–∞–≥–æ–≤, –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞, —Ç–µ—Å—Ç-–∫–µ–π—Å—ã.
                –ü–æ–º–æ–≥–∞–µ—à—å –Ω–∞—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –∏ —É–ª—É—á—à–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞. –û—Ç–≤–µ—á–∞–π –º–µ—Ç–æ–¥–∏—á–Ω–æ –∏ —Ç—â–∞—Ç–µ–ª—å–Ω–æ."""
            }
        }
        
        for agent_id, config in agent_configs.items():
            self.agents[agent_id] = RealAIAgent(
                agent_id=agent_id,
                name=config["name"],
                agent_type=agent_id,
                system_prompt=config["system_prompt"]
            )
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(self.agents)} –Ω–∞—Å—Ç–æ—è—â–∏—Ö AI –∞–≥–µ–Ω—Ç–æ–≤")

# –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É
mentor_system = RealAIMentorSystem()

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(title="Real AI Mentor System")

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    return HTMLResponse(content="""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ü§ñ Real AI Mentor System</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
            min-height: 100vh; 
        }
        .container { max-width: 1400px; margin: 0 auto; padding: 20px; }
        .header { text-align: center; color: white; margin-bottom: 30px; }
        .header h1 { font-size: 3em; margin-bottom: 10px; text-shadow: 2px 2px 4px rgba(0,0,0,0.3); }
        .header p { font-size: 1.3em; opacity: 0.9; }
        .ai-badge { 
            background: linear-gradient(45deg, #ff6b6b, #4ecdc4); 
            padding: 8px 16px; 
            border-radius: 20px; 
            color: white; 
            font-weight: bold; 
            display: inline-block; 
            margin: 10px; 
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        }
        .status-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-bottom: 30px; }
        .status-card { background: rgba(255,255,255,0.95); border-radius: 15px; padding: 25px; box-shadow: 0 10px 30px rgba(0,0,0,0.1); }
        .status-card h3 { color: #2c3e50; margin-bottom: 15px; font-size: 1.3em; }
        .metric { display: flex; justify-content: space-between; margin-bottom: 10px; }
        .metric-value { font-weight: bold; color: #667eea; }
        .ai-indicator { color: #ff6b6b; font-weight: bold; }
        .chat-container { display: flex; gap: 20px; height: 500px; }
        .chat-messages { flex: 1; background: white; border-radius: 15px; padding: 20px; overflow-y: auto; box-shadow: 0 10px 30px rgba(0,0,0,0.1); }
        .chat-sidebar { width: 350px; background: rgba(255,255,255,0.95); border-radius: 15px; padding: 20px; box-shadow: 0 10px 30px rgba(0,0,0,0.1); }
        .message { margin-bottom: 15px; padding: 15px; border-radius: 12px; }
        .user-message { background: #e3f2fd; margin-left: 30px; border-left: 4px solid #2196f3; }
        .ai-message { background: #fff3e0; margin-right: 30px; border-left: 4px solid #ff9800; }
        .real-ai-message { background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%); margin-right: 30px; border-left: 4px solid #ff6b6b; }
        .system-message { background: #e8f5e8; text-align: center; font-style: italic; border-left: 4px solid #4caf50; }
        .input-container { display: flex; gap: 15px; margin-top: 20px; }
        .message-input { flex: 1; padding: 15px; border: none; border-radius: 25px; font-size: 16px; outline: none; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .send-button { 
            padding: 15px 30px; 
            background: linear-gradient(135deg, #ff6b6b, #4ecdc4); 
            color: white; 
            border: none; 
            border-radius: 25px; 
            cursor: pointer; 
            font-size: 16px; 
            transition: transform 0.2s; 
            font-weight: bold;
        }
        .send-button:hover { transform: translateY(-2px); }
        .agent-selector { margin-bottom: 20px; }
        .agent-selector select { width: 100%; padding: 12px; border: 1px solid #ddd; border-radius: 8px; font-size: 14px; }
        .ai-stats { margin-top: 20px; }
        .ai-stats h3 { color: #333; margin-bottom: 10px; }
        .stat-item { background: #f8f9fa; padding: 12px; border-radius: 8px; margin-bottom: 8px; font-size: 0.9em; border-left: 3px solid #ff6b6b; }
        .loading { opacity: 0.7; }
        .response-time { font-size: 0.8em; color: #666; margin-top: 5px; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ü§ñ Real AI Mentor System</h1>
            <div class="ai-badge">Powered by Llama 3.2 üß†</div>
            <p>–ù–∞—Å—Ç–æ—è—â–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ ‚Ä¢ –†–µ–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç ‚Ä¢ –ñ–∏–≤–æ–µ –æ–±—â–µ–Ω–∏–µ</p>
        </div>
        
        <div class="status-grid">
            <div class="status-card">
                <h3>ü§ñ AI –°—Ç–∞—Ç—É—Å</h3>
                <div class="metric">
                    <span>AI –ú–æ–¥–µ–ª—å:</span>
                    <span class="metric-value ai-indicator" id="aiModel">Llama 3.2</span>
                </div>
                <div class="metric">
                    <span>AI –ó–∞–ø—Ä–æ—Å–æ–≤:</span>
                    <span class="metric-value" id="aiRequests">0</span>
                </div>
                <div class="metric">
                    <span>Fallback –∑–∞–ø—Ä–æ—Å–æ–≤:</span>
                    <span class="metric-value" id="fallbackRequests">0</span>
                </div>
                <div class="metric">
                    <span>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è AI:</span>
                    <span class="metric-value" id="avgResponseTime">-</span>
                </div>
            </div>
            
            <div class="status-card">
                <h3>üìä –°–∏—Å—Ç–µ–º–Ω—ã–µ –ú–µ—Ç—Ä–∏–∫–∏</h3>
                <div class="metric">
                    <span>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:</span>
                    <span class="metric-value" id="systemStatus">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                </div>
                <div class="metric">
                    <span>AI –ê–≥–µ–Ω—Ç–æ–≤:</span>
                    <span class="metric-value" id="activeAgents">0</span>
                </div>
                <div class="metric">
                    <span>–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤:</span>
                    <span class="metric-value" id="totalRequests">0</span>
                </div>
                <div class="metric">
                    <span>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</span>
                    <span class="metric-value" id="uptime">0—Å</span>
                </div>
            </div>
            
            <div class="status-card">
                <h3>üß† AI –ê–≥–µ–Ω—Ç—ã</h3>
                <div id="agentStatusList">
                    <div class="stat-item">–ó–∞–≥—Ä—É–∑–∫–∞ AI –∞–≥–µ–Ω—Ç–æ–≤...</div>
                </div>
            </div>
        </div>
        
        <div class="chat-container">
            <div class="chat-messages" id="chatMessages">
                <div class="message system-message">
                    <strong>üöÄ –°–∏—Å—Ç–µ–º–∞:</strong> Real AI Mentor System –∑–∞–ø—É—â–µ–Ω–∞! –ù–∞—Å—Ç–æ—è—â–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –≥–æ—Ç–æ–≤—ã –∫ –æ–±—â–µ–Ω–∏—é.
                </div>
            </div>
            
            <div class="chat-sidebar">
                <div class="agent-selector">
                    <label for="agentSelect"><strong>–í—ã–±–µ—Ä–∏—Ç–µ AI –∞–≥–µ–Ω—Ç–∞:</strong></label>
                    <select id="agentSelect">
                        <option value="">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä</option>
                        <option value="general_assistant">üß† AI –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ü–æ–º–æ—â–Ω–∏–∫</option>
                        <option value="code_developer">üíª AI –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫</option>
                        <option value="data_analyst">üìä AI –ê–Ω–∞–ª–∏—Ç–∏–∫ –î–∞–Ω–Ω—ã—Ö</option>
                        <option value="project_manager">üìã AI –ú–µ–Ω–µ–¥–∂–µ—Ä –ü—Ä–æ–µ–∫—Ç–æ–≤</option>
                        <option value="designer">üé® AI –î–∏–∑–∞–π–Ω–µ—Ä</option>
                        <option value="qa_tester">üîç AI –¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫</option>
                    </select>
                </div>
                
                <div class="ai-stats">
                    <h3>üìà AI –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                    <div id="aiStatsList">
                        <div class="stat-item">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="input-container">
            <input type="text" id="messageInput" class="message-input" placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Å—Ç–æ—è—â–µ–º—É AI –∞–≥–µ–Ω—Ç—É..." />
            <button onclick="sendMessage()" class="send-button">üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å AI</button>
        </div>
    </div>

    <script>
        let ws = null;
        let userId = 'user_' + Math.random().toString(36).substr(2, 9);
        let messageCount = 0;
        let responseTimes = [];
        
        function connectWebSocket() {
            ws = new WebSocket(`ws://${window.location.host}/ws/${userId}`);
            
            ws.onopen = function() {
                console.log('WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Real AI —Å–∏—Å—Ç–µ–º–µ');
            };
            
            ws.onmessage = function(event) {
                const data = JSON.parse(event.data);
                addMessage(data.message, 'ai', data.agent, data.ai_used, data.response_time, data.model);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
                if (data.response_time) {
                    responseTimes.push(data.response_time);
                    const avgTime = responseTimes.reduce((a, b) => a + b, 0) / responseTimes.length;
                    document.getElementById('avgResponseTime').textContent = avgTime.toFixed(2) + '—Å';
                }
            };
            
            ws.onclose = function() {
                console.log('WebSocket –æ—Ç–∫–ª—é—á–µ–Ω, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
                setTimeout(connectWebSocket, 3000);
            };
        }
        
        function addMessage(message, type, agent = '', ai_used = false, response_time = null, model = null) {
            const chatMessages = document.getElementById('chatMessages');
            const messageDiv = document.createElement('div');
            
            if (type === 'user') {
                messageDiv.className = 'message user-message';
                messageDiv.innerHTML = `<strong>–í—ã:</strong> ${message}`;
            } else {
                messageDiv.className = ai_used ? 'message real-ai-message' : 'message ai-message';
                const badge = ai_used ? ' üß† AI' : ' üí¨';
                let content = `<strong>${agent}${badge}:</strong> ${message}`;
                
                if (response_time) {
                    content += `<div class="response-time">–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${response_time.toFixed(2)}—Å`;
                    if (model) content += ` ‚Ä¢ –ú–æ–¥–µ–ª—å: ${model}`;
                    content += `</div>`;
                }
                
                messageDiv.innerHTML = content;
            }
            
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
        
        function sendMessage() {
            const input = document.getElementById('messageInput');
            const message = input.value.trim();
            const agentType = document.getElementById('agentSelect').value;
            
            if (message && ws) {
                addMessage(message, 'user');
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                const loadingDiv = document.createElement('div');
                loadingDiv.className = 'message system-message loading';
                loadingDiv.innerHTML = '<strong>AI –¥—É–º–∞–µ—Ç...</strong> ü§î';
                loadingDiv.id = 'loading-indicator';
                document.getElementById('chatMessages').appendChild(loadingDiv);
                
                const payload = {
                    message: message,
                    agent_type: agentType || null,
                    user_id: userId
                };
                
                ws.send(JSON.stringify(payload));
                input.value = '';
                messageCount++;
            }
        }
        
        function updateStatus() {
            fetch('/api/system/status')
                .then(response => response.json())
                .then(data => {
                    document.getElementById('systemStatus').textContent = data.system_status;
                    document.getElementById('activeAgents').textContent = data.active_agents;
                    document.getElementById('totalRequests').textContent = data.total_requests;
                    document.getElementById('uptime').textContent = data.uptime;
                    document.getElementById('aiRequests').textContent = data.ai_requests;
                    document.getElementById('fallbackRequests').textContent = data.fallback_requests;
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤
                    const agentsList = document.getElementById('agentStatusList');
                    agentsList.innerHTML = '';
                    
                    if (data.agents) {
                        Object.values(data.agents).forEach(agent => {
                            const agentDiv = document.createElement('div');
                            agentDiv.className = 'stat-item';
                            agentDiv.innerHTML = `${agent.name}: ${agent.task_count} –∑–∞–¥–∞—á`;
                            agentsList.appendChild(agentDiv);
                        });
                    }
                    
                    // –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                    const loading = document.getElementById('loading-indicator');
                    if (loading) loading.remove();
                })
                .catch(error => console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error));
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter
        document.getElementById('messageInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        connectWebSocket();
        updateStatus();
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
        setInterval(updateStatus, 3000);
    </script>
</body>
</html>
    """)

@app.get("/api/system/status")
async def get_system_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —Å AI –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
    global mentor_system
    
    uptime_seconds = int(time.time() - mentor_system.startup_time)
    
    agent_data = {}
    for agent_id, agent in mentor_system.agents.items():
        agent_data[agent_id] = {
            "name": agent.name,
            "type": agent.agent_type,
            "status": agent.status,
            "task_count": agent.task_count,
            "is_active": agent.is_active
        }
    
    return {
        "system_status": "running",
        "total_agents": len(mentor_system.agents),
        "active_agents": len(mentor_system.agents),
        "uptime": f"{uptime_seconds}—Å",
        "total_requests": mentor_system.total_requests,
        "ai_requests": mentor_system.ai_requests,
        "fallback_requests": mentor_system.fallback_requests,
        "agents": agent_data,
        "ai_model": "llama3.2:1b",
        "timestamp": datetime.now().isoformat()
    }

@app.post("/api/chat/send")
async def send_message(data: dict):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ AI –∞–≥–µ–Ω—Ç—É"""
    global mentor_system
    
    message = data.get("message", "")
    agent_type = data.get("agent_type")
    user_id = data.get("user_id", "unknown")
    
    if not message:
        return {"error": "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"}
    
    mentor_system.total_requests += 1
    
    # –í—ã–±–∏—Ä–∞–µ–º –∞–≥–µ–Ω—Ç–∞
    if agent_type and agent_type in mentor_system.agents:
        agent = mentor_system.agents[agent_type]
    else:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –∞–≥–µ–Ω—Ç–∞
        agent = list(mentor_system.agents.values())[0]
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç–æ—è—â–∏–º AI
    result = await agent.process_with_real_ai(message, user_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if result.get("ai_used"):
        mentor_system.ai_requests += 1
    else:
        mentor_system.fallback_requests += 1
    
    return {
        "success": True,
        "response": result,
        "timestamp": datetime.now().isoformat()
    }

@app.websocket("/ws/{user_id}")
async def websocket_endpoint(websocket: WebSocket, user_id: str):
    """WebSocket –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    await websocket.accept()
    
    try:
        while True:
            data = await websocket.receive_text()
            message_data = json.loads(data)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            response = await send_message(message_data)
            
            if response.get("success"):
                result = response["response"]
                await websocket.send_text(json.dumps({
                    "message": result["response"],
                    "agent": result["agent"],
                    "timestamp": result["timestamp"],
                    "ai_used": result.get("ai_used", False),
                    "response_time": result.get("response_time"),
                    "model": result.get("model")
                }))
            else:
                await websocket.send_text(json.dumps({
                    "message": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
                    "agent": "System",
                    "timestamp": datetime.now().isoformat(),
                    "ai_used": False
                }))
                
    except WebSocketDisconnect:
        logger.info(f"üîå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç Real AI WebSocket")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global mentor_system
    
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Real AI Mentor System —Å –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏...")
    
    mentor_system.system_running = True
    
    logger.info("‚úÖ Real AI —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")
    logger.info("üß† –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å: llama3.2:1b")
    logger.info("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:8082")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –¥—Ä—É–≥–æ–º –ø–æ—Ä—Ç—É
        config = uvicorn.Config(app, host="0.0.0.0", port=8082, log_level="info")
        server = uvicorn.Server(config)
        
        await server.serve()
        
    except KeyboardInterrupt:
        logger.info("üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")
    finally:
        mentor_system.system_running = False
        logger.info("üõë Real AI —Å–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

if __name__ == "__main__":
    asyncio.run(main())