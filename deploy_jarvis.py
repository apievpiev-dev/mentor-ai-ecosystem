#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è JARVIS –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç JARVIS –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã
"""

import os
import sys
import subprocess
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class JarvisDeployer:
    def __init__(self):
        self.base_path = Path("/workspace")
        self.service_file = self.base_path / "jarvis.service"
        self.systemd_path = Path("/etc/systemd/system/jarvis.service")
    
    def install_systemd_service(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ systemd —Å–µ—Ä–≤–∏—Å–∞"""
        logger.info("üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ systemd —Å–µ—Ä–≤–∏—Å–∞...")
        
        try:
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª —Å–µ—Ä–≤–∏—Å–∞
            subprocess.run([
                "sudo", "cp", str(self.service_file), str(self.systemd_path)
            ], check=True)
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º systemd
            subprocess.run(["sudo", "systemctl", "daemon-reload"], check=True)
            
            # –í–∫–ª—é—á–∞–µ–º —Å–µ—Ä–≤–∏—Å
            subprocess.run(["sudo", "systemctl", "enable", "jarvis"], check=True)
            
            logger.info("‚úÖ Systemd —Å–µ—Ä–≤–∏—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
            
        except subprocess.CalledProcessError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–∞: {e}")
            return False
    
    def start_jarvis_service(self):
        """–ó–∞–ø—É—Å–∫ JARVIS —á–µ—Ä–µ–∑ systemd"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ JARVIS —Å–µ—Ä–≤–∏—Å–∞...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
            subprocess.run(["sudo", "systemctl", "start", "jarvis"], check=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            result = subprocess.run([
                "sudo", "systemctl", "is-active", "jarvis"
            ], capture_output=True, text=True)
            
            if result.stdout.strip() == "active":
                logger.info("‚úÖ JARVIS —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                logger.error("‚ùå JARVIS —Å–µ—Ä–≤–∏—Å –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
                return False
                
        except subprocess.CalledProcessError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {e}")
            return False
    
    def check_jarvis_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ JARVIS"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ JARVIS...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
            result = subprocess.run([
                "sudo", "systemctl", "status", "jarvis", "--no-pager"
            ], capture_output=True, text=True)
            
            logger.info("üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞:")
            logger.info(result.stdout)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º API
            import requests
            response = requests.get("http://localhost:8080/api/system/status", timeout=5)
            if response.status_code == 200:
                logger.info("‚úÖ JARVIS API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                return True
            else:
                logger.warning("‚ö†Ô∏è JARVIS API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return False
    
    def setup_firewall(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞"""
        logger.info("üî• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞...")
        
        try:
            # –†–∞–∑—Ä–µ—à–∞–µ–º –ø–æ—Ä—Ç 8080
            subprocess.run([
                "sudo", "ufw", "allow", "8080"
            ], check=True)
            
            logger.info("‚úÖ –§–∞–π—Ä–≤–æ–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return True
            
        except subprocess.CalledProcessError as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π—Ä–≤–æ–ª–∞: {e}")
            return False
    
    def create_startup_script(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞"""
        logger.info("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞...")
        
        startup_script = self.base_path / "start_jarvis.sh"
        
        script_content = f"""#!/bin/bash
# JARVIS Startup Script

echo "üöÄ –ó–∞–ø—É—Å–∫ JARVIS..."

# –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
source {self.base_path}/jarvis_env/bin/activate

# –ó–∞–ø—É—Å–∫–∞–µ–º JARVIS
cd {self.base_path}
python3 start_jarvis_autonomous.py

echo "‚úÖ JARVIS –∑–∞–ø—É—â–µ–Ω!"
"""
        
        with open(startup_script, 'w') as f:
            f.write(script_content)
        
        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
        os.chmod(startup_script, 0o755)
        
        logger.info("‚úÖ –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ —Å–æ–∑–¥–∞–Ω")
        return True
    
    def deploy(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        logger.info("üéØ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ JARVIS...")
        
        # 1. –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
        if not self.create_startup_script():
            return False
        
        # 2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∞–π—Ä–≤–æ–ª
        self.setup_firewall()
        
        # 3. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º systemd —Å–µ—Ä–≤–∏—Å
        if not self.install_systemd_service():
            return False
        
        # 4. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
        if not self.start_jarvis_service():
            return False
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        time.sleep(5)
        if not self.check_jarvis_status():
            return False
        
        logger.info("üéâ JARVIS —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç!")
        logger.info("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:8080")
        logger.info("üìä API —Å—Ç–∞—Ç—É—Å–∞: http://localhost:8080/api/system/status")
        logger.info("üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–º:")
        logger.info("   sudo systemctl start jarvis    - –∑–∞–ø—É—Å—Ç–∏—Ç—å")
        logger.info("   sudo systemctl stop jarvis     - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        logger.info("   sudo systemctl status jarvis   - —Å—Ç–∞—Ç—É—Å")
        logger.info("   sudo systemctl restart jarvis  - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å")
        
        return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    deployer = JarvisDeployer()
    
    try:
        success = deployer.deploy()
        if success:
            logger.info("‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            sys.exit(0)
        else:
            logger.error("‚ùå –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
            sys.exit(1)
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()