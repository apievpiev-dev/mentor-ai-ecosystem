#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã Mentor
–î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç—ã, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç UI –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã
"""

import asyncio
import json
import logging
import time
import os
import requests
from datetime import datetime
from typing import Dict, List, Any, Optional
from PIL import Image, ImageDraw, ImageFont
import io
import base64

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/workspace/visual_monitor.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class VisualAutoMonitor:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
    
    def __init__(self):
        self.base_url = "http://localhost:8081"
        self.screenshots_dir = "/workspace/visual_screenshots"
        self.reports_dir = "/workspace/visual_reports"
        self.monitoring_active = False
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        os.makedirs(self.screenshots_dir, exist_ok=True)
        os.makedirs(self.reports_dir, exist_ok=True)
        
        # –°—á–µ—Ç—á–∏–∫–∏
        self.screenshots_taken = 0
        self.issues_found = 0
        self.fixes_applied = 0
        
        # –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫
        self.check_history = []
        
        logger.info("üëÅÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def start_visual_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.monitoring_active = True
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        
        while self.monitoring_active:
            try:
                # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
                await self.capture_and_analyze()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                if self.screenshots_taken % 5 == 0:
                    await self.check_all_pages()
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
                if self.screenshots_taken % 10 == 0:
                    await self.generate_visual_report()
                
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(120)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –¥–æ–ª—å—à–µ
    
    async def capture_and_analyze(self):
        """–ó–∞—Ö–≤–∞—Ç –∏ –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        try:
            self.screenshots_taken += 1
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            
            logger.info(f"üì∏ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å–Ω–∏–º–∫–∞ #{self.screenshots_taken}")
            
            # –ü–æ–ª—É—á–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            response = requests.get(self.base_url, timeout=10)
            
            if response.status_code == 200:
                html_content = response.text
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                analysis = await self.analyze_html_content(html_content)
                
                # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å–Ω–∏–º–æ–∫
                screenshot_path = await self.create_visual_snapshot(
                    html_content, analysis, timestamp
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã
                issues = await self.detect_visual_issues(analysis)
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                check_result = {
                    "timestamp": datetime.now().isoformat(),
                    "screenshot_number": self.screenshots_taken,
                    "screenshot_path": screenshot_path,
                    "analysis": analysis,
                    "issues_found": issues,
                    "status": "completed"
                }
                
                self.check_history.append(check_result)
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                if issues:
                    await self.apply_automatic_fixes(issues)
                
                logger.info(f"‚úÖ –í–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ #{self.screenshots_taken} –∑–∞–≤–µ—Ä—à–µ–Ω")
                
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É: HTTP {response.status_code}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    async def analyze_html_content(self, html_content: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"""
        try:
            analysis = {
                "content_size": len(html_content),
                "has_title": "<title>" in html_content,
                "title_text": "",
                "has_css": "<style>" in html_content,
                "has_javascript": "<script>" in html_content,
                "has_russian": any(char in html_content.lower() for char in "–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è"),
                "responsive_design": "viewport" in html_content,
                "modern_css": False,
                "ui_elements": {},
                "performance_indicators": {}
            }
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if "<title>" in html_content:
                start = html_content.find("<title>") + 7
                end = html_content.find("</title>", start)
                if end > start:
                    analysis["title_text"] = html_content[start:end]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ CSS —ç–ª–µ–º–µ–Ω—Ç—ã
            modern_css_features = ["grid", "flexbox", "transform", "gradient", "border-radius"]
            analysis["modern_css"] = any(feature in html_content.lower() for feature in modern_css_features)
            
            # –°—á–∏—Ç–∞–µ–º UI —ç–ª–µ–º–µ–Ω—Ç—ã
            ui_elements = {
                "buttons": html_content.count("button"),
                "inputs": html_content.count("<input"),
                "divs": html_content.count("<div"),
                "cards": html_content.count("card"),
                "containers": html_content.count("container")
            }
            analysis["ui_elements"] = ui_elements
            
            # –û—Ü–µ–Ω–∏–≤–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            analysis["performance_indicators"] = {
                "estimated_load_time": len(html_content) / 10000,  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
                "css_complexity": html_content.count("{"),
                "js_complexity": html_content.count("function")
            }
            
            return analysis
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ HTML: {e}")
            return {"status": "error", "error": str(e)}
    
    async def create_visual_snapshot(self, html_content: str, analysis: Dict[str, Any], timestamp: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å–Ω–∏–º–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            img = Image.new('RGB', (1200, 800), color='#f8f9fa')
            draw = ImageDraw.Draw(img)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç—ã
            try:
                font_large = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 24)
                font_medium = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 16)
                font_small = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 12)
            except:
                font_large = ImageFont.load_default()
                font_medium = ImageFont.load_default()
                font_small = ImageFont.load_default()
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            title = analysis.get("title_text", "Mentor System")
            draw.text((50, 30), f"üì∏ {title}", fill='#2c3e50', font=font_large)
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏
            draw.text((50, 70), f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", fill='#27ae60', font=font_medium)
            draw.text((50, 100), f"–°–Ω–∏–º–æ–∫: #{self.screenshots_taken}", fill='#3498db', font=font_medium)
            
            # –ú–µ—Ç—Ä–∏–∫–∏
            y_pos = 140
            metrics = [
                f"–†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {analysis.get('content_size', 0):,} –±–∞–π—Ç",
                f"–†—É—Å—Å–∫–∏–π —è–∑—ã–∫: {'‚úÖ' if analysis.get('has_russian') else '‚ùå'}",
                f"–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω: {'‚úÖ' if analysis.get('responsive_design') else '‚ùå'}",
                f"–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π CSS: {'‚úÖ' if analysis.get('modern_css') else '‚ùå'}",
                f"JavaScript: {'‚úÖ' if analysis.get('has_javascript') else '‚ùå'}"
            ]
            
            for metric in metrics:
                draw.text((50, y_pos), metric, fill='#34495e', font=font_small)
                y_pos += 25
            
            # UI —ç–ª–µ–º–µ–Ω—Ç—ã
            draw.text((50, y_pos + 20), "UI –≠–ª–µ–º–µ–Ω—Ç—ã:", fill='#2c3e50', font=font_medium)
            y_pos += 50
            
            ui_elements = analysis.get("ui_elements", {})
            for element, count in ui_elements.items():
                draw.text((70, y_pos), f"{element}: {count}", fill='#7f8c8d', font=font_small)
                y_pos += 20
            
            # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            draw.text((50, y_pos + 20), "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:", fill='#2c3e50', font=font_medium)
            y_pos += 50
            
            perf = analysis.get("performance_indicators", {})
            perf_metrics = [
                f"–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: ~{perf.get('estimated_load_time', 0):.2f}—Å",
                f"–°–ª–æ–∂–Ω–æ—Å—Ç—å CSS: {perf.get('css_complexity', 0)}",
                f"–°–ª–æ–∂–Ω–æ—Å—Ç—å JS: {perf.get('js_complexity', 0)}"
            ]
            
            for metric in perf_metrics:
                draw.text((70, y_pos), metric, fill='#8e44ad', font=font_small)
                y_pos += 20
            
            # –ü—Ä–µ–≤—å—é HTML (–ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏)
            draw.rectangle([50, y_pos + 30, 1150, 750], outline='#bdc3c7', width=2)
            draw.text((60, y_pos + 40), "HTML –ü—Ä–µ–≤—å—é:", fill='#2c3e50', font=font_medium)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —á–∞—Å—Ç–∏ HTML
            html_lines = html_content.split('\n')[:20]  # –ü–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫
            preview_y = y_pos + 70
            
            for i, line in enumerate(html_lines):
                if preview_y > 720:
                    break
                clean_line = line.strip()[:80]  # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                if clean_line:
                    draw.text((70, preview_y), clean_line, fill='#7f8c8d', font=font_small)
                    preview_y += 18
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–Ω–∏–º–æ–∫
            filename = f"visual_snapshot_{timestamp}.png"
            filepath = os.path.join(self.screenshots_dir, filename)
            img.save(filepath)
            
            logger.info(f"üì∏ –í–∏–∑—É–∞–ª—å–Ω—ã–π —Å–Ω–∏–º–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
            return filepath
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–∏–º–∫–∞: {e}")
            return None
    
    async def detect_visual_issues(self, analysis: Dict[str, Any]) -> List[str]:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º"""
        issues = []
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            content_size = analysis.get("content_size", 0)
            if content_size > 200000:  # –ë–æ–ª—å—à–µ 200KB
                issues.append("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            elif content_size < 1000:  # –ú–µ–Ω—å—à–µ 1KB
                issues.append("–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
            if not analysis.get("has_russian", False):
                issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å
            if not analysis.get("responsive_design", False):
                issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å
            if not analysis.get("modern_css", False):
                issues.append("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ CSS —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            perf = analysis.get("performance_indicators", {})
            if perf.get("estimated_load_time", 0) > 3:
                issues.append("–ú–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º UI —ç–ª–µ–º–µ–Ω—Ç—ã
            ui_elements = analysis.get("ui_elements", {})
            if ui_elements.get("buttons", 0) == 0:
                issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏")
            
            if issues:
                self.issues_found += len(issues)
                logger.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(issues)} –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º")
                for issue in issues:
                    logger.warning(f"   - {issue}")
            
            return issues
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º: {e}")
            return []
    
    async def apply_automatic_fixes(self, issues: List[str]):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
        try:
            fixes_applied = []
            
            for issue in issues:
                fix_applied = False
                
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º
                if "—Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç" in issue.lower():
                    await self.request_russian_content_fix()
                    fix_applied = True
                
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å—é
                elif "–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π" in issue.lower():
                    await self.request_responsive_design_fix()
                    fix_applied = True
                
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
                elif "–∑–∞–≥—Ä—É–∑–∫–∞" in issue.lower() or "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å" in issue.lower():
                    await self.request_performance_optimization()
                    fix_applied = True
                
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å UI
                elif "–∫–Ω–æ–ø–∫–∏" in issue.lower() or "–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤" in issue.lower():
                    await self.request_ui_improvements()
                    fix_applied = True
                
                if fix_applied:
                    fixes_applied.append(issue)
                    self.fixes_applied += 1
            
            if fixes_applied:
                logger.info(f"üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–æ {len(fixes_applied)} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
                for fix in fixes_applied:
                    logger.info(f"   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {fix}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {e}")
    
    async def request_russian_content_fix(self):
        """–ó–∞–ø—Ä–æ—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä—É—Å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        try:
            response = requests.post(
                f"{self.base_url}/api/chat/send",
                json={
                    "message": "–£–±–µ–¥–∏—Å—å —á—Ç–æ –≤–µ—Å—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏ –¥–æ–±–∞–≤—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ä—É—Å—Å–∫–∏–µ —Ç–µ–∫—Å—Ç—ã",
                    "agent_type": "designer",
                    "user_id": "visual_monitor"
                },
                timeout=15
            )
            
            if response.status_code == 200:
                logger.info("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä—É—Å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
    
    async def request_responsive_design_fix(self):
        """–ó–∞–ø—Ä–æ—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞"""
        try:
            response = requests.post(
                f"{self.base_url}/api/chat/send",
                json={
                    "message": "–£–ª—É—á—à–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –≤—Å–µ—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ —ç–∫—Ä–∞–Ω–æ–≤",
                    "agent_type": "designer",
                    "user_id": "visual_monitor"
                },
                timeout=15
            )
            
            if response.status_code == 200:
                logger.info("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —É–ª—É—á—à–µ–Ω–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
    
    async def request_performance_optimization(self):
        """–ó–∞–ø—Ä–æ—Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            response = requests.post(
                f"{self.base_url}/api/chat/send",
                json={
                    "message": "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
                    "agent_type": "code_developer",
                    "user_id": "visual_monitor"
                },
                timeout=15
            )
            
            if response.status_code == 200:
                logger.info("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
    
    async def request_ui_improvements(self):
        """–ó–∞–ø—Ä–æ—Å —É–ª—É—á—à–µ–Ω–∏—è UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        try:
            response = requests.post(
                f"{self.base_url}/api/chat/send",
                json={
                    "message": "–î–æ–±–∞–≤—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ —É–ª—É—á—à–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å",
                    "agent_type": "designer",
                    "user_id": "visual_monitor"
                },
                timeout=15
            )
            
            if response.status_code == 200:
                logger.info("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–µ UI –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —É–ª—É—á—à–µ–Ω–∏—è UI: {e}")
    
    async def check_all_pages(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü"""
        try:
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü —Å–∏—Å—Ç–µ–º—ã")
            
            pages_to_check = [
                "/",
                "/api/system/status", 
                "/api/autonomous/tasks"
            ]
            
            for page in pages_to_check:
                try:
                    response = requests.get(f"{self.base_url}{page}", timeout=10)
                    status = "‚úÖ OK" if response.status_code == 200 else f"‚ùå {response.status_code}"
                    logger.info(f"   {page}: {status}")
                    
                except Exception as e:
                    logger.warning(f"   {page}: ‚ùå –û—à–∏–±–∫–∞ - {e}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü: {e}")
    
    async def generate_visual_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        try:
            logger.info("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
            
            report = {
                "timestamp": datetime.now().isoformat(),
                "monitoring_stats": {
                    "screenshots_taken": self.screenshots_taken,
                    "issues_found": self.issues_found,
                    "fixes_applied": self.fixes_applied,
                    "monitoring_active": self.monitoring_active
                },
                "recent_checks": self.check_history[-10:],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø—Ä–æ–≤–µ—Ä–æ–∫
                "summary": {
                    "avg_issues_per_check": self.issues_found / max(self.screenshots_taken, 1),
                    "fix_success_rate": (self.fixes_applied / max(self.issues_found, 1)) * 100,
                    "monitoring_duration": f"{self.screenshots_taken} –º–∏–Ω—É—Ç"
                }
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON –æ—Ç—á–µ—Ç
            report_file = os.path.join(
                self.reports_dir, 
                f"visual_monitor_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            )
            
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(report, f, ensure_ascii=False, indent=2)
            
            logger.info(f"üìä –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.monitoring_active = False
        logger.info("üõë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    monitor = VisualAutoMonitor()
    
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Mentor")
        await monitor.start_visual_monitoring()
    except KeyboardInterrupt:
        logger.info("üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        monitor.stop_monitoring()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        await monitor.generate_visual_report()
        logger.info("üìä –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–∑–¥–∞–Ω")

if __name__ == "__main__":
    asyncio.run(main())