#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö AI-–∞–≥–µ–Ω—Ç–æ–≤
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –µ–¥–∏–Ω—É—é —Ä–∞–±–æ—á—É—é —Å–∏—Å—Ç–µ–º—É
"""

import asyncio
import json
import logging
import time
import signal
import sys
import uuid
from datetime import datetime
from typing import Dict, List, Any, Optional
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from multi_agent_system import (
    MultiAgentSystem, BaseAgent, GeneralAssistantAgent, 
    CodeDeveloperAgent, DataAnalystAgent, ProjectManagerAgent,
    AgentType, SharedMemory
)
from enhanced_agents import (
    EnhancedCodeDeveloperAgent, EnhancedDataAnalystAgent
)
from ai_engine import generate_ai_response
from agent_coordinator import (
    AgentCoordinator, EnhancedSharedMemory, KnowledgeGraph,
    TaskComplexity, CoordinationStrategy, initialize_coordinator
)
from chat_server import app, manager, system_stats
from enhanced_agents import EnhancedCodeDeveloperAgent, EnhancedDataAnalystAgent
from ai_manager_agent import AIManagerAgent
from ai_engine import ai_engine

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('integrated_system.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class IntegratedAgentSystem:
    """–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.running = True
        self.shared_memory = None
        self.multi_agent_system = None
        self.coordinator = None
        self.startup_time = None
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self._setup_directories()
        
        logger.info("üöÄ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≥–µ–Ω—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def _setup_directories(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        directories = [
            "agent_data",
            "agent_logs",
            "agent_knowledge",
            "agent_projects"
        ]
        
        for directory in directories:
            Path(directory).mkdir(parents=True, exist_ok=True)
            logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –æ–±—â—É—é –ø–∞–º—è—Ç—å
            self.shared_memory = EnhancedSharedMemory()
            logger.info("‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ–±—â–∞—è –ø–∞–º—è—Ç—å —Å–æ–∑–¥–∞–Ω–∞")
            
            # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏
            self.multi_agent_system = self._create_enhanced_agent_system()
            
            # –ó–∞–º–µ–Ω—è–µ–º –æ–±—ã—á–Ω—É—é –ø–∞–º—è—Ç—å –Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é
            for agent in self.multi_agent_system.agents.values():
                agent.set_shared_memory(self.shared_memory)
            
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∞")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä
            self.coordinator = initialize_coordinator(self.shared_memory)
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–æ–≤ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–µ
            for agent in self.multi_agent_system.agents.values():
                self.coordinator.register_agent(agent)
            
            logger.info("‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∞–≥–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é
            self.coordinator.start_coordination()
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω–∞")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã
            await self._create_additional_agents()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è
            await self._load_saved_knowledge()
            
            self.startup_time = datetime.now()
            logger.info("üéâ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
            raise
    
    def _create_enhanced_agent_system(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
            system = MultiAgentSystem()
            
            # –ó–∞–º–µ–Ω—è–µ–º –∞–≥–µ–Ω—Ç–æ–≤ –Ω–∞ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö
            enhanced_agents = {}
            
            # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞
            for agent_id, agent in system.agents.items():
                if agent.agent_type == AgentType.GENERAL_ASSISTANT:
                    enhanced_agent = self._create_enhanced_assistant(agent_id)
                    enhanced_agents[agent_id] = enhanced_agent
                elif agent.agent_type == AgentType.CODE_DEVELOPER:
                    # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
                    enhanced_agent = EnhancedCodeDeveloperAgent(agent_id)
                    enhanced_agents[agent_id] = enhanced_agent
                elif agent.agent_type == AgentType.DATA_ANALYST:
                    # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
                    enhanced_agent = EnhancedDataAnalystAgent(agent_id)
                    enhanced_agents[agent_id] = enhanced_agent
                elif agent.agent_type == AgentType.PROJECT_MANAGER:
                    # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
                    enhanced_agent = self._create_enhanced_project_manager(agent_id)
                    enhanced_agents[agent_id] = enhanced_agent
                else:
                    # –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–∞–∫ –µ—Å—Ç—å
                    enhanced_agents[agent_id] = agent
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–≥–µ–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ
            system.agents = enhanced_agents
            
            logger.info("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏")
            return system
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return MultiAgentSystem()
    
    def _create_enhanced_assistant(self, agent_id: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ —Å AI"""
        class EnhancedGeneralAssistant(GeneralAssistantAgent):
            def __init__(self, agent_id: str, parent_system):
                super().__init__(agent_id)
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è user_query
                self.add_skill("user_query", self._handle_user_query)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–ª–∞—Å—Å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ—Ç–æ–¥–∞–º
                self.parent_system = parent_system
            
            async def _handle_user_query(self, content: Dict[str, Any]) -> Dict[str, Any]:
                """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å AI"""
                try:
                    message = content.get("message", "").lower().strip()
                    user_id = content.get("user_id", "user")
                    
                    # –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                    quick_responses = {
                        "–ø—Ä–∏–≤–µ—Ç": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
                        "hello": "Hello! How can I help you today?",
                        "–∫–∞–∫ –¥–µ–ª–∞": "–û—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏.",
                        "—Å–ø–∞—Å–∏–±–æ": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å.",
                        "–ø–æ–∫–∞": "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–º–æ—â—å.",
                        "bye": "Goodbye! Feel free to ask if you need help.",
                        "–∏—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞": self.parent_system._get_project_history(),
                        "—á—Ç–æ —Ç–∞–∫–æ–µ mentor": self.parent_system._get_project_overview(),
                        "–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã": self.parent_system._get_system_architecture(),
                        "–∞–≥–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã": self.parent_system._get_agents_info()
                    }
                    
                    if message in quick_responses:
                        return {
                            "response": quick_responses[message],
                            "suggestions": [
                                "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á",
                                "–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", 
                                "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏",
                                "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö"
                            ]
                        }
                    
                    # –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º AI
                    ai_response = await generate_ai_response(
                        message, 
                        context=f"–¢—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ü–æ–º–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∑–∞–ø—Ä–æ—Å–æ–º: {message}",
                        user_id=user_id
                    )
                    
                    return {
                        "response": ai_response,
                        "suggestions": [
                            "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á",
                            "–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", 
                            "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏",
                            "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö"
                        ]
                    }
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
                    return {
                        "response": f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}",
                        "error": str(e)
                    }
            
            async def _handle_general_help(self, content: Dict[str, Any]) -> Dict[str, Any]:
                """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å AI"""
                try:
                    message = content.get("message", "")
                    user_id = content.get("user_id", "user")
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
                    ai_response = await generate_ai_response(
                        message, 
                        context=f"–¢—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ü–æ–º–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∑–∞–ø—Ä–æ—Å–æ–º: {message}",
                        user_id=user_id
                    )
                    
                    return {
                        "response": ai_response,
                        "suggestions": [
                            "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á",
                            "–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", 
                            "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏",
                            "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö"
                        ]
                    }
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
                    return {
                        "response": f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}",
                        "error": str(e)
                    }
            
            async def _handle_planning(self, content: Dict[str, Any]) -> Dict[str, Any]:
                """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å AI"""
                try:
                    message = content.get("message", "")
                    user_id = content.get("user_id", "user")
                    
                    ai_response = await generate_ai_response(
                        message,
                        context="–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é. –°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏.",
                        user_id=user_id
                    )
                    
                    return {
                        "response": ai_response,
                        "plan_type": "AI-generated"
                    }
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                    return {
                        "response": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞: {e}",
                        "error": str(e)
                    }
        
        return EnhancedGeneralAssistant(agent_id, self)
    
    def _get_project_history(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞"""
        return """üìö –ò–°–¢–û–†–ò–Ø –ü–†–û–ï–ö–¢–ê MENTOR:

üéØ Mentor Project - —Å–∏—Å—Ç–µ–º–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö AI-–∞–≥–µ–Ω—Ç–æ–≤ —Å –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏.

üèóÔ∏è –≠–í–û–õ–Æ–¶–ò–Ø:
‚Ä¢ –§–∞–∑–∞ 1: –ë–∞–∑–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≥–µ–Ω—Ç–æ–≤
‚Ä¢ –§–∞–∑–∞ 2: AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Ollama
‚Ä¢ –§–∞–∑–∞ 3: –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã —Å AI
‚Ä¢ –§–∞–∑–∞ 4: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫

üêõ –†–ï–®–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:
‚Ä¢ –†–µ–∫—É—Ä—Å–∏—è (maximum recursion depth exceeded)
‚Ä¢ ImportError –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
‚Ä¢ KeyError –≤ WebSocket
‚Ä¢ –¢–∞–π–º–∞—É—Ç—ã AI (60‚Üí30 —Å–µ–∫)
‚Ä¢ WebSocket 403 –æ—à–∏–±–∫–∏

‚úÖ –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï:
‚Ä¢ 6 –∞–≥–µ–Ω—Ç–æ–≤ —Å AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
‚Ä¢ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞ –ø–æ—Ä—Ç—É 8080
‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã + AI –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á
‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å–∏—Å—Ç–µ–º—ã"""
    
    def _get_project_overview(self):
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±–∑–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞"""
        return """üéØ MENTOR PROJECT - –û–ë–ó–û–†:

–≠—Ç–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö AI-–∞–≥–µ–Ω—Ç–æ–≤ —Å:
‚Ä¢ 6 —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏
‚Ä¢ AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π (Ollama + OpenAI)
‚Ä¢ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º —Å WebSocket
‚Ä¢ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–µ–π –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏
‚Ä¢ –û–±—â–µ–π –ø–∞–º—è—Ç—å—é –∏ –∑–Ω–∞–Ω–∏—è–º–∏

ü§ñ –ê–ì–ï–ù–¢–´:
‚Ä¢ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ü–æ–º–æ—â–Ω–∏–∫
‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ö–æ–¥–∞  
‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫ –î–∞–Ω–Ω—ã—Ö
‚Ä¢ –ú–µ–Ω–µ–¥–∂–µ—Ä –ü—Ä–æ–µ–∫—Ç–æ–≤
‚Ä¢ –î–∏–∑–∞–π–Ω–µ—Ä
‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫

üöÄ –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ AI-–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á
‚Ä¢ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏
‚Ä¢ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    
    def _get_system_architecture(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å–∏—Å—Ç–µ–º—ã"""
        return """üèóÔ∏è –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –°–ò–°–¢–ï–ú–´ MENTOR:

üîß –ö–û–ú–ü–û–ù–ï–ù–¢–´:
‚Ä¢ Multi-Agent System (—è–¥—Ä–æ)
‚Ä¢ AI Engine (Ollama + OpenAI)
‚Ä¢ Agent Coordinator (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è)
‚Ä¢ Web Interface (FastAPI + WebSocket)
‚Ä¢ Shared Memory (–æ–±—â–∞—è –ø–∞–º—è—Ç—å)
‚Ä¢ Enhanced Agents (—É–ª—É—á—à–µ–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã)

üìä –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –°–¢–ï–ö:
‚Ä¢ Backend: Python 3.12, FastAPI, asyncio
‚Ä¢ AI: Ollama (llama3.1:8b, llama2, mistral)
‚Ä¢ Frontend: HTML/CSS/JS, WebSocket
‚Ä¢ Infrastructure: Linux, Docker-ready

üîÑ –ü–û–¢–û–ö –î–ê–ù–ù–´–•:
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Üí Web Interface ‚Üí Agent Coordinator ‚Üí 
–í—ã–±–æ—Ä –∞–≥–µ–Ω—Ç–∞ ‚Üí AI Engine ‚Üí –û—Ç–≤–µ—Ç ‚Üí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    
    def _get_agents_info(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–∞—Ö"""
        return """ü§ñ –ê–ì–ï–ù–¢–´ –°–ò–°–¢–ï–ú–´ MENTOR:

1Ô∏è‚É£ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ü–û–ú–û–©–ù–ò–ö
‚Ä¢ –ù–∞–≤—ã–∫–∏: –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è
‚Ä¢ AI: ‚úÖ –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã + AI

2Ô∏è‚É£ –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö –ö–û–î–ê  
‚Ä¢ –ù–∞–≤—ã–∫–∏: –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤
‚Ä¢ AI: ‚úÖ EnhancedCodeDeveloperAgent
‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞, –æ—Ç–ª–∞–¥–∫–∞

3Ô∏è‚É£ –ê–ù–ê–õ–ò–¢–ò–ö –î–ê–ù–ù–´–•
‚Ä¢ –ù–∞–≤—ã–∫–∏: –∞–Ω–∞–ª–∏–∑, –æ—Ç—á–µ—Ç—ã, –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è  
‚Ä¢ AI: ‚úÖ EnhancedDataAnalystAgent
‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö

4Ô∏è‚É£ –ú–ï–ù–ï–î–ñ–ï–† –ü–†–û–ï–ö–¢–û–í
‚Ä¢ –ù–∞–≤—ã–∫–∏: –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏
‚Ä¢ AI: ‚úÖ EnhancedProjectManager
‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–æ–≤

5Ô∏è‚É£ –î–ò–ó–ê–ô–ù–ï–†
‚Ä¢ –ù–∞–≤—ã–∫–∏: UI/UX, –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
‚Ä¢ AI: ‚ö†Ô∏è –ë–∞–∑–æ–≤–∞—è (—Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è)

6Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–©–ò–ö
‚Ä¢ –ù–∞–≤—ã–∫–∏: —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø–æ–∏—Å–∫ –±–∞–≥–æ–≤
‚Ä¢ AI: ‚ö†Ô∏è –ë–∞–∑–æ–≤–∞—è (—Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è)"""
    
    def _create_enhanced_project_manager(self, agent_id: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å AI"""
        class EnhancedProjectManager(ProjectManagerAgent):
            def __init__(self, agent_id: str):
                super().__init__(agent_id)
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è user_query
                self.add_skill("user_query", self._handle_user_query)
            
            async def _handle_user_query(self, content: Dict[str, Any]) -> Dict[str, Any]:
                """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å AI"""
                try:
                    message = content.get("message", "").lower().strip()
                    user_id = content.get("user_id", "user")
                    
                    # –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                    quick_responses = {
                        "–ø–ª–∞–Ω": "–°–æ–∑–¥–∞–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø—Ä–æ–µ–∫—Ç–∞. –ö–∞–∫–æ–π —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                        "–ø—Ä–æ–µ–∫—Ç": "–ü–æ–º–æ–≥—É —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –≤–∞—à –ø—Ä–æ–µ–∫—Ç. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.",
                        "–∑–∞–¥–∞—á–∏": "–°–æ—Å—Ç–∞–≤–ª—é —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏ –Ω–∞–∑–Ω–∞—á—É –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö. –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?",
                        "–≤—Ä–µ–º—è": "–°–æ–∑–¥–∞–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —à–∫–∞–ª—É –ø—Ä–æ–µ–∫—Ç–∞. –ö–∞–∫–∏–µ —É –≤–∞—Å —Å—Ä–æ–∫–∏?",
                        "—Ä–µ—Å—É—Ä—Å—ã": "–ü–æ–º–æ–≥—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –∏ –±—é–¥–∂–µ—Ç. –ö–∞–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã?"
                    }
                    
                    if any(keyword in message for keyword in quick_responses.keys()):
                        for keyword, response in quick_responses.items():
                            if keyword in message:
                                return {
                                    "response": response,
                                    "project_phase": "planning",
                                    "suggestions": [
                                        "–°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –ø—Ä–æ–µ–∫—Ç–∞",
                                        "–ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á–∏",
                                        "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã",
                                        "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ä–æ–∫–∏"
                                    ]
                                }
                    
                    # –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º AI
                    ai_response = await generate_ai_response(
                        message, 
                        context="–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞–º–∏. –°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.",
                        user_id=user_id
                    )
                    
                    return {
                        "response": ai_response,
                        "project_phase": "ai_analysis",
                        "suggestions": [
                            "–°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –ø—Ä–æ–µ–∫—Ç–∞",
                            "–ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á–∏",
                            "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã",
                            "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ä–æ–∫–∏"
                        ]
                    }
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
                    return {
                        "response": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {e}",
                        "error": str(e)
                    }
        
        return EnhancedProjectManager(agent_id)
    
    async def _create_additional_agents(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞-–¥–∏–∑–∞–π–Ω–µ—Ä–∞
            from multi_agent_system import BaseAgent
            
            class DesignerAgent(BaseAgent):
                def __init__(self, agent_id: str = None):
                    super().__init__(
                        agent_id or str(uuid.uuid4()),
                        AgentType.DESIGNER,
                        "–î–∏–∑–∞–π–Ω–µ—Ä",
                        "–°–æ–∑–¥–∞–µ—Ç –¥–∏–∑–∞–π–Ω—ã, –º–∞–∫–µ—Ç—ã –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è"
                    )
                    self._setup_skills()
                
                def _setup_skills(self):
                    self.add_skill("ui_design", self._handle_ui_design)
                    self.add_skill("ux_design", self._handle_ux_design)
                    self.add_skill("visual_identity", self._handle_visual_identity)
                
                async def _handle_ui_design(self, content: Dict[str, Any]) -> Dict[str, Any]:
                    return {
                        "response": "–°–æ–∑–¥–∞—é –¥–∏–∑–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
                        "design_elements": ["–ö–Ω–æ–ø–∫–∏", "–§–æ—Ä–º—ã", "–ù–∞–≤–∏–≥–∞—Ü–∏—è", "–¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞"]
                    }
                
                async def _handle_ux_design(self, content: Dict[str, Any]) -> Dict[str, Any]:
                    return {
                        "response": "–ü—Ä–æ–µ–∫—Ç–∏—Ä—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç",
                        "ux_principles": ["–ü—Ä–æ—Å—Ç–æ—Ç–∞", "–ò–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ—Å—Ç—å", "–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å", "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"]
                    }
                
                async def _handle_visual_identity(self, content: Dict[str, Any]) -> Dict[str, Any]:
                    return {
                        "response": "–°–æ–∑–¥–∞—é –≤–∏–∑—É–∞–ª—å–Ω—É—é –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å",
                        "elements": ["–õ–æ–≥–æ—Ç–∏–ø", "–¶–≤–µ—Ç–∞", "–¢–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞", "–°—Ç–∏–ª—å"]
                    }
            
            # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞
            class QATesterAgent(BaseAgent):
                def __init__(self, agent_id: str = None):
                    super().__init__(
                        agent_id or str(uuid.uuid4()),
                        AgentType.QA_TESTER,
                        "–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫",
                        "–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –Ω–∞—Ö–æ–¥–∏—Ç –æ—à–∏–±–∫–∏"
                    )
                    self._setup_skills()
                
                def _setup_skills(self):
                    self.add_skill("unit_testing", self._handle_unit_testing)
                    self.add_skill("integration_testing", self._handle_integration_testing)
                    self.add_skill("bug_reporting", self._handle_bug_reporting)
                
                async def _handle_unit_testing(self, content: Dict[str, Any]) -> Dict[str, Any]:
                    return {
                        "response": "–°–æ–∑–¥–∞—é unit —Ç–µ—Å—Ç—ã",
                        "test_cases": ["–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏", "–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏", "–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏"]
                    }
                
                async def _handle_integration_testing(self, content: Dict[str, Any]) -> Dict[str, Any]:
                    return {
                        "response": "–í—ã–ø–æ–ª–Ω—è—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
                        "test_areas": ["API", "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", "–í–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã"]
                    }
                
                async def _handle_bug_reporting(self, content: Dict[str, Any]) -> Dict[str, Any]:
                    return {
                        "response": "–°–æ–∑–¥–∞—é –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ",
                        "bug_info": ["–®–∞–≥–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è", "–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç", "–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"]
                    }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º—É
            designer = DesignerAgent()
            tester = QATesterAgent()
            
            self.multi_agent_system.agents[designer.agent_id] = designer
            self.multi_agent_system.agents[tester.agent_id] = tester
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â—É—é –ø–∞–º—è—Ç—å
            designer.set_shared_memory(self.shared_memory)
            tester.set_shared_memory(self.shared_memory)
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–µ
            self.coordinator.register_agent(designer)
            self.coordinator.register_agent(tester)
            
            logger.info("‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤: {e}")
    
    async def _load_saved_knowledge(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π"""
        try:
            knowledge_file = Path("agent_knowledge/saved_knowledge.json")
            
            if knowledge_file.exists():
                with open(knowledge_file, 'r', encoding='utf-8') as f:
                    saved_knowledge = json.load(f)
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞–Ω–∏—è
                for key, items in saved_knowledge.get("knowledge_base", {}).items():
                    for item in items:
                        self.shared_memory.store_knowledge(
                            key, item["value"], item["agent_id"], 
                            item.get("keywords", []), item.get("metadata", {})
                        )
                
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(saved_knowledge.get('knowledge_base', {}))} –∑–Ω–∞–Ω–∏–π")
            else:
                logger.info("üìù –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π: {e}")
    
    async def save_knowledge(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π"""
        try:
            knowledge_file = Path("agent_knowledge/saved_knowledge.json")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞–Ω–∏—è
            saved_data = {
                "knowledge_base": self.shared_memory.knowledge_base,
                "conversation_history": list(self.shared_memory.conversation_history),
                "agent_capabilities": {
                    agent_id: {
                        "skills": cap.skills,
                        "performance_score": cap.performance_score,
                        "specialization_areas": cap.specialization_areas
                    }
                    for agent_id, cap in self.shared_memory.agent_capabilities.items()
                },
                "saved_at": datetime.now().isoformat()
            }
            
            with open(knowledge_file, 'w', encoding='utf-8') as f:
                json.dump(saved_data, f, ensure_ascii=False, indent=2)
            
            logger.info("üíæ –ó–Ω–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π: {e}")
    
    async def process_user_message(self, message: str, user_id: str = "user") -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –∞–≥–µ–Ω—Ç–æ–≤
            result = await self.multi_agent_system.process_user_message(message, user_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–±—â–µ–π –ø–∞–º—è—Ç–∏
            self.shared_memory.add_conversation({
                "user_id": user_id,
                "message": message,
                "agent_response": result,
                "timestamp": datetime.now().isoformat()
            })
            
            # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å–ª–æ–∂–Ω–∞—è, —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏
            if self._is_complex_task(message):
                await self._create_coordination_task(message, user_id)
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return {"error": str(e)}
    
    def _is_complex_task(self, message: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏"""
        complex_keywords = [
            "—Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "—Å–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º—É",
            "–∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ", "–º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω–∞—è –∑–∞–¥–∞—á–∞", "–±–æ–ª—å—à–æ–π –ø—Ä–æ–µ–∫—Ç"
        ]
        
        message_lower = message.lower()
        return any(keyword in message_lower for keyword in complex_keywords)
    
    async def _create_coordination_task(self, message: str, user_id: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞–≤—ã–∫–∏
            required_skills = self._extract_required_skills(message)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
            task = await self.coordinator.create_coordination_task(
                title=f"–ó–∞–¥–∞—á–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}",
                description=message,
                required_skills=required_skills,
                complexity=TaskComplexity.COMPLEX,
                priority=7
            )
            
            logger.info(f"üìã –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏: {task.title}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏: {e}")
    
    def _extract_required_skills(self, message: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        skills_mapping = {
            "–∫–æ–¥": ["code_generation", "debugging"],
            "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞": ["code_generation", "architecture_design"],
            "–∞–Ω–∞–ª–∏–∑": ["data_analysis", "reporting"],
            "–¥–∞–Ω–Ω—ã–µ": ["data_analysis", "visualization"],
            "–¥–∏–∑–∞–π–Ω": ["ui_design", "ux_design"],
            "—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ": ["unit_testing", "integration_testing"],
            "–ø—Ä–æ–µ–∫—Ç": ["project_planning", "task_management"]
        }
        
        message_lower = message.lower()
        required_skills = []
        
        for keyword, skills in skills_mapping.items():
            if keyword in message_lower:
                required_skills.extend(skills)
        
        return list(set(required_skills)) if required_skills else ["general_help"]
    
    def get_system_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        try:
            uptime = datetime.now() - self.startup_time if self.startup_time else None
            
            return {
                "system_status": "running" if self.running else "stopped",
                "uptime": str(uptime) if uptime else "0:00:00",
                "total_agents": len(self.multi_agent_system.agents),
                "active_agents": len([a for a in self.multi_agent_system.agents.values() if a.status != "idle"]),
                "coordination_status": self.coordinator.get_coordination_status() if self.coordinator else {},
                "shared_memory": {
                    "knowledge_items": len(self.shared_memory.knowledge_base),
                    "conversation_history": len(self.shared_memory.conversation_history),
                    "agent_capabilities": len(self.shared_memory.agent_capabilities)
                },
                "startup_time": self.startup_time.isoformat() if self.startup_time else None
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
            return {"error": str(e)}
    
    def get_available_agents(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        try:
            return [
                {
                    "id": agent.agent_id,
                    "name": agent.name,
                    "type": agent.agent_type.value,
                    "description": agent.description,
                    "skills": agent.skills,
                    "status": agent.status,
                    "performance_score": getattr(
                        self.shared_memory.agent_capabilities.get(agent.agent_id), 
                        "performance_score", 1.0
                    ) if self.shared_memory.agent_capabilities.get(agent.agent_id) else 1.0
                }
                for agent in self.multi_agent_system.agents.values()
            ]
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤: {e}")
            return []
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–≥–µ–Ω—Ç–æ–≤...")
            
            await self.initialize()
            self.running = True
            logger.info(f"üîß –°—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ running: {self.running}")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π
            asyncio.create_task(self._periodic_save())
            
            logger.info("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≥–µ–Ω—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–≥–µ–Ω—Ç–æ–≤...")
            
            self.running = False
            logger.info(f"üîß –°—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ stopped: {self.running}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞–Ω–∏—è
            await self.save_knowledge()
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä
            if self.coordinator:
                self.coordinator.stop_coordination()
            
            logger.info("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≥–µ–Ω—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
    
    async def _periodic_save(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π"""
        while self.running:
            try:
                await asyncio.sleep(300)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                if self.running:
                    await self.save_knowledge()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã (—Å–æ–∑–¥–∞–µ—Ç—Å—è –ª–µ–Ω–∏–≤–æ)
integrated_system = None

def get_integrated_system():
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã (–ª–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)"""
    global integrated_system
    if integrated_system is None:
        integrated_system = IntegratedAgentSystem()
    return integrated_system

# –û–±–Ω–æ–≤–ª—è–µ–º chat_server –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
async def process_user_message_integrated(message: str, user_id: str = "user") -> Dict[str, Any]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É"""
    system = get_integrated_system()
    return await system.process_user_message(message, user_id)

def get_available_agents_integrated() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É"""
    system = get_integrated_system()
    return system.get_available_agents()

def get_system_status_integrated() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É"""
    system = get_integrated_system()
    return system.get_system_status()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    system = get_integrated_system()
    asyncio.create_task(system.stop())
    sys.exit(0)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    async def main():
        system = get_integrated_system()
        try:
            await system.start()
            
            # –î–µ—Ä–∂–∏–º —Å–∏—Å—Ç–µ–º—É –∑–∞–ø—É—â–µ–Ω–Ω–æ–π
            while system.running:
                await asyncio.sleep(1)
                
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            await system.stop()
    
    # –ó–∞–ø—É—Å–∫
    asyncio.run(main())
