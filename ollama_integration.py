#!/usr/bin/env python3
"""
Ollama Integration for JARVIS
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Ollama LLM –≤ —Å–∏—Å—Ç–µ–º—É JARVIS
"""

import os
import sys
import json
import time
import requests
import logging
from typing import Dict, List, Any, Optional
from datetime import datetime

logger = logging.getLogger(__name__)

class OllamaIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Ollama LLM"""
    
    def __init__(self, base_url: str = "http://localhost:11434"):
        self.base_url = base_url
        self.available_models = []
        self.default_model = "llama2:7b"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Ollama
        self.check_ollama_availability()
        
        logger.info("ü§ñ Ollama Integration –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def check_ollama_availability(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Ollama"""
        try:
            response = requests.get(f"{self.base_url}/api/tags", timeout=5)
            if response.status_code == 200:
                data = response.json()
                self.available_models = [model["name"] for model in data.get("models", [])]
                logger.info(f"‚úÖ Ollama –¥–æ—Å—Ç—É–ø–µ–Ω, –º–æ–¥–µ–ª–µ–π: {len(self.available_models)}")
                return True
            else:
                logger.warning("‚ö†Ô∏è Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama: {e}")
            return False
    
    def generate_advanced_content(self, prompt: str, model: str = None, max_tokens: int = 500) -> str:
        """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å LLM"""
        try:
            if not model:
                model = self.default_model
            
            if model not in self.available_models:
                logger.warning(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å {model} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback")
                return self.fallback_generation(prompt)
            
            # –£–ª—É—á—à–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            enhanced_prompt = self.enhance_prompt(prompt)
            
            response = requests.post(
                f"{self.base_url}/api/generate",
                json={
                    "model": model,
                    "prompt": enhanced_prompt,
                    "stream": False,
                    "options": {
                        "num_predict": max_tokens,
                        "temperature": 0.7,
                        "top_p": 0.9
                    }
                },
                timeout=60
            )
            
            if response.status_code == 200:
                result = response.json()
                generated_text = result.get("response", "").strip()
                
                # –û—á–∏—â–∞–µ–º –∏ —É–ª—É—á—à–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                cleaned_text = self.clean_generated_text(generated_text)
                
                logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å {model}: {len(cleaned_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                return cleaned_text
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Ollama API: {response.status_code}")
                return self.fallback_generation(prompt)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å Ollama: {e}")
            return self.fallback_generation(prompt)
    
    def enhance_prompt(self, prompt: str) -> str:
        """–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            if "–æ–ø–∏—Å–∞–Ω–∏–µ" in prompt.lower() or "description" in prompt.lower():
                return f"""–°–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞.

–¢–æ–≤–∞—Ä: {prompt}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ü—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –∏ –ø—Ä–æ–¥–∞—é—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
- –£–∫–∞–∑–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
- –î–ª–∏–Ω–∞: 100-200 —Å–ª–æ–≤
- –°—Ç–∏–ª—å: –ø—Ä–æ–¥–∞—é—â–∏–π, –Ω–æ –Ω–µ –Ω–∞–≤—è–∑—á–∏–≤—ã–π

–û–ø–∏—Å–∞–Ω–∏–µ:"""
            
            elif "–Ω–∞–∑–≤–∞–Ω–∏–µ" in prompt.lower() or "title" in prompt.lower():
                return f"""–°–æ–∑–¥–∞–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞.

–¢–æ–≤–∞—Ä: {prompt}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ö—Ä–∞—Ç–∫–æ–µ –∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–µ–µ—Å—è
- –í–∫–ª—é—á–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
- SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ
- –ú–∞–∫—Å–∏–º—É–º 60 —Å–∏–º–≤–æ–ª–æ–≤

–ù–∞–∑–≤–∞–Ω–∏–µ:"""
            
            elif "–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞" in prompt.lower() or "keywords" in prompt.lower():
                return f"""–°–æ–∑–¥–∞–π —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è SEO-–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.

–¢–æ–≤–∞—Ä: {prompt}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- 15-20 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
- –í–∫–ª—é—á–∏—Ç—å —Å–∏–Ω–æ–Ω–∏–º—ã –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
- –£—á–µ—Å—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –†–∞–∑–¥–µ–ª–∏—Ç—å –∑–∞–ø—è—Ç—ã–º–∏

–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:"""
            
            elif "–∞–Ω–∞–ª–∏–∑" in prompt.lower() or "analysis" in prompt.lower():
                return f"""–ü—Ä–æ–≤–µ–¥–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑.

–î–∞–Ω–Ω—ã–µ: {prompt}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –í—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Ç—Ä–µ–Ω–¥—ã
- –ü—Ä–µ–¥–ª–æ–∂–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –£–∫–∞–∂–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞
- –û—Ü–µ–Ω–∏ —Ä–∏—Å–∫–∏

–ê–Ω–∞–ª–∏–∑:"""
            
            else:
                return f"""–¢—ã - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫ JARVIS. –û—Ç–≤–µ—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ.

–ó–∞–ø—Ä–æ—Å: {prompt}

–û—Ç–≤–µ—Ç:"""
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {e}")
            return prompt
    
    def clean_generated_text(self, text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        try:
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
            cleaned = " ".join(text.split())
            
            # –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ñ—Ä–∞–∑—ã
            sentences = cleaned.split('.')
            unique_sentences = []
            for sentence in sentences:
                sentence = sentence.strip()
                if sentence and sentence not in unique_sentences:
                    unique_sentences.append(sentence)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
            result = '. '.join(unique_sentences[:5])
            if result and not result.endswith('.'):
                result += '.'
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
            return text
    
    def fallback_generation(self, prompt: str) -> str:
        """–†–µ–∑–µ—Ä–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        fallback_templates = {
            "—Å–º–∞—Ä—Ç—Ñ–æ–Ω": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–º–∞—Ä—Ç—Ñ–æ–Ω —Å –ø–µ—Ä–µ–¥–æ–≤—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏, –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–∞–º–µ—Ä–æ–π –∏ –¥–æ–ª–≥–æ–≤–µ—á–Ω–æ–π –±–∞—Ç–∞—Ä–µ–µ–π. –ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π.",
            "–Ω–æ—É—Ç–±—É–∫": "–ú–æ—â–Ω—ã–π –Ω–æ—É—Ç–±—É–∫ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞. –í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —Å—Ç–∏–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –≤ –æ–¥–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.",
            "–Ω–∞—É—à–Ω–∏–∫–∏": "–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏ —Å –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º –∑–≤—É–∫–∞ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π –ø–æ—Å–∞–¥–∫–æ–π. –ò–¥–µ–∞–ª—å–Ω—ã –¥–ª—è –º—É–∑—ã–∫–∏, –∏–≥—Ä –∏ —Ä–∞–±–æ—Ç—ã.",
            "–æ–¥–µ–∂–¥–∞": "–°—Ç–∏–ª—å–Ω–∞—è –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –æ–¥–µ–∂–¥–∞ –∏–∑ –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω, –∫–æ–º—Ñ–æ—Ä—Ç –∏ –¥–æ–ª–≥–æ–≤–µ—á–Ω–æ—Å—Ç—å.",
            "–æ–±—É–≤—å": "–ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è –∏ —Å—Ç–∏–ª—å–Ω–∞—è –æ–±—É–≤—å –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏. –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏."
        }
        
        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω
        for key, template in fallback_templates.items():
            if key in prompt.lower():
                return template
        
        return f"–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å –æ—Ç–ª–∏—á–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º. {prompt}"
    
    def generate_business_insights(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–∏–Ω—Å–∞–π—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é LLM"""
        try:
            prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –±–∏–∑–Ω–µ—Å-–¥–∞–Ω–Ω—ã–µ –∏ –¥–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:

–î–∞–Ω–Ω—ã–µ:
{json.dumps(data, indent=2, ensure_ascii=False)}

–¢—Ä–µ–±—É–µ—Ç—Å—è:
1. –ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã
2. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
3. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞
4. –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏

–ê–Ω–∞–ª–∏–∑:"""
            
            analysis = self.generate_advanced_content(prompt, max_tokens=800)
            
            return {
                "analysis": analysis,
                "generated_with": "ollama_llm",
                "model_used": self.default_model,
                "confidence": 0.85,
                "timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Å–∞–π—Ç–æ–≤: {e}")
            return {
                "analysis": "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º –¥–ª—è —Ä–æ—Å—Ç–∞.",
                "generated_with": "fallback",
                "error": str(e)
            }
    
    def generate_marketing_content(self, product_info: Dict[str, Any]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        try:
            product_name = product_info.get("name", "—Ç–æ–≤–∞—Ä")
            category = product_info.get("category", "–æ–±—â–∞—è")
            price = product_info.get("price", "–¥–æ—Å—Ç—É–ø–Ω–∞—è")
            
            prompt = f"""–°–æ–∑–¥–∞–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ç–æ–≤–∞—Ä–∞:

–¢–æ–≤–∞—Ä: {product_name}
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}
–¶–µ–Ω–∞: {price}

–°–æ–∑–¥–∞–π:
1. –ü—Ä–æ–¥–∞—é—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (100-150 —Å–ª–æ–≤)
2. –ü—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–¥–æ 60 —Å–∏–º–≤–æ–ª–æ–≤)
3. –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è SEO (15-20 —Å–ª–æ–≤)
4. –°–ª–æ–≥–∞–Ω (–¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤)
5. –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ (3-5 –ø—É–Ω–∫—Ç–æ–≤)

–ö–æ–Ω—Ç–µ–Ω—Ç:"""
            
            content = self.generate_advanced_content(prompt, max_tokens=1000)
            
            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
            lines = content.split('\n')
            
            return {
                "full_content": content,
                "description": self.extract_section(content, "–æ–ø–∏—Å–∞–Ω–∏–µ"),
                "title": self.extract_section(content, "–Ω–∞–∑–≤–∞–Ω–∏–µ"),
                "keywords": self.extract_section(content, "–∫–ª—é—á–µ–≤—ã–µ"),
                "slogan": self.extract_section(content, "—Å–ª–æ–≥–∞–Ω"),
                "benefits": self.extract_section(content, "–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞"),
                "generated_with": "ollama_llm",
                "timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
            return {"error": str(e)}
    
    def extract_section(self, text: str, section_name: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        try:
            lines = text.split('\n')
            for i, line in enumerate(lines):
                if section_name.lower() in line.lower():
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É –∏–ª–∏ —Ç–µ–∫—É—â—É—é
                    if i + 1 < len(lines):
                        return lines[i + 1].strip()
                    else:
                        return line.split(':')[-1].strip()
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å—Ç—Ä–æ–∫—É
            return text.split('\n')[0].strip()
            
        except Exception:
            return text[:100] + "..."
    
    def test_ollama_integration(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Ollama"""
        try:
            logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Ollama –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            if not self.check_ollama_availability():
                logger.error("‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            test_prompt = "—Å–º–∞—Ä—Ç—Ñ–æ–Ω —Å —Ö–æ—Ä–æ—à–µ–π –∫–∞–º–µ—Ä–æ–π"
            content = self.generate_advanced_content(test_prompt)
            
            if len(content) > 50:
                logger.info("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                logger.info(f"   –ü—Ä–∏–º–µ—Ä: {content[:100]}...")
                return True
            else:
                logger.error("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False

def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    try:
        integration = OllamaIntegration()
        
        if integration.test_ollama_integration():
            logger.info("üöÄ Ollama –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
            
            # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
            logger.info("üí° –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:")
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
            description = integration.generate_advanced_content("–°–æ–∑–¥–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã—Ö –Ω–∞—É—à–Ω–∏–∫–æ–≤ –ø—Ä–µ–º–∏—É–º –∫–ª–∞—Å—Å–∞")
            logger.info(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description[:150]}...")
            
            # –ë–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑
            business_data = {
                "sales": 45000,
                "orders": 230,
                "conversion": 3.2,
                "returns": 1.8
            }
            insights = integration.generate_business_insights(business_data)
            logger.info(f"üìä –ë–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑: {insights['analysis'][:150]}...")
            
        else:
            logger.error("‚ùå Ollama –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ –≥–æ—Ç–æ–≤–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    main()