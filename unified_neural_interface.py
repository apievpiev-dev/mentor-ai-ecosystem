#!/usr/bin/env python3
"""
Unified Neural Interface - –ï–¥–∏–Ω—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –≤ –µ–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
"""

import asyncio
import json
import logging
import time
from typing import Dict, List, Any, Optional
from datetime import datetime
from pathlib import Path
import uvicorn
from fastapi import FastAPI, WebSocket, WebSocketDisconnect, HTTPException
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('/workspace')

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
from enhanced_ai_engine import enhanced_ai_engine, generate_ai_response, generate_code, analyze_data, plan_project
from autonomous_neural_system import autonomous_neural_system
from visual_monitor import visual_monitor
from multi_agent_system import MultiAgentSystem, AgentType

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="Unified Neural Interface",
    description="–ï–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏",
    version="1.0.0"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class ChatMessage(BaseModel):
    message: str
    agent_type: Optional[str] = None
    user_id: str = "user"

class TaskRequest(BaseModel):
    description: str
    priority: int = 1
    task_type: str = "general"

class SystemConfig(BaseModel):
    auto_mode: bool = True
    visual_verification: bool = True
    performance_optimization: bool = True

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
connected_clients: List[WebSocket] = []
system_initialized = False
multi_agent_system = None

# HTML –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
HTML_INTERFACE = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Unified Neural Interface</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .header {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
        }
        
        .header h1 {
            color: #4a5568;
            text-align: center;
            margin-bottom: 10px;
            font-size: 2.5em;
        }
        
        .header p {
            text-align: center;
            color: #718096;
            font-size: 1.1em;
        }
        
        .main-content {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 20px;
        }
        
        .panel {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
        }
        
        .panel h2 {
            color: #4a5568;
            margin-bottom: 15px;
            font-size: 1.5em;
            border-bottom: 2px solid #e2e8f0;
            padding-bottom: 10px;
        }
        
        .chat-container {
            height: 400px;
            border: 1px solid #e2e8f0;
            border-radius: 10px;
            overflow-y: auto;
            padding: 15px;
            margin-bottom: 15px;
            background: #f7fafc;
        }
        
        .message {
            margin-bottom: 15px;
            padding: 10px;
            border-radius: 10px;
            max-width: 80%;
        }
        
        .user-message {
            background: #4299e1;
            color: white;
            margin-left: auto;
        }
        
        .ai-message {
            background: #e2e8f0;
            color: #2d3748;
        }
        
        .system-message {
            background: #48bb78;
            color: white;
            text-align: center;
            margin: 0 auto;
        }
        
        .input-group {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        }
        
        .input-group input {
            flex: 1;
            padding: 12px;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            font-size: 16px;
        }
        
        .input-group select {
            padding: 12px;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            font-size: 16px;
            background: white;
        }
        
        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .btn-primary {
            background: #4299e1;
            color: white;
        }
        
        .btn-primary:hover {
            background: #3182ce;
        }
        
        .btn-success {
            background: #48bb78;
            color: white;
        }
        
        .btn-success:hover {
            background: #38a169;
        }
        
        .btn-warning {
            background: #ed8936;
            color: white;
        }
        
        .btn-warning:hover {
            background: #dd6b20;
        }
        
        .status-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }
        
        .status-card {
            background: #f7fafc;
            border: 1px solid #e2e8f0;
            border-radius: 10px;
            padding: 15px;
            text-align: center;
        }
        
        .status-card h3 {
            color: #4a5568;
            margin-bottom: 10px;
        }
        
        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 8px;
        }
        
        .status-healthy {
            background: #48bb78;
        }
        
        .status-warning {
            background: #ed8936;
        }
        
        .status-error {
            background: #f56565;
        }
        
        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
        }
        
        .metric-card {
            background: #f7fafc;
            border: 1px solid #e2e8f0;
            border-radius: 10px;
            padding: 15px;
            text-align: center;
        }
        
        .metric-value {
            font-size: 2em;
            font-weight: bold;
            color: #4299e1;
        }
        
        .metric-label {
            color: #718096;
            font-size: 0.9em;
        }
        
        .agent-list {
            max-height: 300px;
            overflow-y: auto;
        }
        
        .agent-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            margin-bottom: 10px;
            background: #f7fafc;
        }
        
        .agent-info {
            flex: 1;
        }
        
        .agent-name {
            font-weight: bold;
            color: #4a5568;
        }
        
        .agent-type {
            color: #718096;
            font-size: 0.9em;
        }
        
        .agent-status {
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.8em;
            font-weight: bold;
        }
        
        .status-idle {
            background: #e2e8f0;
            color: #4a5568;
        }
        
        .status-working {
            background: #4299e1;
            color: white;
        }
        
        .status-busy {
            background: #ed8936;
            color: white;
        }
        
        .footer {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 20px;
            text-align: center;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
        }
        
        .footer p {
            color: #718096;
            margin-bottom: 10px;
        }
        
        .footer .status {
            font-weight: bold;
            color: #48bb78;
        }
        
        @media (max-width: 768px) {
            .main-content {
                grid-template-columns: 1fr;
            }
            
            .status-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üß† Unified Neural Interface</h1>
            <p>–ï–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏ –∏ AI –∞–≥–µ–Ω—Ç–∞–º–∏</p>
        </div>
        
        <div class="main-content">
            <div class="panel">
                <h2>üí¨ –ß–∞—Ç —Å AI</h2>
                <div class="input-group">
                    <select id="agentSelect">
                        <option value="general">–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ü–æ–º–æ—â–Ω–∏–∫</option>
                        <option value="code_developer">–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ö–æ–¥–∞</option>
                        <option value="data_analyst">–ê–Ω–∞–ª–∏—Ç–∏–∫ –î–∞–Ω–Ω—ã—Ö</option>
                        <option value="project_manager">–ú–µ–Ω–µ–¥–∂–µ—Ä –ü—Ä–æ–µ–∫—Ç–æ–≤</option>
                        <option value="designer">–î–∏–∑–∞–π–Ω–µ—Ä</option>
                        <option value="qa_tester">–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫</option>
                    </select>
                </div>
                <div class="chat-container" id="chatContainer">
                    <div class="message system-message">
                        –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∞–≥–µ–Ω—Ç–∞ –∏ –Ω–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ.
                    </div>
                </div>
                <div class="input-group">
                    <input type="text" id="messageInput" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." maxlength="1000">
                    <button class="btn btn-primary" onclick="sendMessage()">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
                </div>
            </div>
            
            <div class="panel">
                <h2>üìä –°—Ç–∞—Ç—É—Å –°–∏—Å—Ç–µ–º—ã</h2>
                <div class="status-grid">
                    <div class="status-card">
                        <h3>AI Engine</h3>
                        <span class="status-indicator status-healthy" id="aiEngineStatus"></span>
                        <span id="aiEngineText">–ó–¥–æ—Ä–æ–≤</span>
                    </div>
                    <div class="status-card">
                        <h3>Multi-Agent</h3>
                        <span class="status-indicator status-healthy" id="multiAgentStatus"></span>
                        <span id="multiAgentText">–ê–∫—Ç–∏–≤–µ–Ω</span>
                    </div>
                    <div class="status-card">
                        <h3>Visual Monitor</h3>
                        <span class="status-indicator status-healthy" id="visualMonitorStatus"></span>
                        <span id="visualMonitorText">–†–∞–±–æ—Ç–∞–µ—Ç</span>
                    </div>
                    <div class="status-card">
                        <h3>–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º</h3>
                        <span class="status-indicator status-healthy" id="autonomousStatus"></span>
                        <span id="autonomousText">–í–∫–ª—é—á–µ–Ω</span>
                    </div>
                </div>
                
                <h3>üìà –ú–µ—Ç—Ä–∏–∫–∏</h3>
                <div class="metrics-grid">
                    <div class="metric-card">
                        <div class="metric-value" id="totalAgents">0</div>
                        <div class="metric-label">–ê–≥–µ–Ω—Ç–æ–≤</div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-value" id="activeTasks">0</div>
                        <div class="metric-label">–ó–∞–¥–∞—á</div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-value" id="responseTime">0ms</div>
                        <div class="metric-label">–û—Ç–∫–ª–∏–∫</div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-value" id="uptime">0h</div>
                        <div class="metric-label">–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="panel">
            <h2>ü§ñ –ê–∫—Ç–∏–≤–Ω—ã–µ –ê–≥–µ–Ω—Ç—ã</h2>
            <div class="agent-list" id="agentList">
                <div class="agent-item">
                    <div class="agent-info">
                        <div class="agent-name">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
                        <div class="agent-type">–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</div>
                    </div>
                    <span class="agent-status status-idle">–ó–∞–≥—Ä—É–∑–∫–∞</span>
                </div>
            </div>
        </div>
        
        <div class="footer">
            <p>Unified Neural Interface v1.0.0</p>
            <p>–°—Ç–∞—Ç—É—Å: <span class="status" id="systemStatus">–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...</span></p>
            <p>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: <span id="lastUpdate">-</span></p>
        </div>
    </div>

    <script>
        let ws = null;
        let isConnected = false;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        function initWebSocket() {
            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const wsUrl = `${protocol}//${window.location.host}/ws`;
            
            ws = new WebSocket(wsUrl);
            
            ws.onopen = function(event) {
                isConnected = true;
                updateSystemStatus('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ', 'status-healthy');
                addMessage('system', 'WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            };
            
            ws.onmessage = function(event) {
                const data = JSON.parse(event.data);
                handleWebSocketMessage(data);
            };
            
            ws.onclose = function(event) {
                isConnected = false;
                updateSystemStatus('–û—Ç–∫–ª—é—á–µ–Ω–æ', 'status-error');
                addMessage('system', 'WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ');
                
                // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                setTimeout(initWebSocket, 3000);
            };
            
            ws.onerror = function(error) {
                console.error('WebSocket error:', error);
                updateSystemStatus('–û—à–∏–±–∫–∞', 'status-error');
            };
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π WebSocket
        function handleWebSocketMessage(data) {
            switch(data.type) {
                case 'system_status':
                    updateSystemMetrics(data.data);
                    break;
                case 'agent_update':
                    updateAgentList(data.data);
                    break;
                case 'chat_response':
                    addMessage('ai', data.data.response, data.data.agent);
                    break;
                case 'system_message':
                    addMessage('system', data.data.message);
                    break;
            }
        }
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        function sendMessage() {
            const input = document.getElementById('messageInput');
            const agentSelect = document.getElementById('agentSelect');
            const message = input.value.trim();
            
            if (!message) return;
            
            if (!isConnected) {
                addMessage('system', '–û—à–∏–±–∫–∞: –Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
                return;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
            addMessage('user', message);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket
            ws.send(JSON.stringify({
                type: 'chat_message',
                data: {
                    message: message,
                    agent_type: agentSelect.value,
                    user_id: 'web_user'
                }
            }));
            
            input.value = '';
        }
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
        function addMessage(type, content, agent = null) {
            const container = document.getElementById('chatContainer');
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${type}-message`;
            
            let messageContent = content;
            if (agent) {
                messageContent = `<strong>${agent}:</strong> ${content}`;
            }
            
            messageDiv.innerHTML = messageContent;
            container.appendChild(messageDiv);
            container.scrollTop = container.scrollHeight;
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
        function updateSystemStatus(text, statusClass) {
            const statusElement = document.getElementById('systemStatus');
            statusElement.textContent = text;
            statusElement.className = statusClass;
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã
        function updateSystemMetrics(data) {
            document.getElementById('totalAgents').textContent = data.total_agents || 0;
            document.getElementById('activeTasks').textContent = data.active_tasks || 0;
            document.getElementById('responseTime').textContent = `${Math.round(data.average_response_time || 0)}ms`;
            document.getElementById('uptime').textContent = `${Math.round((data.uptime || 0) / 3600)}h`;
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            updateComponentStatus('aiEngineStatus', 'aiEngineText', data.components?.ai_engine?.healthy);
            updateComponentStatus('multiAgentStatus', 'multiAgentText', data.components?.multi_agent?.system_status === 'running');
            updateComponentStatus('visualMonitorStatus', 'visualMonitorText', data.components?.visual_monitor?.active);
            updateComponentStatus('autonomousStatus', 'autonomousText', data.running);
            
            document.getElementById('lastUpdate').textContent = new Date().toLocaleTimeString();
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        function updateComponentStatus(statusId, textId, isHealthy) {
            const statusElement = document.getElementById(statusId);
            const textElement = document.getElementById(textId);
            
            if (isHealthy) {
                statusElement.className = 'status-indicator status-healthy';
                textElement.textContent = '–ó–¥–æ—Ä–æ–≤';
            } else {
                statusElement.className = 'status-indicator status-error';
                textElement.textContent = '–û—à–∏–±–∫–∞';
            }
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤
        function updateAgentList(agents) {
            const container = document.getElementById('agentList');
            container.innerHTML = '';
            
            if (!agents || agents.length === 0) {
                container.innerHTML = '<div class="agent-item"><div class="agent-info"><div class="agent-name">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤</div></div></div>';
                return;
            }
            
            agents.forEach(agent => {
                const agentDiv = document.createElement('div');
                agentDiv.className = 'agent-item';
                
                const statusClass = `status-${agent.status}`;
                const statusText = agent.status === 'idle' ? '–°–≤–æ–±–æ–¥–µ–Ω' : 
                                 agent.status === 'working' ? '–†–∞–±–æ—Ç–∞–µ—Ç' : 
                                 agent.status === 'busy' ? '–ó–∞–Ω—è—Ç' : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                
                agentDiv.innerHTML = `
                    <div class="agent-info">
                        <div class="agent-name">${agent.name}</div>
                        <div class="agent-type">${agent.type}</div>
                    </div>
                    <span class="agent-status ${statusClass}">${statusText}</span>
                `;
                
                container.appendChild(agentDiv);
            });
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        document.getElementById('messageInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.addEventListener('DOMContentLoaded', function() {
            initWebSocket();
            
            // –ó–∞–ø—Ä–æ—Å –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
            fetch('/api/system/status')
                .then(response => response.json())
                .then(data => {
                    updateSystemMetrics(data);
                })
                .catch(error => {
                    console.error('Error fetching system status:', error);
                });
        });
    </script>
</body>
</html>
"""

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    global system_initialized, multi_agent_system
    
    try:
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Unified Neural Interface...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        await enhanced_ai_engine.initialize()
        await autonomous_neural_system.initialize()
        await visual_monitor.initialize()
        
        # –°–æ–∑–¥–∞–µ–º Multi-Agent System
        multi_agent_system = MultiAgentSystem()
        
        system_initialized = True
        logger.info("‚úÖ Unified Neural Interface –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

@app.get("/", response_class=HTMLResponse)
async def get_interface():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    return HTML_INTERFACE

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """WebSocket endpoint –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    await websocket.accept()
    connected_clients.append(websocket)
    
    try:
        while True:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            data = await websocket.receive_text()
            message_data = json.loads(data)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if message_data.get("type") == "chat_message":
                await handle_chat_message(websocket, message_data["data"])
            elif message_data.get("type") == "system_config":
                await handle_system_config(websocket, message_data["data"])
            
    except WebSocketDisconnect:
        connected_clients.remove(websocket)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}")
        if websocket in connected_clients:
            connected_clients.remove(websocket)

async def handle_chat_message(websocket: WebSocket, data: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞"""
    try:
        message = data.get("message", "")
        agent_type = data.get("agent_type", "general")
        user_id = data.get("user_id", "user")
        
        if not message:
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Multi-Agent System
        if multi_agent_system:
            result = await multi_agent_system.process_user_message(message, user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
            await websocket.send_text(json.dumps({
                "type": "chat_response",
                "data": {
                    "response": result.get("response", {}).get("response", "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"),
                    "agent": result.get("agent", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≥–µ–Ω—Ç"),
                    "agent_type": result.get("agent_type", "general")
                }
            }))
        else:
            # Fallback —á–µ—Ä–µ–∑ Enhanced AI Engine
            response = await generate_ai_response(message)
            await websocket.send_text(json.dumps({
                "type": "chat_response",
                "data": {
                    "response": response,
                    "agent": "AI Assistant",
                    "agent_type": "general"
                }
            }))
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞: {e}")
        await websocket.send_text(json.dumps({
            "type": "system_message",
            "data": {"message": f"–û—à–∏–±–∫–∞: {str(e)}"}
        }))

async def handle_system_config(websocket: WebSocket, data: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        await websocket.send_text(json.dumps({
            "type": "system_message",
            "data": {"message": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞"}
        }))
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

@app.get("/api/system/status")
async def get_system_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        if not system_initialized:
            return {"error": "System not initialized"}
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        ai_status = await enhanced_ai_engine.get_system_status()
        autonomous_status = await autonomous_neural_system.get_system_status()
        visual_status = await visual_monitor.get_status()
        
        # –°—Ç–∞—Ç—É—Å Multi-Agent System
        multi_agent_status = None
        if multi_agent_system:
            multi_agent_status = multi_agent_system.get_system_status()
        
        return {
            "system_initialized": system_initialized,
            "uptime": time.time() - autonomous_status.get("uptime", 0),
            "total_agents": multi_agent_status.get("total_agents", 0) if multi_agent_status else 0,
            "active_tasks": autonomous_status.get("task_queue_size", 0),
            "average_response_time": ai_status.get("performance", {}).get("average_response_time", 0),
            "components": {
                "ai_engine": ai_status,
                "multi_agent": multi_agent_status,
                "visual_monitor": visual_status,
                "autonomous_system": autonomous_status
            },
            "running": autonomous_status.get("running", False)
        }
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
        return {"error": str(e)}

@app.get("/api/agents")
async def get_agents():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤"""
    try:
        if not multi_agent_system:
            return {"agents": []}
        
        agents = multi_agent_system.get_available_agents()
        return {"agents": agents}
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤: {e}")
        return {"error": str(e)}

@app.post("/api/chat/send")
async def send_chat_message(message: ChatMessage):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç"""
    try:
        if not system_initialized:
            raise HTTPException(status_code=503, detail="System not initialized")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if multi_agent_system:
            result = await multi_agent_system.process_user_message(message.message, message.user_id)
        else:
            result = {"response": {"response": await generate_ai_response(message.message)}}
        
        return {
            "success": True,
            "response": result.get("response", {}).get("response", ""),
            "agent": result.get("agent", "AI Assistant"),
            "timestamp": datetime.now().isoformat()
        }
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/tasks")
async def create_task(task: TaskRequest):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
    try:
        if not system_initialized:
            raise HTTPException(status_code=503, detail="System not initialized")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á
        return {
            "success": True,
            "task_id": f"task_{int(time.time())}",
            "message": "–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
        }
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/visual/report")
async def get_visual_report():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    try:
        if not system_initialized:
            raise HTTPException(status_code=503, detail="System not initialized")
        
        report = await visual_monitor.generate_visual_report()
        return report
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
async def broadcast_update(update_type: str, data: Dict[str, Any]):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
    if not connected_clients:
        return
    
    message = json.dumps({
        "type": update_type,
        "data": data
    })
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
    disconnected_clients = []
    for client in connected_clients:
        try:
            await client.send_text(message)
        except:
            disconnected_clients.append(client)
    
    # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    for client in disconnected_clients:
        connected_clients.remove(client)

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞
async def status_broadcast_task():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞"""
    while True:
        try:
            if connected_clients and system_initialized:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
                status = await get_system_status()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                await broadcast_update("system_status", status)
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤
                if multi_agent_system:
                    agents = multi_agent_system.get_available_agents()
                    await broadcast_update("agent_update", agents)
            
            await asyncio.sleep(5)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ broadcast: {e}")
            await asyncio.sleep(10)

# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
@app.on_event("startup")
async def start_background_tasks():
    """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
    asyncio.create_task(status_broadcast_task())

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=8081,
        log_level="info"
    )