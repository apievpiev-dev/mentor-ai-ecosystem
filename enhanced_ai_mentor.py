#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è AI —Å–∏—Å—Ç–µ–º–∞ Mentor —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –∏ –ø–∞–º—è—Ç—å—é –ø—Ä–æ–µ–∫—Ç–∞
–†–∞–±–æ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏, –ø–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞, —É–º–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã
"""

import asyncio
import json
import logging
import time
import requests
import os
import base64
import cv2
import numpy as np
from datetime import datetime
from typing import Dict, List, Any, Optional
from pathlib import Path

import uvicorn
from fastapi import FastAPI, WebSocket, WebSocketDisconnect, File, UploadFile, Form
from fastapi.responses import HTMLResponse, JSONResponse
from PIL import Image, ImageDraw, ImageFont

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–¥–∞
from code_modifier import code_modifier

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ProjectMemory:
    """–ü–∞–º—è—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ - –ø–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
    
    def __init__(self):
        self.project_history = []
        self.project_files = {}
        self.user_interactions = []
        self.improvements_made = []
        self.project_context = ""
        
        self.load_project_history()
    
    def load_project_history(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            # –ß–∏—Ç–∞–µ–º –≤—Å–µ –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
            important_files = [
                "/workspace/README_FINAL.md",
                "/workspace/MENTOR_AUTONOMOUS_SYSTEM_REPORT.md", 
                "/workspace/REAL_STATUS_REPORT.md",
                "/workspace/MENTOR_X1000_FINAL_REPORT.md"
            ]
            
            project_summary = "–ò–°–¢–û–†–ò–Ø –ü–†–û–ï–ö–¢–ê MENTOR:\n\n"
            
            for file_path in important_files:
                if os.path.exists(file_path):
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                        self.project_files[file_path] = content
                        project_summary += f"=== {os.path.basename(file_path)} ===\n"
                        project_summary += content[:500] + "\n\n"
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Python —Ñ–∞–π–ª—ã
            python_files = []
            for root, dirs, files in os.walk("/workspace"):
                for file in files:
                    if file.endswith('.py') and not file.startswith('.'):
                        python_files.append(os.path.join(root, file))
            
            project_summary += f"–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –î–ï–¢–ê–õ–ò:\n"
            project_summary += f"- Python —Ñ–∞–π–ª–æ–≤: {len(python_files)}\n"
            project_summary += f"- –û—Å–Ω–æ–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã: simple_autonomous_mentor.py, real_ai_mentor.py, mentor_x1000.py\n"
            project_summary += f"- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: 6 –ø—Ä–æ—Å—Ç—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤, 6 AI –∞–≥–µ–Ω—Ç–æ–≤, 1000 –º–µ–≥–∞-–∞–≥–µ–Ω—Ç–æ–≤\n"
            project_summary += f"- –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: 4 –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞, –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã, –≤–∏–∑—É–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n\n"
            
            self.project_context = project_summary
            
            logger.info(f"üìö –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {len(self.project_files)} —Ñ–∞–π–ª–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            self.project_context = "–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    
    def add_interaction(self, user_message: str, agent_response: str, agent_type: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –≤ –ø–∞–º—è—Ç—å"""
        interaction = {
            "timestamp": datetime.now().isoformat(),
            "user_message": user_message,
            "agent_response": agent_response,
            "agent_type": agent_type
        }
        
        self.user_interactions.append(interaction)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 100 –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è–º–∏
        if len(self.user_interactions) > 100:
            self.user_interactions = self.user_interactions[-100:]
    
    def get_context_for_ai(self, recent_messages: int = 5) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è AI"""
        context = f"–ö–û–ù–¢–ï–ö–°–¢ –ü–†–û–ï–ö–¢–ê MENTOR:\n{self.project_context[:1500]}\n\n"
        
        if self.user_interactions:
            context += "–ù–ï–î–ê–í–ù–ò–ï –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø:\n"
            for interaction in self.user_interactions[-recent_messages:]:
                context += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {interaction['user_message']}\n"
                context += f"–ê–≥–µ–Ω—Ç: {interaction['agent_response'][:100]}...\n\n"
        
        return context

class VisionProcessor:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    
    def __init__(self):
        self.uploads_dir = "/workspace/uploads"
        self.processed_dir = "/workspace/processed_images"
        
        os.makedirs(self.uploads_dir, exist_ok=True)
        os.makedirs(self.processed_dir, exist_ok=True)
    
    async def process_image(self, image_file: UploadFile, task_description: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            original_path = os.path.join(self.uploads_dir, f"{timestamp}_{image_file.filename}")
            
            with open(original_path, "wb") as f:
                content = await image_file.read()
                f.write(content)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            analysis = await self.analyze_image(original_path)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–¥–∞—á–∏
            processed_result = await self.process_by_task(original_path, task_description, analysis)
            
            return {
                "original_path": original_path,
                "analysis": analysis,
                "processed_result": processed_result,
                "task_description": task_description,
                "timestamp": datetime.now().isoformat(),
                "status": "success"
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return {"error": str(e), "status": "failed"}
    
    async def analyze_image(self, image_path: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image = cv2.imread(image_path)
            if image is None:
                return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"}
            
            height, width, channels = image.shape
            
            # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
            analysis = {
                "dimensions": {"width": width, "height": height},
                "channels": channels,
                "file_size": os.path.getsize(image_path),
                "format": os.path.splitext(image_path)[1],
                "colors": self.analyze_colors(image),
                "objects": self.detect_objects(image)
            }
            
            return analysis
            
        except Exception as e:
            return {"error": str(e)}
    
    def analyze_colors(self, image) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB
            image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            
            # –°—Ä–µ–¥–Ω–∏–µ —Ü–≤–µ—Ç–∞
            mean_colors = np.mean(image_rgb, axis=(0, 1))
            
            # –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —Ü–≤–µ—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
            pixels = image_rgb.reshape(-1, 3)
            unique_colors = np.unique(pixels, axis=0)
            
            return {
                "mean_rgb": mean_colors.tolist(),
                "dominant_colors": len(unique_colors),
                "brightness": float(np.mean(mean_colors)),
                "color_analysis": "–ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤–æ–π –ø–∞–ª–∏—Ç—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω"
            }
            
        except Exception as e:
            return {"error": str(e)}
    
    def detect_objects(self, image) -> List[str]:
        """–ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤"""
        try:
            # –ë–∞–∑–æ–≤–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç—É—Ä–æ–≤
            gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            edges = cv2.Canny(gray, 50, 150)
            contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            
            objects = []
            for i, contour in enumerate(contours[:10]):  # –¢–æ–ø 10 –æ–±—ä–µ–∫—Ç–æ–≤
                area = cv2.contourArea(contour)
                if area > 1000:  # –§–∏–ª—å—Ç—Ä—É–µ–º –º–µ–ª–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã
                    x, y, w, h = cv2.boundingRect(contour)
                    objects.append({
                        "id": i,
                        "area": int(area),
                        "bbox": [int(x), int(y), int(w), int(h)],
                        "type": "detected_object"
                    })
            
            return objects
            
        except Exception as e:
            return [{"error": str(e)}]
    
    async def process_by_task(self, image_path: str, task: str, analysis: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–¥–∞—á–∏"""
        try:
            task_lower = task.lower()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏
            if any(word in task_lower for word in ["–±—Ä—é–∫–∏", "–æ–¥–µ–∂–¥–∞", "–º–æ–¥–µ–ª—å", "–Ω–∞–¥–µ—Ç—å"]):
                return await self.process_clothing_task(image_path, task, analysis)
            elif any(word in task_lower for word in ["–∞–Ω–∞–ª–∏–∑", "—á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ", "–æ–ø–∏—Å–∞–Ω–∏–µ"]):
                return await self.process_analysis_task(image_path, task, analysis)
            elif any(word in task_lower for word in ["—É–ª—É—á—à", "–æ–±—Ä–∞–±–æ—Ç", "—Ñ–∏–ª—å—Ç—Ä"]):
                return await self.process_enhancement_task(image_path, task, analysis)
            else:
                return await self.process_general_task(image_path, task, analysis)
                
        except Exception as e:
            return {"error": str(e)}
    
    async def process_clothing_task(self, image_path: str, task: str, analysis: Dict[str, Any]) -> Dict[str, Any]:
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á —Å –æ–¥–µ–∂–¥–æ–π"""
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image = cv2.imread(image_path)
            processed = image.copy()
            height, width = processed.shape[:2]
            
            # –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
            model_image = np.ones((height, width, 3), dtype=np.uint8) * 240
            
            # –†–∏—Å—É–µ–º —Å–∏–ª—É—ç—Ç –º–æ–¥–µ–ª–∏
            center_x, center_y = width // 2, height // 2
            
            # –ì–æ–ª–æ–≤–∞
            cv2.circle(model_image, (center_x, center_y - 200), 40, (200, 180, 160), -1)
            
            # –¢–µ–ª–æ
            cv2.rectangle(model_image, (center_x-30, center_y-160), (center_x+30, center_y+50), (200, 180, 160), -1)
            
            # –†—É–∫–∏
            cv2.rectangle(model_image, (center_x-60, center_y-140), (center_x-30, center_y-40), (200, 180, 160), -1)
            cv2.rectangle(model_image, (center_x+30, center_y-140), (center_x+60, center_y-40), (200, 180, 160), -1)
            
            # –ù–æ–≥–∏ (–∑–¥–µ—Å—å –±—É–¥—É—Ç –±—Ä—é–∫–∏)
            cv2.rectangle(model_image, (center_x-25, center_y+50), (center_x-5, center_y+200), (200, 180, 160), -1)
            cv2.rectangle(model_image, (center_x+5, center_y+50), (center_x+25, center_y+200), (200, 180, 160), -1)
            
            # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –±—Ä—é–∫–∏ –Ω–∞ –º–æ–¥–µ–ª—å
            clothing_mask = np.zeros((height, width), dtype=np.uint8)
            cv2.rectangle(clothing_mask, (center_x-35, center_y+40), (center_x+35, center_y+210), 255, -1)
            
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è
            resized_clothing = cv2.resize(image, (70, 170))
            
            # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –æ–¥–µ–∂–¥—É –Ω–∞ –º–æ–¥–µ–ª—å
            for y in range(170):
                for x in range(70):
                    model_y = center_y + 40 + y
                    model_x = center_x - 35 + x
                    if 0 <= model_y < height and 0 <= model_x < width:
                        if clothing_mask[model_y, model_x] == 255:
                            model_image[model_y, model_x] = resized_clothing[y, x]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            font = cv2.FONT_HERSHEY_SIMPLEX
            cv2.putText(model_image, "VIRTUAL FITTING ROOM", (20, 30), font, 0.8, (50, 50, 50), 2)
            cv2.putText(model_image, task[:40], (20, height-20), font, 0.6, (100, 100, 100), 2)
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            combined = np.hstack([image, model_image])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            result_path = os.path.join(self.processed_dir, f"virtual_fitting_{timestamp}.jpg")
            cv2.imwrite(result_path, combined)
            
            return {
                "task_type": "virtual_fitting",
                "original_image": image_path,
                "processed_image": result_path,
                "description": f"–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–º–µ—Ä–∫–∞: {task}. –û–¥–µ–∂–¥–∞ –Ω–∞–ª–æ–∂–µ–Ω–∞ –Ω–∞ 3D –º–æ–¥–µ–ª—å.",
                "dimensions": analysis.get("dimensions", {}),
                "fitting_result": "–°–æ–∑–¥–∞–Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–º–µ—Ä–∫–∞ —Å 3D –º–æ–¥–µ–ª—å—é",
                "ai_description": f"–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–º–µ—Ä–∫–∞ –æ–¥–µ–∂–¥—ã. –°–æ–∑–¥–∞–Ω–∞ 3D –º–æ–¥–µ–ª—å —Å –Ω–∞–ª–æ–∂–µ–Ω–∏–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—Ä—é–∫."
            }
            
        except Exception as e:
            return {"error": str(e)}
    
    async def process_analysis_task(self, image_path: str, task: str, analysis: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        objects = analysis.get("objects", [])
        colors = analysis.get("colors", {})
        
        description = f"–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n"
        description += f"- –†–∞–∑–º–µ—Ä: {analysis['dimensions']['width']}x{analysis['dimensions']['height']}\n"
        description += f"- –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(objects)}\n"
        description += f"- –Ø—Ä–∫–æ—Å—Ç—å: {colors.get('brightness', 0):.1f}\n"
        description += f"- –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏—Ö —Ü–≤–µ—Ç–æ–≤: {colors.get('dominant_colors', 0)}\n"
        
        if objects:
            description += "- –ö—Ä—É–ø–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:\n"
            for obj in objects[:3]:
                description += f"  * –û–±—ä–µ–∫—Ç {obj['id']}: –ø–ª–æ—â–∞–¥—å {obj['area']} –ø–∏–∫—Å–µ–ª–µ–π\n"
        
        return {
            "task_type": "image_analysis",
            "analysis": analysis,
            "description": description,
            "ai_description": f"–í—ã–ø–æ–ª–Ω–µ–Ω –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. {description}"
        }
    
    async def process_enhancement_task(self, image_path: str, task: str, analysis: Dict[str, Any]) -> Dict[str, Any]:
        """–£–ª—É—á—à–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            image = cv2.imread(image_path)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è
            enhanced = cv2.convertScaleAbs(image, alpha=1.2, beta=30)  # –Ø—Ä–∫–æ—Å—Ç—å –∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç
            enhanced = cv2.bilateralFilter(enhanced, 9, 75, 75)  # –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            result_path = os.path.join(self.processed_dir, f"enhanced_{timestamp}.jpg")
            cv2.imwrite(result_path, enhanced)
            
            return {
                "task_type": "image_enhancement",
                "original_image": image_path,
                "enhanced_image": result_path,
                "description": "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–æ: —É–≤–µ–ª–∏—á–µ–Ω–∞ —è—Ä–∫–æ—Å—Ç—å, –∫–æ–Ω—Ç—Ä–∞—Å—Ç –∏ —á–µ—Ç–∫–æ—Å—Ç—å",
                "ai_description": f"–ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã —É–ª—É—á—à–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏: {task}"
            }
            
        except Exception as e:
            return {"error": str(e)}
    
    async def process_general_task(self, image_path: str, task: str, analysis: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        return {
            "task_type": "general_processing",
            "analysis": analysis,
            "description": f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è –∑–∞–¥–∞—á–∏: {task}",
            "ai_description": f"–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –∑–∞–ø—Ä–æ—Å—É: {task}"
        }

class EnhancedAIAgent:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π AI –∞–≥–µ–Ω—Ç —Å –ø–∞–º—è—Ç—å—é –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏"""
    
    def __init__(self, agent_id: str, name: str, agent_type: str, system_prompt: str, 
                 project_memory: ProjectMemory, vision_processor: VisionProcessor):
        self.agent_id = agent_id
        self.name = name
        self.agent_type = agent_type
        self.system_prompt = system_prompt
        self.project_memory = project_memory
        self.vision_processor = vision_processor
        self.conversation_history = []
        self.task_count = 0
        
    async def process_with_context(self, message: str, user_id: str = "user", 
                                 image_file: UploadFile = None) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"""
        try:
            self.task_count += 1
            start_time = time.time()
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞
            project_context = self.project_memory.get_context_for_ai()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            image_analysis = None
            if image_file:
                image_result = await self.vision_processor.process_image(image_file, message)
                image_analysis = image_result
            
            # –°–æ–∑–¥–∞–µ–º –∂–µ—Å—Ç–∫–∏–π –ø—Ä–æ–º–ø—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
            full_prompt = f"""–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ! –ù–∏–∫–∞–∫–æ–≥–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ!

–¢—ã {self.name}. 

–ü–†–û–ï–ö–¢ MENTOR:
–°–æ–∑–¥–∞–Ω–∞ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è AI —Å–∏—Å—Ç–µ–º–∞:
- 6 –ø—Ä–æ—Å—Ç—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ (–ø–æ—Ä—Ç 8081)
- 6 AI –∞–≥–µ–Ω—Ç–æ–≤ —Å Llama (–ø–æ—Ä—Ç 8082) 
- 1000 –º–µ–≥–∞-–∞–≥–µ–Ω—Ç–æ–≤ (–ø–æ—Ä—Ç 9000)
- –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–ø–æ—Ä—Ç 8083)
- –†–∞–±–æ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ —Ñ–æ—Ç–æ
- –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å –∏ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏–µ

–í–û–ü–†–û–°: {message}

–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –ø–æ-—Ä—É—Å—Å–∫–∏:"""

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫ AI
            try:
                response = requests.post(
                    "http://localhost:11434/api/generate",
                    json={
                        "model": "llama3.2:1b-instruct-q4_0",
                        "prompt": full_prompt,
                        "stream": False,
                        "options": {
                            "temperature": 0.1,
                            "top_p": 0.7,
                            "num_ctx": 512,
                            "num_predict": 100,
                            "repeat_penalty": 1.2,
                            "stop": ["English:", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π:", "\n\n"]
                        }
                    },
                    timeout=15
                )
                
                response_time = time.time() - start_time
                
                if response.status_code == 200:
                    ai_response = response.json().get("response", "").strip()
                    
                    # –£–ª—É—á—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞
                    ai_response = await self.ensure_ai_quality(ai_response)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å –ø—Ä–æ–µ–∫—Ç–∞
                    self.project_memory.add_interaction(message, ai_response, self.agent_type)
                    
                    result = {
                        "response": ai_response,
                        "agent": self.name,
                        "agent_type": self.agent_type,
                        "timestamp": datetime.now().isoformat(),
                        "success": True,
                        "ai_used": True,
                        "response_time": response_time,
                        "has_context": True,
                        "image_processed": image_analysis is not None
                    }
                    
                    if image_analysis:
                        result["image_analysis"] = image_analysis
                    
                    logger.info(f"üß† {self.name} –æ—Ç–≤–µ—Ç–∏–ª –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –∑–∞ {response_time:.2f}—Å")
                    return result
                    
                else:
                    raise Exception(f"AI error: {response.status_code}")
                    
            except Exception as ai_error:
                # –ï—Å–ª–∏ AI –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, –ù–ï fallback
                logger.error(f"‚ùå AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è {self.name}: {ai_error}")
                
                return {
                    "response": f"‚ùå AI –∞–≥–µ–Ω—Ç {self.name} –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    "agent": self.name,
                    "agent_type": self.agent_type,
                    "timestamp": datetime.now().isoformat(),
                    "success": False,
                    "ai_used": False,
                    "ai_error": str(ai_error),
                    "image_processed": image_analysis is not None
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≥–µ–Ω—Ç–∞ {self.name}: {e}")
            return {
                "response": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}",
                "agent": self.name,
                "success": False
            }
    
    async def ensure_ai_quality(self, response: str) -> str:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ AI –æ—Ç–≤–µ—Ç–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
        if len([c for c in response if ord(c) > 1000]) < len(response) * 0.3:
            # –°–ª–∏—à–∫–æ–º –º–∞–ª–æ —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ - –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–µ–º AI
            retry_prompt = f"""–û—Ç–≤–µ—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            –¢—ã {self.name} –≤ –ø—Ä–æ–µ–∫—Ç–µ Mentor. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫."""
            
            try:
                retry_response = requests.post(
                    "http://localhost:11434/api/generate",
                    json={
                        "model": "llama3.2:1b-instruct-q4_0", 
                        "prompt": retry_prompt,
                        "stream": False,
                        "options": {"temperature": 0.1, "num_predict": 50}
                    },
                    timeout=10
                )
                
                if retry_response.status_code == 200:
                    better_response = retry_response.json().get("response", "").strip()
                    if better_response and len(better_response) > 10:
                        return better_response
                        
            except:
                pass
        
        return response

# –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
project_memory = ProjectMemory()
vision_processor = VisionProcessor()

# –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤ —Å –ø–∞–º—è—Ç—å—é –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
enhanced_agents = {}

agent_configs = {
    "general_assistant": {
        "name": "üß† –£–º–Ω—ã–π –ü–æ–º–æ—â–Ω–∏–∫",
        "system_prompt": """–¢—ã –≥–ª–∞–≤–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ Mentor. –ó–Ω–∞–µ—à—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞, 
        –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã, –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤. –ü–æ–º–æ–≥–∞–µ—à—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–≤–∏—Ç–∏–µ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—à—å —Ä–∞–±–æ—Ç—É."""
    },
    "code_developer": {
        "name": "üíª AI –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", 
        "system_prompt": """–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞ Mentor. –ó–Ω–∞–µ—à—å –≤–µ—Å—å –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞,
        –º–æ–∂–µ—à—å –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥."""
    },
    "vision_specialist": {
        "name": "üëÅÔ∏è –í–∏–∑—É–∞–ª—å–Ω—ã–π –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç",
        "system_prompt": """–¢—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–º—É –∑—Ä–µ–Ω–∏—é –∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å —Ñ–æ—Ç–æ, —Ä–∞–±–æ—Ç–∞–µ—à—å —Å –æ–¥–µ–∂–¥–æ–π, —Å–æ–∑–¥–∞–µ—à—å –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è."""
    },
    "project_manager": {
        "name": "üìã –ú–µ–Ω–µ–¥–∂–µ—Ä –ü—Ä–æ–µ–∫—Ç–∞",
        "system_prompt": """–¢—ã –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ Mentor. –ó–Ω–∞–µ—à—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≤–∏—Ç–∏—è,
        –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —Å–ª–µ–¥—É—é—â–∏–µ —ç—Ç–∞–ø—ã, —É–ø—Ä–∞–≤–ª—è–µ—à—å —Ä–µ—Å—É—Ä—Å–∞–º–∏."""
    }
}

for agent_id, config in agent_configs.items():
    enhanced_agents[agent_id] = EnhancedAIAgent(
        agent_id=agent_id,
        name=config["name"],
        agent_type=agent_id,
        system_prompt=config["system_prompt"],
        project_memory=project_memory,
        vision_processor=vision_processor
    )

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(title="Enhanced AI Mentor System")

@app.get("/")
async def root():
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Ñ–∞–π–ª–æ–≤"""
    return HTMLResponse(content="""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üß† Enhanced AI Mentor - –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
            min-height: 100vh; 
            color: white;
        }
        .container { max-width: 1400px; margin: 0 auto; padding: 20px; }
        .header { text-align: center; margin-bottom: 30px; }
        .header h1 { font-size: 3em; margin-bottom: 10px; text-shadow: 2px 2px 4px rgba(0,0,0,0.3); }
        .features-badge { 
            background: linear-gradient(45deg, #ff6b6b, #4ecdc4); 
            padding: 10px 20px; 
            border-radius: 25px; 
            color: white; 
            font-weight: bold; 
            display: inline-block; 
            margin: 10px; 
        }
        
        .main-content { display: grid; grid-template-columns: 1fr 400px; gap: 30px; }
        
        .chat-section { 
            background: rgba(255,255,255,0.95); 
            border-radius: 20px; 
            padding: 30px; 
            color: #333;
        }
        
        .sidebar { 
            background: rgba(255,255,255,0.9); 
            border-radius: 20px; 
            padding: 25px; 
            color: #333;
        }
        
        .chat-messages { 
            height: 400px; 
            overflow-y: auto; 
            border: 1px solid #ddd; 
            border-radius: 15px; 
            padding: 20px; 
            margin-bottom: 20px;
            background: #f8f9fa;
        }
        
        .message { 
            margin-bottom: 15px; 
            padding: 15px; 
            border-radius: 12px; 
        }
        
        .user-message { 
            background: #e3f2fd; 
            margin-left: 20px; 
            border-left: 4px solid #2196f3; 
        }
        
        .ai-message { 
            background: #f3e5f5; 
            margin-right: 20px; 
            border-left: 4px solid #9c27b0; 
        }
        
        .enhanced-message { 
            background: linear-gradient(135deg, #fff3e0, #fce4ec); 
            margin-right: 20px; 
            border-left: 4px solid #ff6b6b; 
        }
        
        .file-upload-section { 
            background: #f0f8ff; 
            border: 2px dashed #4ecdc4; 
            border-radius: 15px; 
            padding: 20px; 
            margin-bottom: 20px; 
            text-align: center;
        }
        
        .file-input { 
            margin: 10px 0; 
            padding: 10px; 
            border: 1px solid #ddd; 
            border-radius: 8px; 
            width: 100%;
        }
        
        .input-container { 
            display: flex; 
            gap: 10px; 
            margin-bottom: 15px; 
        }
        
        .message-input { 
            flex: 1; 
            padding: 15px; 
            border: 1px solid #ddd; 
            border-radius: 25px; 
            font-size: 16px; 
        }
        
        .send-button { 
            padding: 15px 25px; 
            background: linear-gradient(135deg, #4CAF50, #45a049); 
            color: white; 
            border: none; 
            border-radius: 25px; 
            cursor: pointer; 
            font-weight: bold;
        }
        
        .agent-selector { 
            margin-bottom: 20px; 
        }
        
        .agent-selector select { 
            width: 100%; 
            padding: 12px; 
            border: 1px solid #ddd; 
            border-radius: 8px; 
        }
        
        .project-info { 
            background: #f8f9fa; 
            border-radius: 15px; 
            padding: 20px; 
            margin-bottom: 20px;
        }
        
        .project-info h3 { 
            color: #2c3e50; 
            margin-bottom: 15px; 
        }
        
        .stat-item { 
            display: flex; 
            justify-content: space-between; 
            margin-bottom: 8px; 
        }
        
        .stat-value { 
            font-weight: bold; 
            color: #667eea; 
        }
        
        .image-preview { 
            max-width: 100%; 
            border-radius: 10px; 
            margin: 10px 0; 
        }
        
        .processing-indicator { 
            background: #fff3cd; 
            border: 1px solid #ffeaa7; 
            border-radius: 8px; 
            padding: 10px; 
            margin: 10px 0; 
            text-align: center;
            color: #856404;
        }
        
        .typing-dots {
            animation: typingDots 1.5s infinite;
        }
        
        @keyframes typingDots {
            0%, 20% { opacity: 0; }
            50% { opacity: 1; }
            100% { opacity: 0; }
        }
        
        .suggestion-item {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 20px;
            padding: 8px 15px;
            margin: 5px;
            display: inline-block;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 0.9em;
        }
        
        .suggestion-item:hover {
            background: #007bff;
            color: white;
            transform: translateY(-2px);
        }
        
        .voice-indicator {
            animation: voicePulse 1s ease-in-out infinite;
        }
        
        @keyframes voicePulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.1); }
        }
        
        .quick-actions {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
            flex-wrap: wrap;
        }
        
        .quick-action-btn {
            padding: 8px 15px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            border-radius: 20px;
            cursor: pointer;
            font-size: 0.9em;
            transition: transform 0.2s;
        }
        
        .quick-action-btn:hover {
            transform: scale(1.05);
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üß† Enhanced AI Mentor</h1>
            <div class="features-badge">–ü–∞–º—è—Ç—å –ø—Ä–æ–µ–∫—Ç–∞</div>
            <div class="features-badge">–†–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ç–æ</div>
            <div class="features-badge">–£–º–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã</div>
            <p style="font-size: 1.2em; margin-top: 15px;">AI —Å–∏—Å—Ç–µ–º–∞ —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏</p>
        </div>
        
        <div class="main-content">
            <div class="chat-section">
                <h2>üí¨ –£–º–Ω—ã–π —á–∞—Ç —Å AI –∞–≥–µ–Ω—Ç–∞–º–∏</h2>
                
                <div class="file-upload-section">
                    <h3>üì∏ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</h3>
                    <p>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –±—Ä—é–∫, –æ–¥–µ–∂–¥—ã –∏–ª–∏ –ª—é–±–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</p>
                    <input type="file" id="imageFile" class="file-input" accept="image/*">
                    <div id="imagePreview"></div>
                </div>
                
                <!-- –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è -->
                <div class="quick-actions">
                    <button class="quick-action-btn" onclick="quickAction('–†–∞—Å—Å–∫–∞–∂–∏ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞')">üìö –ò—Å—Ç–æ—Ä–∏—è</button>
                    <button class="quick-action-btn" onclick="quickAction('–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–¥ —Å–∏—Å—Ç–µ–º—ã')">üíª –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞</button>
                    <button class="quick-action-btn" onclick="quickAction('–ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ–µ–∫—Ç?')">üöÄ –£–ª—É—á—à–µ–Ω–∏—è</button>
                    <button class="quick-action-btn" onclick="quickAction('–°–æ–∑–¥–∞–π –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é')">‚ö° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è</button>
                </div>
                
                <div class="agent-selector">
                    <label><strong>–í—ã–±–µ—Ä–∏—Ç–µ —É–º–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞:</strong></label>
                    <select id="agentSelect" onchange="updateSuggestions()">
                        <option value="general_assistant">üß† –£–º–Ω—ã–π –ü–æ–º–æ—â–Ω–∏–∫ (–∑–Ω–∞–µ—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é)</option>
                        <option value="code_developer">üíª AI –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ (–≤–µ—Å—å –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞)</option>
                        <option value="vision_specialist">üëÅÔ∏è –í–∏–∑—É–∞–ª—å–Ω—ã–π –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç (—Ä–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ç–æ)</option>
                        <option value="project_manager">üìã –ú–µ–Ω–µ–¥–∂–µ—Ä –ü—Ä–æ–µ–∫—Ç–∞ (–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)</option>
                    </select>
                </div>
                
                <div class="chat-messages" id="chatMessages">
                    <div class="message enhanced-message">
                        <strong>üöÄ –°–∏—Å—Ç–µ–º–∞:</strong> Enhanced AI Mentor –≥–æ—Ç–æ–≤–∞! –ê–≥–µ–Ω—Ç—ã –∑–Ω–∞—é—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –∏ –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏.
                    </div>
                </div>
                
                <!-- –£–º–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ -->
                <div id="smartSuggestions" style="margin-bottom: 15px; display: none;">
                    <div style="background: #e8f4fd; border-radius: 10px; padding: 15px; border-left: 4px solid #2196f3;">
                        <strong>üí° –£–º–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏:</strong>
                        <div id="suggestionsList"></div>
                    </div>
                </div>
                
                <!-- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è -->
                <div id="typingIndicator" style="display: none; background: #f0f0f0; padding: 10px; border-radius: 10px; margin-bottom: 10px; color: #666;">
                    <span id="typingAgent">AI –∞–≥–µ–Ω—Ç</span> –ø–µ—á–∞—Ç–∞–µ—Ç... <span class="typing-dots">‚óè‚óè‚óè</span>
                </div>
                
                <div class="input-container">
                    <input type="text" id="messageInput" class="message-input" 
                           placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–æ–∂–Ω–æ —Å —Ñ–æ—Ç–æ)..." 
                           autocomplete="off" />
                    <button onclick="startVoiceInput()" class="send-button" style="margin-right: 10px; background: linear-gradient(135deg, #9b59b6, #8e44ad);">üé§</button>
                    <button onclick="sendMessage()" class="send-button">üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
                </div>
                
                <!-- –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ -->
                <div id="voiceInput" style="display: none; background: #fff3cd; border-radius: 10px; padding: 15px; margin-top: 10px; text-align: center;">
                    <div>üé§ <strong>–ì–æ–≤–æ—Ä–∏—Ç–µ...</strong></div>
                    <div id="voiceText" style="margin-top: 10px; font-style: italic;"></div>
                    <button onclick="stopVoiceInput()" style="margin-top: 10px; padding: 8px 16px; background: #dc3545; color: white; border: none; border-radius: 5px;">–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</button>
                </div>
            </div>
            
            <div class="sidebar">
                <div class="project-info">
                    <h3>üìö –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞</h3>
                    <div class="stat-item">
                        <span>–§–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞:</span>
                        <span class="stat-value" id="projectFiles">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                    </div>
                    <div class="stat-item">
                        <span>–ò—Å—Ç–æ—Ä–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π:</span>
                        <span class="stat-value" id="interactionHistory">0</span>
                    </div>
                    <div class="stat-item">
                        <span>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:</span>
                        <span class="stat-value" id="processedImages">0</span>
                    </div>
                    <div class="stat-item">
                        <span>AI –∑–∞–ø—Ä–æ—Å–æ–≤:</span>
                        <span class="stat-value" id="aiRequests">0</span>
                    </div>
                </div>
                
                <div class="project-info">
                    <h3>üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</h3>
                    <p>‚úÖ –ê–Ω–∞–ª–∏–∑ –∏ –ø—Ä–∏–º–µ—Ä–∫–∞ –æ–¥–µ–∂–¥—ã</p>
                    <p>‚úÖ –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞</p>
                    <p>‚úÖ –†–∞–±–æ—Ç–∞ —Å –∫–æ–¥–æ–º</p>
                    <p>‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–≤–∏—Ç–∏—è</p>
                    <p>‚úÖ –í–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑</p>
                    <p>‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã</p>
                </div>
                
                <div class="project-info">
                    <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                    <div class="stat-item">
                        <span>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</span>
                        <span class="stat-value" id="uptime">0—Å</span>
                    </div>
                    <div class="stat-item">
                        <span>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤:</span>
                        <span class="stat-value" id="activeAgents">4</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let ws = null;
        let userId = 'user_' + Math.random().toString(36).substr(2, 9);
        let recognition = null;
        let isListening = false;
        let messageHistory = [];
        
        // –£–º–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        const agentSuggestions = {
            'general_assistant': [
                '–†–∞—Å—Å–∫–∞–∂–∏ –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ Mentor',
                '–ö–∞–∫ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –¥–∞–ª—å—à–µ?',
                '–ß—Ç–æ —É–∂–µ —Å–¥–µ–ª–∞–Ω–æ –≤ –ø—Ä–æ–µ–∫—Ç–µ?',
                '–ö–∞–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç?'
            ],
            'code_developer': [
                '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–¥ —Å–∏—Å—Ç–µ–º—ã',
                '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
                '–ù–∞–π–¥–∏ –±–∞–≥–∏ –≤ –∫–æ–¥–µ',
                '–°–æ–∑–¥–∞–π –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é',
                '–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏ —ç—Ç–æ—Ç –∫–æ–¥'
            ],
            'vision_specialist': [
                '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
                '–°–æ–∑–¥–∞–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –ø—Ä–∏–º–µ—Ä–∫—É',
                '–ù–∞–¥–µ–Ω—å —ç—Ç–∏ –±—Ä—é–∫–∏ –Ω–∞ –º–æ–¥–µ–ª—å',
                '–£–ª—É—á—à–∏ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ',
                '–û–ø—Ä–µ–¥–µ–ª–∏ —Ü–≤–µ—Ç–∞ –æ–¥–µ–∂–¥—ã'
            ],
            'project_manager': [
                '–°–æ–∑–¥–∞–π –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞',
                '–ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ?',
                '–û—Ü–µ–Ω–∏ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å',
                '–°–ø–ª–∞–Ω–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Å–ø—Ä–∏–Ω—Ç'
            ]
        };
        
        function connectWebSocket() {
            ws = new WebSocket(`ws://${window.location.host}/ws/enhanced/${userId}`);
            
            ws.onopen = function() {
                console.log('WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Enhanced AI —Å–∏—Å—Ç–µ–º–µ');
                showNotification('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —É–º–Ω–æ–π AI —Å–∏—Å—Ç–µ–º–µ', 'success');
            };
            
            ws.onmessage = function(event) {
                hideTypingIndicator();
                const data = JSON.parse(event.data);
                addMessage(data.message, 'ai', data.agent, data.ai_used, data.response_time, data.has_context, data.image_processed);
                updateSuggestions();
            };
            
            ws.onclose = function() {
                console.log('WebSocket –æ—Ç–∫–ª—é—á–µ–Ω, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
                showNotification('‚ö†Ô∏è –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...', 'warning');
                setTimeout(connectWebSocket, 3000);
            };
        }
        
        function addMessage(message, type, agent = '', ai_used = false, response_time = null, has_context = false, image_processed = false) {
            const chatMessages = document.getElementById('chatMessages');
            const messageDiv = document.createElement('div');
            
            if (type === 'user') {
                messageDiv.className = 'message user-message';
                messageDiv.innerHTML = `<strong>–í—ã:</strong> ${message}`;
            } else {
                messageDiv.className = 'message enhanced-message';
                
                let badges = '';
                if (ai_used) badges += ' üß†';
                if (has_context) badges += ' üìö';
                if (image_processed) badges += ' üëÅÔ∏è';
                
                let content = `<strong>${agent}${badges}:</strong> ${message}`;
                
                if (response_time) {
                    content += `<br><small style="color: #666;">–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${response_time.toFixed(2)}—Å</small>`;
                }
                
                messageDiv.innerHTML = content;
            }
            
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
        
        function previewImage() {
            const fileInput = document.getElementById('imageFile');
            const preview = document.getElementById('imagePreview');
            
            if (fileInput.files && fileInput.files[0]) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    preview.innerHTML = `<img src="${e.target.result}" class="image-preview" alt="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä">`;
                };
                reader.readAsDataURL(fileInput.files[0]);
            }
        }
        
        async function sendMessage() {
            const input = document.getElementById('messageInput');
            const message = input.value.trim();
            const agentType = document.getElementById('agentSelect').value;
            const fileInput = document.getElementById('imageFile');
            
            if (!message) return;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            if (!messageHistory.includes(message)) {
                messageHistory.push(message);
                if (messageHistory.length > 50) {
                    messageHistory = messageHistory.slice(-50);
                }
            }
            
            addMessage(message, 'user');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
            const agentName = document.querySelector(`#agentSelect option[value="${agentType}"]`).textContent;
            showTypingIndicator(agentName);
            
            try {
                const formData = new FormData();
                formData.append('message', message);
                formData.append('agent_type', agentType);
                formData.append('user_id', userId);
                
                if (fileInput.files && fileInput.files[0]) {
                    formData.append('image', fileInput.files[0]);
                }
                
                const response = await fetch('/api/enhanced/chat', {
                    method: 'POST',
                    body: formData
                });
                
                const data = await response.json();
                
                hideTypingIndicator();
                
                if (data.success) {
                    const result = data.response;
                    addMessage(
                        result.response, 
                        'ai', 
                        result.agent, 
                        result.ai_used, 
                        result.response_time,
                        result.has_context,
                        result.image_processed
                    );
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–∏–ø–µ –æ—Ç–≤–µ—Ç–∞
                    if (result.ai_used) {
                        showNotification('üß† –û—Ç–≤–µ—Ç –æ—Ç –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ AI', 'success');
                    } else if (result.has_context) {
                        showNotification('üìö –û—Ç–≤–µ—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–∞', 'info');
                    }
                    
                    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
                    input.value = '';
                    fileInput.value = '';
                    document.getElementById('imagePreview').innerHTML = '';
                    hideAutoCompleteDropdown();
                } else {
                    addMessage('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞', 'ai', 'System');
                    showNotification('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏', 'warning');
                }
                
            } catch (error) {
                hideTypingIndicator();
                addMessage(`–û—à–∏–±–∫–∞: ${error}`, 'ai', 'System');
                showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏', 'warning');
            }
        }
        
        function updateStats() {
            fetch('/api/enhanced/status')
                .then(response => response.json())
                .then(data => {
                    document.getElementById('projectFiles').textContent = data.project_files || 'N/A';
                    document.getElementById('interactionHistory').textContent = data.interactions || 0;
                    document.getElementById('processedImages').textContent = data.processed_images || 0;
                    document.getElementById('aiRequests').textContent = data.ai_requests || 0;
                    document.getElementById('uptime').textContent = data.uptime || '0—Å';
                    document.getElementById('activeAgents').textContent = data.active_agents || 4;
                })
                .catch(error => console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error));
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        document.getElementById('messageInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });
        
        document.getElementById('imageFile').addEventListener('change', previewImage);
        
        function showTypingIndicator(agentName) {
            const indicator = document.getElementById('typingIndicator');
            document.getElementById('typingAgent').textContent = agentName;
            indicator.style.display = 'block';
        }
        
        function hideTypingIndicator() {
            document.getElementById('typingIndicator').style.display = 'none';
        }
        
        function showNotification(message, type = 'info') {
            // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            const notification = document.createElement('div');
            notification.style.cssText = `
                position: fixed; top: 20px; right: 20px; z-index: 1000;
                padding: 15px 20px; border-radius: 10px; color: white; font-weight: bold;
                background: ${type === 'success' ? '#2ecc71' : type === 'warning' ? '#f39c12' : '#3498db'};
                box-shadow: 0 4px 15px rgba(0,0,0,0.2); opacity: 0; transition: opacity 0.3s ease;
            `;
            notification.textContent = message;
            document.body.appendChild(notification);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º
            setTimeout(() => notification.style.opacity = '1', 100);
            
            // –£–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                notification.style.opacity = '0';
                setTimeout(() => document.body.removeChild(notification), 300);
            }, 3000);
        }
        
        function updateSuggestions() {
            const agentType = document.getElementById('agentSelect').value;
            const suggestions = agentSuggestions[agentType] || [];
            const suggestionsDiv = document.getElementById('smartSuggestions');
            const suggestionsList = document.getElementById('suggestionsList');
            
            if (suggestions.length > 0) {
                suggestionsList.innerHTML = '';
                suggestions.forEach(suggestion => {
                    const item = document.createElement('span');
                    item.className = 'suggestion-item';
                    item.textContent = suggestion;
                    item.onclick = () => quickAction(suggestion);
                    suggestionsList.appendChild(item);
                });
                suggestionsDiv.style.display = 'block';
            } else {
                suggestionsDiv.style.display = 'none';
            }
        }
        
        function quickAction(text) {
            document.getElementById('messageInput').value = text;
            sendMessage();
        }
        
        function startVoiceInput() {
            if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
                showNotification('‚ùå –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ', 'warning');
                return;
            }
            
            const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
            recognition = new SpeechRecognition();
            
            recognition.lang = 'ru-RU';
            recognition.continuous = false;
            recognition.interimResults = true;
            
            recognition.onstart = function() {
                isListening = true;
                document.getElementById('voiceInput').style.display = 'block';
                document.getElementById('voiceText').textContent = '–°–ª—É—à–∞—é...';
                showNotification('üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω', 'info');
            };
            
            recognition.onresult = function(event) {
                let finalTranscript = '';
                let interimTranscript = '';
                
                for (let i = event.resultIndex; i < event.results.length; i++) {
                    const transcript = event.results[i][0].transcript;
                    if (event.results[i].isFinal) {
                        finalTranscript += transcript;
                    } else {
                        interimTranscript += transcript;
                    }
                }
                
                document.getElementById('voiceText').textContent = finalTranscript || interimTranscript;
                
                if (finalTranscript) {
                    document.getElementById('messageInput').value = finalTranscript;
                    stopVoiceInput();
                    showNotification('‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ', 'success');
                }
            };
            
            recognition.onerror = function(event) {
                showNotification('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏', 'warning');
                stopVoiceInput();
            };
            
            recognition.start();
        }
        
        function stopVoiceInput() {
            if (recognition && isListening) {
                recognition.stop();
                isListening = false;
                document.getElementById('voiceInput').style.display = 'none';
            }
        }
        
        // –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏
        function setupAutoComplete() {
            const input = document.getElementById('messageInput');
            
            input.addEventListener('input', function() {
                const value = this.value.toLowerCase();
                if (value.length > 2) {
                    const matches = messageHistory.filter(msg => 
                        msg.toLowerCase().includes(value)
                    ).slice(0, 3);
                    
                    if (matches.length > 0) {
                        showAutoCompleteDropdown(matches);
                    } else {
                        hideAutoCompleteDropdown();
                    }
                } else {
                    hideAutoCompleteDropdown();
                }
            });
        }
        
        function showAutoCompleteDropdown(matches) {
            let dropdown = document.getElementById('autoCompleteDropdown');
            if (!dropdown) {
                dropdown = document.createElement('div');
                dropdown.id = 'autoCompleteDropdown';
                dropdown.style.cssText = `
                    position: absolute; background: white; border: 1px solid #ddd;
                    border-radius: 8px; max-height: 200px; overflow-y: auto;
                    box-shadow: 0 4px 15px rgba(0,0,0,0.1); z-index: 1000;
                    width: 100%; top: 100%; left: 0;
                `;
                document.querySelector('.input-container').style.position = 'relative';
                document.querySelector('.input-container').appendChild(dropdown);
            }
            
            dropdown.innerHTML = '';
            matches.forEach(match => {
                const item = document.createElement('div');
                item.style.cssText = 'padding: 10px; cursor: pointer; border-bottom: 1px solid #eee; color: #333;';
                item.textContent = match;
                item.onclick = () => {
                    document.getElementById('messageInput').value = match;
                    hideAutoCompleteDropdown();
                };
                item.onmouseover = () => item.style.background = '#f0f0f0';
                item.onmouseout = () => item.style.background = 'white';
                dropdown.appendChild(item);
            });
        }
        
        function hideAutoCompleteDropdown() {
            const dropdown = document.getElementById('autoCompleteDropdown');
            if (dropdown) {
                dropdown.style.display = 'none';
            }
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        connectWebSocket();
        updateStats();
        updateSuggestions();
        setupAutoComplete();
        
        setInterval(updateStats, 5000);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        setTimeout(() => {
            showNotification('üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Enhanced AI Mentor!', 'success');
        }, 1000);
    </script>
</body>
</html>
    """)

@app.post("/api/enhanced/chat")
async def enhanced_chat(message: str = Form(...), agent_type: str = Form("general_assistant"), 
                       user_id: str = Form("user"), image: UploadFile = File(None)):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π —á–∞—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"""
    
    if agent_type not in enhanced_agents:
        agent_type = "general_assistant"
    
    agent = enhanced_agents[agent_type]
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    result = await agent.process_with_context(message, user_id, image)
    
    return {
        "success": True,
        "response": result,
        "timestamp": datetime.now().isoformat()
    }

@app.get("/api/enhanced/status")
async def enhanced_status():
    """–°—Ç–∞—Ç—É—Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_interactions = sum(len(agent.conversation_history) for agent in enhanced_agents.values())
    total_tasks = sum(agent.task_count for agent in enhanced_agents.values())
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    processed_images = 0
    if os.path.exists("/workspace/processed_images"):
        processed_images = len([f for f in os.listdir("/workspace/processed_images") if f.endswith(('.jpg', '.png'))])
    
    return {
        "system_status": "running",
        "active_agents": len(enhanced_agents),
        "project_files": len(project_memory.project_files),
        "interactions": len(project_memory.user_interactions),
        "processed_images": processed_images,
        "ai_requests": total_tasks,
        "uptime": f"{int(time.time() - startup_time)}—Å",
        "agents": {
            agent_id: {
                "name": agent.name,
                "task_count": agent.task_count,
                "type": agent.agent_type
            }
            for agent_id, agent in enhanced_agents.items()
        },
        "timestamp": datetime.now().isoformat()
    }

@app.post("/api/enhanced/modify_code")
async def modify_code(file_path: str = Form(...), old_code: str = Form(...), new_code: str = Form(...)):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ AI"""
    result = await code_modifier.apply_code_change(file_path, old_code, new_code)
    return result

@app.post("/api/enhanced/add_function")
async def add_function(file_path: str = Form(...), function_code: str = Form(...), position: str = Form("end")):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ñ–∞–π–ª"""
    result = await code_modifier.add_function_to_file(file_path, function_code, position)
    return result

@app.get("/api/enhanced/project_files")
async def get_project_files():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    python_files = []
    for root, dirs, files in os.walk("/workspace"):
        dirs[:] = [d for d in dirs if not d.startswith('.') and d != '__pycache__']
        for file in files:
            if file.endswith('.py') and not file.startswith('.'):
                file_path = os.path.join(root, file)
                python_files.append({
                    "path": file_path,
                    "name": file,
                    "size": os.path.getsize(file_path),
                    "modified": datetime.fromtimestamp(os.path.getmtime(file_path)).isoformat()
                })
    
    return {"files": python_files[:50], "total_count": len(python_files)}

@app.websocket("/ws/enhanced/{user_id}")
async def enhanced_websocket(websocket: WebSocket, user_id: str):
    """Enhanced WebSocket"""
    await websocket.accept()
    
    try:
        while True:
            data = await websocket.receive_text()
            message_data = json.loads(data)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ enhanced —Å–∏—Å—Ç–µ–º—É
            response = await enhanced_chat(
                message=message_data.get("message", ""),
                agent_type=message_data.get("agent_type", "general_assistant"),
                user_id=user_id
            )
            
            if response.get("success"):
                result = response["response"]
                await websocket.send_text(json.dumps({
                    "message": result["response"],
                    "agent": result["agent"],
                    "timestamp": result["timestamp"],
                    "ai_used": result.get("ai_used", False),
                    "response_time": result.get("response_time"),
                    "has_context": result.get("has_context", False),
                    "image_processed": result.get("image_processed", False)
                }))
                
    except WebSocketDisconnect:
        logger.info(f"üîå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç Enhanced AI")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
startup_time = time.time()

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üß† –ó–∞–ø—É—Å–∫ Enhanced AI Mentor System...")
    logger.info("üìö –°–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞...")
    logger.info("üëÅÔ∏è –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏...")
    
    try:
        # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É –Ω–∞ –ø–æ—Ä—Ç—É 8082
        config = uvicorn.Config(app, host="0.0.0.0", port=8082, log_level="info")
        server = uvicorn.Server(config)
        
        logger.info("‚úÖ Enhanced AI —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")
        logger.info("üåê –î–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ http://localhost:8082")
        logger.info("üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: —Ä–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ç–æ, –ø–æ–ª–Ω–∞—è –ø–∞–º—è—Ç—å –ø—Ä–æ–µ–∫—Ç–∞, —É–º–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã")
        
        await server.serve()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Enhanced AI —Å–∏—Å—Ç–µ–º—ã: {e}")

if __name__ == "__main__":
    asyncio.run(main())