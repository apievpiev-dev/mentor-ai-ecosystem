#!/usr/bin/env python3
"""
Test Neural System - –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –∏—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
"""

import asyncio
import json
import logging
import time
import requests
from typing import Dict, List, Any
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class NeuralSystemTester:
    """–¢–µ—Å—Ç–µ—Ä —Å–∏—Å—Ç–µ–º—ã –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π"""
    
    def __init__(self):
        self.test_results = {}
        self.base_url = "http://localhost:8081"
        self.test_start_time = time.time()
        
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Neural System...")
        
        tests = [
            ("AI Engine", self.test_ai_engine),
            ("Multi-Agent System", self.test_multi_agent_system),
            ("Visual Monitor", self.test_visual_monitor),
            ("Autonomous System", self.test_autonomous_system),
            ("Web Interface", self.test_web_interface),
            ("API Endpoints", self.test_api_endpoints),
            ("WebSocket Connection", self.test_websocket),
            ("System Integration", self.test_system_integration)
        ]
        
        for test_name, test_func in tests:
            try:
                logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {test_name}")
                result = await test_func()
                self.test_results[test_name] = result
                
                if result["success"]:
                    logger.info(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
                else:
                    logger.warning(f"‚ö†Ô∏è {test_name}: –ù–ï –ü–†–û–ô–î–ï–ù - {result.get('error', 'Unknown error')}")
                    
            except Exception as e:
                logger.error(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {str(e)}")
                self.test_results[test_name] = {
                    "success": False,
                    "error": str(e),
                    "details": None
                }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        await self.generate_test_report()
    
    async def test_ai_engine(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI Engine"""
        try:
            from enhanced_ai_engine import enhanced_ai_engine, generate_ai_response
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            await enhanced_ai_engine.initialize()
            
            # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
            response = await generate_ai_response("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?")
            
            # –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
            status = await enhanced_ai_engine.get_system_status()
            
            return {
                "success": True,
                "details": {
                    "response_generated": bool(response),
                    "system_initialized": status.get("initialized", False),
                    "providers_available": len(status.get("providers", {})),
                    "response_time": status.get("performance", {}).get("average_response_time", 0)
                }
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": str(e),
                "details": None
            }
    
    async def test_multi_agent_system(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Multi-Agent System"""
        try:
            from multi_agent_system import MultiAgentSystem
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
            system = MultiAgentSystem()
            
            # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            result = await system.process_user_message("–°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é", "test_user")
            
            # –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
            status = system.get_system_status()
            
            return {
                "success": True,
                "details": {
                    "agents_created": status.get("total_agents", 0),
                    "message_processed": bool(result.get("response")),
                    "agent_selected": result.get("agent", "Unknown"),
                    "shared_memory_items": status.get("shared_memory", {}).get("knowledge_items", 0)
                }
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": str(e),
                "details": None
            }
    
    async def test_visual_monitor(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Visual Monitor"""
        try:
            from visual_monitor import visual_monitor
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            await visual_monitor.initialize()
            
            # –¢–µ—Å—Ç –∑–∞—Ö–≤–∞—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            states = await visual_monitor.capture_system_state()
            
            # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞
            analysis = await visual_monitor.analyze_visual_data()
            
            # –¢–µ—Å—Ç –æ—Ç—á–µ—Ç–∞
            report = await visual_monitor.generate_visual_report()
            
            return {
                "success": True,
                "details": {
                    "monitor_active": visual_monitor.active,
                    "components_monitored": len(states),
                    "overall_health": analysis.overall_health,
                    "report_generated": bool(report.get("timestamp"))
                }
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": str(e),
                "details": None
            }
    
    async def test_autonomous_system(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Autonomous System"""
        try:
            from autonomous_neural_system import autonomous_neural_system
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            await autonomous_neural_system.initialize()
            
            # –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
            status = await autonomous_neural_system.get_system_status()
            
            return {
                "success": True,
                "details": {
                    "system_running": status.get("running", False),
                    "uptime": status.get("uptime", 0),
                    "task_queue_size": status.get("task_queue_size", 0),
                    "autonomous_loops": status.get("autonomous_loops", 0),
                    "components_initialized": len([k for k, v in status.get("components", {}).items() if v])
                }
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": str(e),
                "details": None
            }
    
    async def test_web_interface(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        try:
            # –¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            response = requests.get(f"{self.base_url}/", timeout=10)
            
            return {
                "success": response.status_code == 200,
                "details": {
                    "status_code": response.status_code,
                    "content_length": len(response.content),
                    "content_type": response.headers.get("content-type", ""),
                    "response_time": response.elapsed.total_seconds()
                }
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": str(e),
                "details": None
            }
    
    async def test_api_endpoints(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints"""
        try:
            endpoints = [
                ("/api/system/status", "GET"),
                ("/api/agents", "GET"),
                ("/api/visual/report", "GET")
            ]
            
            results = {}
            
            for endpoint, method in endpoints:
                try:
                    if method == "GET":
                        response = requests.get(f"{self.base_url}{endpoint}", timeout=10)
                    else:
                        response = requests.post(f"{self.base_url}{endpoint}", timeout=10)
                    
                    results[endpoint] = {
                        "status_code": response.status_code,
                        "success": response.status_code == 200,
                        "response_time": response.elapsed.total_seconds()
                    }
                    
                except Exception as e:
                    results[endpoint] = {
                        "success": False,
                        "error": str(e)
                    }
            
            # –¢–µ—Å—Ç POST –∑–∞–ø—Ä–æ—Å–∞
            try:
                chat_response = requests.post(
                    f"{self.base_url}/api/chat/send",
                    json={"message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "user_id": "test_user"},
                    timeout=10
                )
                results["/api/chat/send"] = {
                    "status_code": chat_response.status_code,
                    "success": chat_response.status_code == 200,
                    "response_time": chat_response.elapsed.total_seconds()
                }
            except Exception as e:
                results["/api/chat/send"] = {
                    "success": False,
                    "error": str(e)
                }
            
            successful_endpoints = sum(1 for r in results.values() if r.get("success", False))
            
            return {
                "success": successful_endpoints > 0,
                "details": {
                    "total_endpoints": len(endpoints) + 1,
                    "successful_endpoints": successful_endpoints,
                    "endpoint_results": results
                }
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": str(e),
                "details": None
            }
    
    async def test_websocket(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            import websockets
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
            uri = f"ws://localhost:8081/ws"
            
            async with websockets.connect(uri, timeout=10) as websocket:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                test_message = {
                    "type": "chat_message",
                    "data": {
                        "message": "WebSocket —Ç–µ—Å—Ç",
                        "agent_type": "general",
                        "user_id": "test_user"
                    }
                }
                
                await websocket.send(json.dumps(test_message))
                
                # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
                response = await asyncio.wait_for(websocket.recv(), timeout=10)
                response_data = json.loads(response)
                
                return {
                    "success": True,
                    "details": {
                        "connection_established": True,
                        "message_sent": True,
                        "response_received": bool(response_data),
                        "response_type": response_data.get("type", "unknown")
                    }
                }
                
        except Exception as e:
            return {
                "success": False,
                "error": str(e),
                "details": None
            }
    
    async def test_system_integration(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: –∑–∞–ø—Ä–æ—Å -> –æ–±—Ä–∞–±–æ—Ç–∫–∞ -> –æ—Ç–≤–µ—Ç
            from enhanced_ai_engine import generate_code
            from visual_monitor import visual_monitor
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞
            code = await generate_code("–°–æ–∑–¥–∞–π —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–ª–æ–∂–µ–Ω–∏—è –¥–≤—É—Ö —á–∏—Å–µ–ª")
            
            # –í–∏–∑—É–∞–ª—å–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
            await visual_monitor.initialize()
            verification = await visual_monitor.verify_code_result(code)
            
            return {
                "success": True,
                "details": {
                    "code_generated": bool(code),
                    "code_length": len(code),
                    "visual_verification": verification.verified if verification else False,
                    "verification_confidence": verification.confidence if verification else 0.0
                }
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": str(e),
                "details": None
            }
    
    async def generate_test_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        test_duration = time.time() - self.test_start_time
        
        # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total_tests = len(self.test_results)
        successful_tests = sum(1 for result in self.test_results.values() if result["success"])
        failed_tests = total_tests - successful_tests
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report = {
            "test_summary": {
                "total_tests": total_tests,
                "successful_tests": successful_tests,
                "failed_tests": failed_tests,
                "success_rate": (successful_tests / total_tests * 100) if total_tests > 0 else 0,
                "test_duration": test_duration,
                "timestamp": datetime.now().isoformat()
            },
            "test_results": self.test_results,
            "recommendations": self._generate_recommendations()
        }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_file = f"/workspace/test_report_{int(time.time())}.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n" + "="*60)
        print("üß™ –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò NEURAL SYSTEM")
        print("="*60)
        print(f"üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed_tests}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {report['test_summary']['success_rate']:.1f}%")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {test_duration:.2f} —Å–µ–∫")
        print("="*60)
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for test_name, result in self.test_results.items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result["success"] else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
            print(f"{test_name}: {status}")
            if result.get("details"):
                for key, value in result["details"].items():
                    print(f"  - {key}: {value}")
            if result.get("error"):
                print(f"  - –û—à–∏–±–∫–∞: {result['error']}")
        
        print("="*60)
        print(f"üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        print("="*60)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if report["recommendations"]:
            print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            for recommendation in report["recommendations"]:
                print(f"  - {recommendation}")
        
        return report
    
    def _generate_recommendations(self) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        failed_tests = [name for name, result in self.test_results.items() if not result["success"]]
        
        if "AI Engine" in failed_tests:
            recommendations.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É Ollama")
            recommendations.append("–£–±–µ–¥–∏—Ç—å—Å—è –≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
        
        if "Web Interface" in failed_tests:
            recommendations.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞")
            recommendations.append("–£–±–µ–¥–∏—Ç—å—Å—è –≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞ 8081")
        
        if "WebSocket Connection" in failed_tests:
            recommendations.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WebSocket")
            recommendations.append("–£–±–µ–¥–∏—Ç—å—Å—è –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        if "API Endpoints" in failed_tests:
            recommendations.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API")
            recommendations.append("–£–±–µ–¥–∏—Ç—å—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏")
        
        if "Visual Monitor" in failed_tests:
            recommendations.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º")
            recommendations.append("–£–±–µ–¥–∏—Ç—å—Å—è –≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤")
        
        if "Autonomous System" in failed_tests:
            recommendations.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
            recommendations.append("–£–±–µ–¥–∏—Ç—å—Å—è –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        if not recommendations:
            recommendations.append("–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        
        return recommendations

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = NeuralSystemTester()
    await tester.run_all_tests()

if __name__ == "__main__":
    asyncio.run(main())