#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤
–ó–∞—Å—Ç–∞–≤–ª—è–µ—Ç –∞–≥–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
"""

import asyncio
import json
import logging
import time
import uuid
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Set
from dataclasses import dataclass, asdict
from enum import Enum
import threading
from collections import defaultdict, deque
import hashlib

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class TaskComplexity(Enum):
    """–°–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á"""
    SIMPLE = "simple"
    MEDIUM = "medium"
    COMPLEX = "complex"
    MULTI_AGENT = "multi_agent"

class CoordinationStrategy(Enum):
    """–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏"""
    SEQUENTIAL = "sequential"
    PARALLEL = "parallel"
    COLLABORATIVE = "collaborative"
    HIERARCHICAL = "hierarchical"

@dataclass
class AgentCapability:
    """–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–∞"""
    agent_id: str
    skills: List[str]
    performance_score: float
    availability: bool
    current_load: float
    specialization_areas: List[str]
    collaboration_history: Dict[str, int]
    is_active: bool = False
    last_activity: Optional[datetime] = None

@dataclass
class CoordinationTask:
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏"""
    task_id: str
    description: str
    complexity: TaskComplexity
    required_skills: List[str]
    assigned_agents: List[str]
    status: str
    created_at: datetime
    deadline: Optional[datetime] = None
    priority: int = 1
    dependencies: List[str] = None

@dataclass
class AgentMessage:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏"""
    message_id: str
    sender_id: str
    recipient_id: str
    content: Dict[str, Any]
    timestamp: datetime
    message_type: str
    priority: int = 1

class KnowledgeGraph:
    """–ì—Ä–∞—Ñ –∑–Ω–∞–Ω–∏–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –∫–æ–Ω—Ü–µ–ø—Ü–∏—è–º–∏"""
    
    def __init__(self):
        self.nodes = {}  # concept_id -> concept_data
        self.edges = defaultdict(list)  # concept_id -> [related_concept_ids]
        self.weights = {}  # (concept1, concept2) -> weight
    
    def add_concept(self, concept_id: str, concept_data: Dict[str, Any]):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏"""
        self.nodes[concept_id] = concept_data
    
    def add_relation(self, concept1: str, concept2: str, weight: float = 1.0):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∫–æ–Ω—Ü–µ–ø—Ü–∏—è–º–∏"""
        if concept1 not in self.edges:
            self.edges[concept1] = []
        if concept2 not in self.edges:
            self.edges[concept2] = []
        
        if concept2 not in self.edges[concept1]:
            self.edges[concept1].append(concept2)
        if concept1 not in self.edges[concept2]:
            self.edges[concept2].append(concept1)
        
        self.weights[(concept1, concept2)] = weight
        self.weights[(concept2, concept1)] = weight
    
    def get_related_concepts(self, concept_id: str, max_depth: int = 2) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π"""
        if concept_id not in self.nodes:
            return []
        
        visited = set()
        queue = [(concept_id, 0)]
        related = []
        
        while queue:
            current, depth = queue.pop(0)
            if current in visited or depth > max_depth:
                continue
            
            visited.add(current)
            if current != concept_id:
                related.append(current)
            
            for neighbor in self.edges.get(current, []):
                if neighbor not in visited:
                    queue.append((neighbor, depth + 1))
        
        return related

class ImprovedAgentCoordinator:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.agents = {}
        self.tasks = {}
        self.message_queue = deque()
        self.shared_memory = ImprovedSharedMemory()
        self.running = False
        self.lock = threading.Lock()
        self.active_agents = set()
        self.agent_activity = defaultdict(lambda: {"last_seen": None, "task_count": 0})
        
        # –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤
        self.autonomous_tasks = {
            "general_assistant": [
                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ —Å–æ–∑–¥–∞–π –æ—Ç—á–µ—Ç",
                "–ü—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã",
                "–°–æ–∑–¥–∞–π –ø–ª–∞–Ω –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
            ],
            "code_developer": [
                "–°–æ–∑–¥–∞–π —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API",
                "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –∫–æ–¥ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                "–î–æ–±–∞–≤—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"
            ],
            "data_analyst": [
                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã",
                "–°–æ–∑–¥–∞–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–æ–≤",
                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API"
            ],
            "project_manager": [
                "–°–æ–∑–¥–∞–π –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è —Å–∏—Å—Ç–µ–º—ã –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é",
                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞–¥–∞—á",
                "–°–æ–∑–¥–∞–π roadmap –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"
            ],
            "designer": [
                "–£–ª—É—á—à–∏ –¥–∏–∑–∞–π–Ω –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
                "–°–æ–∑–¥–∞–π –∏–∫–æ–Ω–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π",
                "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π UX –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"
            ],
            "qa_tester": [
                "–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π –≤—Å–µ API endpoints",
                "–ü—Ä–æ–≤–µ—Ä—å —Å–∏—Å—Ç–µ–º—É –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏",
                "–°–æ–∑–¥–∞–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã"
            ]
        }
    
    def register_agent(self, agent_id: str, agent_type: str, skills: List[str]):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞"""
        with self.lock:
            capability = AgentCapability(
                agent_id=agent_id,
                skills=skills,
                performance_score=1.0,
                availability=True,
                current_load=0.0,
                specialization_areas=[agent_type],
                collaboration_history={},
                is_active=False,
                last_activity=None
            )
            self.agents[agent_id] = capability
            logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç {agent_id} ({agent_type}) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    
    def send_message(self, sender_id: str, recipient_id: str, content: Dict[str, Any], 
                    message_type: str = "task", priority: int = 1):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≥–µ–Ω—Ç—É"""
        message = AgentMessage(
            message_id=str(uuid.uuid4()),
            sender_id=sender_id,
            recipient_id=recipient_id,
            content=content,
            timestamp=datetime.now(),
            message_type=message_type,
            priority=priority
        )
        
        with self.lock:
            self.message_queue.append(message)
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞
            if recipient_id in self.agents:
                self.agents[recipient_id].is_active = True
                self.agents[recipient_id].last_activity = datetime.now()
                self.active_agents.add(recipient_id)
                self.agent_activity[recipient_id]["last_seen"] = datetime.now()
                self.agent_activity[recipient_id]["task_count"] += 1
                
                logger.info(f"üöÄ –ê–≥–µ–Ω—Ç {recipient_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        
        return message.message_id
    
    def get_agent_status(self, agent_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–∞"""
        with self.lock:
            if agent_id not in self.agents:
                return {"error": "Agent not found"}
            
            agent = self.agents[agent_id]
            activity = self.agent_activity[agent_id]
            
            return {
                "agent_id": agent_id,
                "is_active": agent.is_active,
                "last_activity": agent.last_activity.isoformat() if agent.last_activity else None,
                "current_load": agent.current_load,
                "availability": agent.availability,
                "performance_score": agent.performance_score,
                "task_count": activity["task_count"],
                "last_seen": activity["last_seen"].isoformat() if activity["last_seen"] else None
            }
    
    def get_system_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        with self.lock:
            total_agents = len(self.agents)
            active_agents = len(self.active_agents)
            active_tasks = len([t for t in self.tasks.values() if t.status == "in_progress"])
            message_queue_size = len(self.message_queue)
            
            agent_capabilities = {}
            for agent_id, agent in self.agents.items():
                agent_capabilities[agent_id] = {
                    "skills": agent.skills,
                    "performance_score": agent.performance_score,
                    "availability": agent.availability,
                    "current_load": agent.current_load,
                    "is_active": agent.is_active,
                    "last_activity": agent.last_activity.isoformat() if agent.last_activity else None
                }
            
            return {
                "total_agents": total_agents,
                "active_agents": active_agents,
                "active_tasks": active_tasks,
                "message_queue_size": message_queue_size,
                "agent_capabilities": agent_capabilities,
                "active_tasks_info": []
            }
    
    async def autonomous_task_generator(self):
        """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∑–∞–¥–∞—á"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∑–∞–¥–∞—á...")
        
        task_counter = 0
        
        while self.running:
            try:
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
                if self.agents:
                    agent_id = list(self.agents.keys())[task_counter % len(self.agents)]
                    agent = self.agents[agent_id]
                    
                    if agent.specialization_areas:
                        agent_type = agent.specialization_areas[0]
                        if agent_type in self.autonomous_tasks:
                            tasks = self.autonomous_tasks[agent_type]
                            task = tasks[task_counter % len(tasks)]
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –∞–≥–µ–Ω—Ç—É
                            self.send_message(
                                sender_id="coordinator",
                                recipient_id=agent_id,
                                content={"task": task, "type": "autonomous"},
                                message_type="autonomous_task",
                                priority=1
                            )
                            
                            logger.info(f"üìã –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–≥–µ–Ω—Ç—É {agent_id}: {task[:50]}...")
                
                task_counter += 1
                
                # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ–π
                await asyncio.sleep(30)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∑–∞–¥–∞—á: {e}")
                await asyncio.sleep(10)
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤...")
        self.running = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∑–∞–¥–∞—á
        asyncio.create_task(self.autonomous_task_generator())
        
        logger.info("‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∞–≥–µ–Ω—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤...")
        self.running = False

class ImprovedSharedMemory:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—â–∞—è –ø–∞–º—è—Ç—å"""
    
    def __init__(self):
        self.knowledge_base = {}
        self.project_context = {}
        self.user_preferences = {}
        self.conversation_history = []
        self.shared_resources = {}
        self.knowledge_graph = KnowledgeGraph()
        self.agent_capabilities = {}
        self.task_history = []
        self.collaboration_patterns = defaultdict(int)
        self.lock = threading.Lock()
    
    def store_knowledge(self, key: str, value: Any, metadata: Dict[str, Any] = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π"""
        with self.lock:
            self.knowledge_base[key] = {
                "value": value,
                "metadata": metadata or {},
                "timestamp": datetime.now().isoformat()
            }
    
    def get_knowledge(self, key: str) -> Any:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π"""
        with self.lock:
            return self.knowledge_base.get(key, {}).get("value")
    
    def add_conversation(self, conversation: Dict[str, Any]):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        with self.lock:
            self.conversation_history.append(conversation)
    
    def get_recent_conversations(self, limit: int = 10) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤"""
        with self.lock:
            return self.conversation_history[-limit:]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
_improved_coordinator = None

def get_improved_coordinator() -> ImprovedAgentCoordinator:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞"""
    global _improved_coordinator
    if _improved_coordinator is None:
        _improved_coordinator = ImprovedAgentCoordinator()
    return _improved_coordinator

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    coordinator = get_improved_coordinator()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
    coordinator.register_agent("test_agent_1", "general_assistant", ["general_help", "planning"])
    coordinator.register_agent("test_agent_2", "code_developer", ["code_generation", "debugging"])
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä
    await coordinator.start()
    
    # –ñ–¥–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
    await asyncio.sleep(60)
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä
    coordinator.stop()

if __name__ == "__main__":
    asyncio.run(main())


