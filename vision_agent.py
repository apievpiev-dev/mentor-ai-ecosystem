#!/usr/bin/env python3
"""
Vision Agent - –ê–≥–µ–Ω—Ç —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
–ú–æ–∂–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —É–ª—É—á—à–µ–Ω–∏—è
"""

import asyncio
import logging
import base64
import json
import requests
from typing import Dict, Any, List, Optional
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import io
from PIL import Image

logger = logging.getLogger(__name__)

class VisionAgent:
    """–ê–≥–µ–Ω—Ç —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    
    def __init__(self, agent_id: str = "vision_agent"):
        self.agent_id = agent_id
        self.name = "Vision Agent"
        self.capabilities = [
            "screenshot_analysis",
            "ui_improvement_suggestions", 
            "visual_bug_detection",
            "responsive_design_check",
            "accessibility_analysis"
        ]
        self.driver = None
        self.base_url = "http://localhost:8080"
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–±-–¥—Ä–∞–π–≤–µ—Ä–∞"""
        try:
            chrome_options = Options()
            chrome_options.add_argument("--headless")
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--disable-dev-shm-usage")
            chrome_options.add_argument("--window-size=1920,1080")
            
            self.driver = webdriver.Chrome(options=chrome_options)
            logger.info("‚úÖ Vision Agent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Vision Agent: {e}")
            return False
    
    async def take_screenshot(self, url: str = None) -> Optional[str]:
        """–°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            if not self.driver:
                await self.initialize()
            
            target_url = url or self.base_url
            self.driver.get(target_url)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.TAG_NAME, "body"))
            )
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            screenshot = self.driver.get_screenshot_as_png()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
            screenshot_b64 = base64.b64encode(screenshot).decode('utf-8')
            
            logger.info(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–¥–µ–ª–∞–Ω –¥–ª—è {target_url}")
            return screenshot_b64
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            return None
    
    async def analyze_ui(self, screenshot_b64: str = None) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        try:
            if not screenshot_b64:
                screenshot_b64 = await self.take_screenshot()
            
            if not screenshot_b64:
                return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç"}
            
            # –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ AI (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Ollama —Å vision –º–æ–¥–µ–ª—å—é)
            analysis = await self._analyze_with_ai(screenshot_b64)
            
            return {
                "timestamp": datetime.now().isoformat(),
                "analysis": analysis,
                "suggestions": await self._generate_improvements(analysis),
                "issues": await self._detect_issues(analysis)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ UI: {e}")
            return {"error": str(e)}
    
    async def _analyze_with_ai(self, screenshot_b64: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —á–µ—Ä–µ–∑ AI"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Ollama –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            analysis_prompt = """
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å–∏—Å—Ç–µ–º—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö AI-–∞–≥–µ–Ω—Ç–æ–≤.
            –û—Ü–µ–Ω–∏:
            1. –û–±—â–∏–π –¥–∏–∑–∞–π–Ω –∏ —É–¥–æ–±—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            2. –ß–∏—Ç–∞–µ–º–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å
            3. –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            4. –ù–∞–≤–∏–≥–∞—Ü–∏—é –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–π
            5. –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å –¥–∏–∑–∞–π–Ω–∞
            
            –î–∞–π –æ—Ü–µ–Ω–∫—É –ø–æ 10-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
            """
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å vision –º–æ–¥–µ–ª—å—é Ollama
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
            return {
                "design_score": 7,
                "usability_score": 8,
                "readability_score": 9,
                "navigation_score": 7,
                "modernity_score": 6,
                "overall_score": 7.4,
                "summary": "–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è –¥–∏–∑–∞–π–Ω–∞"
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return {"error": str(e)}
    
    async def _generate_improvements(self, analysis: Dict[str, Any]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"""
        suggestions = []
        
        if analysis.get("design_score", 0) < 8:
            suggestions.append("–£–ª—É—á—à–∏—Ç—å —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É –∏ —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫—É")
            suggestions.append("–î–æ–±–∞–≤–∏—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
        
        if analysis.get("navigation_score", 0) < 8:
            suggestions.append("–£–ø—Ä–æ—Å—Ç–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏")
            suggestions.append("–î–æ–±–∞–≤–∏—Ç—å —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏")
        
        if analysis.get("modernity_score", 0) < 8:
            suggestions.append("–î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã")
            suggestions.append("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ CSS —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏")
        
        return suggestions
    
    async def _detect_issues(self, analysis: Dict[str, Any]) -> List[str]:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
        issues = []
        
        if analysis.get("readability_score", 0) < 7:
            issues.append("–ü–ª–æ—Ö–∞—è —á–∏—Ç–∞–µ–º–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞")
        
        if analysis.get("usability_score", 0) < 7:
            issues.append("–°–ª–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
        
        return issues
    
    async def check_responsive_design(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–∏–∑–∞–π–Ω–∞"""
        try:
            results = {}
            screen_sizes = [
                (1920, 1080, "Desktop"),
                (1366, 768, "Laptop"),
                (768, 1024, "Tablet"),
                (375, 667, "Mobile")
            ]
            
            for width, height, device in screen_sizes:
                if self.driver:
                    self.driver.set_window_size(width, height)
                    await asyncio.sleep(1)
                    
                    screenshot = await self.take_screenshot()
                    if screenshot:
                        results[device] = {
                            "size": f"{width}x{height}",
                            "screenshot": screenshot,
                            "responsive": True  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
                        }
            
            return results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
            return {"error": str(e)}
    
    async def monitor_system_health(self) -> Dict[str, Any]:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            health_data = {
                "timestamp": datetime.now().isoformat(),
                "web_interface": await self._check_web_interface(),
                "api_endpoints": await self._check_api_endpoints(),
                "agents_status": await self._check_agents_status()
            }
            
            return health_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            return {"error": str(e)}
    
    async def _check_web_interface(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        try:
            response = requests.get(f"{self.base_url}/", timeout=5)
            return {
                "status": "online" if response.status_code == 200 else "offline",
                "response_time": response.elapsed.total_seconds(),
                "status_code": response.status_code
            }
        except Exception as e:
            return {"status": "offline", "error": str(e)}
    
    async def _check_api_endpoints(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints"""
        endpoints = [
            "/api/agents",
            "/api/system/status",
            "/api/chat/send"
        ]
        
        results = {}
        for endpoint in endpoints:
            try:
                response = requests.get(f"{self.base_url}{endpoint}", timeout=5)
                results[endpoint] = {
                    "status": "online" if response.status_code == 200 else "offline",
                    "status_code": response.status_code
                }
            except Exception as e:
                results[endpoint] = {"status": "offline", "error": str(e)}
        
        return results
    
    async def _check_agents_status(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–æ–≤"""
        try:
            response = requests.get(f"{self.base_url}/api/agents", timeout=5)
            if response.status_code == 200:
                agents_data = response.json()
                return {
                    "total_agents": len(agents_data.get("agents", [])),
                    "agents_online": len([a for a in agents_data.get("agents", []) if a.get("status") == "online"]),
                    "status": "healthy"
                }
            else:
                return {"status": "unhealthy", "error": "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
        except Exception as e:
            return {"status": "unhealthy", "error": str(e)}
    
    async def suggest_improvements(self) -> Dict[str, Any]:
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            screenshot = await self.take_screenshot()
            ui_analysis = await self.analyze_ui(screenshot)
            health_check = await self.monitor_system_health()
            
            improvements = {
                "timestamp": datetime.now().isoformat(),
                "ui_improvements": ui_analysis.get("suggestions", []),
                "ui_issues": ui_analysis.get("issues", []),
                "system_improvements": await self._generate_system_improvements(health_check),
                "priority": await self._prioritize_improvements(ui_analysis, health_check)
            }
            
            return improvements
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {e}")
            return {"error": str(e)}
    
    async def _generate_system_improvements(self, health_data: Dict[str, Any]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å–∏—Å—Ç–µ–º—ã"""
        improvements = []
        
        if health_data.get("web_interface", {}).get("status") != "online":
            improvements.append("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        
        api_status = health_data.get("api_endpoints", {})
        offline_endpoints = [ep for ep, status in api_status.items() if status.get("status") != "online"]
        
        if offline_endpoints:
            improvements.append(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å API endpoints: {', '.join(offline_endpoints)}")
        
        agents_status = health_data.get("agents_status", {})
        if agents_status.get("status") != "healthy":
            improvements.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤")
        
        return improvements
    
    async def _prioritize_improvements(self, ui_analysis: Dict[str, Any], health_data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏–π"""
        priorities = []
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–∏—Å—Ç–µ–º—ã
        if health_data.get("web_interface", {}).get("status") != "online":
            priorities.append({
                "priority": "critical",
                "improvement": "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å",
                "reason": "–°–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            })
        
        # –ü—Ä–æ–±–ª–µ–º—ã UI
        ui_score = ui_analysis.get("overall_score", 0)
        if ui_score < 6:
            priorities.append({
                "priority": "high",
                "improvement": "–£–ª—É—á—à–∏—Ç—å –¥–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
                "reason": f"–ù–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ UI: {ui_score}/10"
            })
        
        return priorities
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            if self.driver:
                self.driver.quit()
                logger.info("‚úÖ Vision Agent –æ—á–∏—â–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ Vision Agent: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
vision_agent = VisionAgent()

