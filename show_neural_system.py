#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
"""

import requests
import json
import time
from datetime import datetime

def show_system_status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    print("üß† ENHANCED NEURAL NETWORK SYSTEM")
    print("=" * 50)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
        health = requests.get("http://localhost:8081/health", timeout=5)
        if health.status_code == 200:
            health_data = health.json()
            print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–¥–æ—Ä–æ–≤–∞: {health_data['status']}")
            print(f"üìÖ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {health_data['timestamp']}")
        else:
            print("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
        status = requests.get("http://localhost:8081/api/status", timeout=5)
        if status.status_code == 200:
            data = status.json()
            
            print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"   üîÑ –°—Ç–∞—Ç—É—Å: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if data['running'] else '‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}")
            print(f"   üìã –ó–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏: {data['task_queue_size']}")
            print(f"   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {data['completed_tasks']}")
            
            if 'performance_metrics' in data:
                metrics = data['performance_metrics']
                total = metrics.get('total_tasks', 0)
                success = metrics.get('successful_tasks', 0)
                failed = metrics.get('failed_tasks', 0)
                avg_time = metrics.get('average_processing_time', 0)
                
                print(f"\n‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:")
                print(f"   üìà –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total}")
                print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {success}")
                print(f"   ‚ùå –ù–µ—É—Å–ø–µ—à–Ω—ã—Ö: {failed}")
                print(f"   üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(success/max(total,1)*100):.1f}%")
                print(f"   ‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.2f} —Å–µ–∫")
                print(f"   üïê –†–∞–±–æ—Ç–∞–µ—Ç —Å: {metrics.get('uptime_start', 'N/A')}")
            
            if 'agent' in data:
                agent = data['agent']
                print(f"\nü§ñ –ù–ï–ô–†–û–ù–ù–´–ô –ê–ì–ï–ù–¢:")
                print(f"   üÜî ID: {agent.get('agent_id', 'N/A')}")
                print(f"   üìõ –ò–º—è: {agent.get('name', 'N/A')}")
                print(f"   üîÑ –°—Ç–∞—Ç—É—Å: {agent.get('status', 'N/A')}")
                print(f"   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {agent.get('completed_tasks', 0)}")
                print(f"   üß† –û–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: {agent.get('trained_models', 0)}")
        
        print(f"\nüåê –î–û–°–¢–£–ü:")
        print(f"   –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:8081")
        print(f"   API —Å—Ç–∞—Ç—É—Å: http://localhost:8081/api/status")
        print(f"   Health check: http://localhost:8081/health")
        
        print(f"\nüìÑ –§–ê–ô–õ–´:")
        print(f"   –°—Ç–∞—Ç—É—Å HTML: /workspace/neural_system_status.html")
        print(f"   –û—Ç—á–µ—Ç—ã: /workspace/visual_reports/")
        print(f"   –°–∫—Ä–∏–Ω—à–æ—Ç—ã: /workspace/visual_screenshots/")
        
    except requests.exceptions.ConnectionError:
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–∏—Å—Ç–µ–º–µ")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø—É—â–µ–Ω –ª–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞ –ø–æ—Ä—Ç—É 8081")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def demo_task():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞"""
    print(f"\nüéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ê–ë–û–¢–´:")
    print("   –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        task_data = {
            "task_type": "data_analysis",
            "priority": 8,
            "input_data": {
                "data": [10, 25, 15, 30, 45, 35, 20, 40],
                "analysis_type": "live_demo"
            }
        }
        
        response = requests.post(
            "http://localhost:8081/api/add_task",
            json=task_data,
            timeout=10
        )
        
        if response.status_code == 200:
            result = response.json()
            if result.get("success"):
                print(f"   ‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {result['task_id']}")
                print("   ‚è≥ –û–∂–∏–¥–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...")
                
                # –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                time.sleep(3)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                status = requests.get("http://localhost:8081/api/status", timeout=5)
                if status.status_code == 200:
                    data = status.json()
                    print(f"   üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                    print(f"      –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {data['completed_tasks']}")
                    if 'performance_metrics' in data:
                        metrics = data['performance_metrics']
                        success_rate = (metrics.get('successful_tasks', 0) / max(metrics.get('total_tasks', 1), 1)) * 100
                        print(f"      –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
                
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {result.get('error', 'Unknown error')}")
        else:
            print(f"   ‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")

if __name__ == "__main__":
    show_system_status()
    demo_task()
    
    print(f"\nüéâ –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –ê–í–¢–û–ù–û–ú–ù–û!")
    print("   –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ 24/7")
    print("   –û—Ç–∫—Ä–æ–π—Ç–µ neural_system_status.html –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")