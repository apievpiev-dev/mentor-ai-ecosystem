#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è AI Manager —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from models.task import Task, TaskPriority, TaskCategory
from models.agent import Agent, AgentType
from core.task_analyzer import TaskAnalyzer
from core.ai_manager import AIManager
from core.task_executor import TaskExecutor
from ai_providers.provider_manager import provider_manager
from monitoring.logger import logger


async def demo_free_ai_providers():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    print("ü§ñ AI Manager - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏\n")
    print("=" * 70)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
    await provider_manager.initialize_providers({
        "ollama_model": "llama2:7b",
        "hf_model": "microsoft/DialoGPT-medium",
        "hf_token": None  # –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    })
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    health_status = await provider_manager.get_provider_health()
    print("\nüìä –°—Ç–∞—Ç—É—Å AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:")
    for name, status in health_status.items():
        status_icon = "‚úÖ" if status["available"] else "‚ùå"
        print(f"  {status_icon} {name}: {status['model']} - {status['status']}")
    
    print(f"\nüéØ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider_manager.get_default_provider_name()}")
    print()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã...")
    task_analyzer = TaskAnalyzer()
    ai_manager = AIManager()
    task_executor = TaskExecutor(ai_manager)
    print("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã\n")
    
    return task_analyzer, ai_manager, task_executor


async def demo_text_processing_with_ai(task_analyzer, ai_manager, task_executor):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å AI"""
    print("üìù –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å AI")
    print("-" * 50)
    
    task = Task(
        description="–ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∏—Ä–µ",
        priority=TaskPriority.HIGH,
        category=TaskCategory.TEXT_PROCESSING
    )
    
    print(f"üìã –ó–∞–¥–∞—á–∞: {task.description}")
    
    # –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏
    analysis = await task_analyzer.analyze_task(task)
    print(f"üîç –ê–Ω–∞–ª–∏–∑: –∫–∞—Ç–µ–≥–æ—Ä–∏—è={analysis.get('category')}, —Å–ª–æ–∂–Ω–æ—Å—Ç—å={analysis.get('complexity')}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
    agent = await ai_manager.create_agent_for_task(analysis)
    print(f"ü§ñ –°–æ–∑–¥–∞–Ω –∞–≥–µ–Ω—Ç: {agent.name} ({agent.type})")
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    result = await task_executor.execute_task(task, agent)
    status_value = result['status'].value if hasattr(result['status'], 'value') else str(result['status'])
    print(f"‚ö° –°—Ç–∞—Ç—É—Å: {status_value}")
    print(f"‚è±Ô∏è –í—Ä–µ–º—è: {result.get('execution_time', 0):.2f}—Å")
    
    if result.get('result'):
        print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç: {str(result['result'])[:200]}...")
    
    print()


async def demo_code_generation_with_ai(task_analyzer, ai_manager, task_executor):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ —Å AI"""
    print("üíª –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ —Å AI")
    print("-" * 50)
    
    task = Task(
        description="–°–æ–∑–¥–∞–π —Ñ—É–Ω–∫—Ü–∏—é Python –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ø–∏—Å–∫–∞ —á–∏—Å–µ–ª –ø–æ —É–±—ã–≤–∞–Ω–∏—é",
        priority=TaskPriority.MEDIUM,
        category=TaskCategory.CODE_GENERATION
    )
    
    print(f"üìã –ó–∞–¥–∞—á–∞: {task.description}")
    
    # –ê–Ω–∞–ª–∏–∑ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    analysis = await task_analyzer.analyze_task(task)
    agent = await ai_manager.create_agent_for_task(analysis)
    result = await task_executor.execute_task(task, agent)
    
    status_value = result['status'].value if hasattr(result['status'], 'value') else str(result['status'])
    print(f"‚ö° –°—Ç–∞—Ç—É—Å: {status_value}")
    print(f"‚è±Ô∏è –í—Ä–µ–º—è: {result.get('execution_time', 0):.2f}—Å")
    
    if result.get('result'):
        print(f"üíª –ö–æ–¥:\n{str(result['result'])[:300]}...")
    
    print()


async def demo_creative_writing_with_ai(task_analyzer, ai_manager, task_executor):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–≤–æ—Ä—á–µ—Å–∫–æ–≥–æ –ø–∏—Å—å–º–∞ —Å AI"""
    print("üé® –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–≤–æ—Ä—á–µ—Å–∫–æ–≥–æ –ø–∏—Å—å–º–∞ —Å AI")
    print("-" * 50)
    
    task = Task(
        description="–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –æ –≤–µ—Å–Ω–µ",
        priority=TaskPriority.LOW,
        category=TaskCategory.CREATIVE
    )
    
    print(f"üìã –ó–∞–¥–∞—á–∞: {task.description}")
    
    # –ê–Ω–∞–ª–∏–∑ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    analysis = await task_analyzer.analyze_task(task)
    agent = await ai_manager.create_agent_for_task(analysis)
    result = await task_executor.execute_task(task, agent)
    
    status_value = result['status'].value if hasattr(result['status'], 'value') else str(result['status'])
    print(f"‚ö° –°—Ç–∞—Ç—É—Å: {status_value}")
    print(f"‚è±Ô∏è –í—Ä–µ–º—è: {result.get('execution_time', 0):.2f}—Å")
    
    if result.get('result'):
        print(f"üé≠ –°—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ:\n{str(result['result'])[:400]}...")
    
    print()


async def demo_translation_with_ai(task_analyzer, ai_manager, task_executor):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å AI"""
    print("üåç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å AI")
    print("-" * 50)
    
    task = Task(
        description="–ü–µ—Ä–µ–≤–µ–¥–∏ —Ñ—Ä–∞–∑—É 'Hello, AI Manager!' –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫",
        priority=TaskPriority.MEDIUM,
        category=TaskCategory.TRANSLATION
    )
    
    print(f"üìã –ó–∞–¥–∞—á–∞: {task.description}")
    
    # –ê–Ω–∞–ª–∏–∑ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    analysis = await task_analyzer.analyze_task(task)
    agent = await ai_manager.create_agent_for_task(analysis)
    result = await task_executor.execute_task(task, agent)
    
    status_value = result['status'].value if hasattr(result['status'], 'value') else str(result['status'])
    print(f"‚ö° –°—Ç–∞—Ç—É—Å: {status_value}")
    print(f"‚è±Ô∏è –í—Ä–µ–º—è: {result.get('execution_time', 0):.2f}—Å")
    
    if result.get('result'):
        print(f"üåê –ü–µ—Ä–µ–≤–æ–¥: {str(result['result'])[:200]}...")
    
    print()


async def demo_provider_comparison():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    print("üîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
    print("-" * 50)
    
    prompt = "–û–±—ä—è—Å–Ω–∏, —á—Ç–æ —Ç–∞–∫–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –≤ –æ–¥–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏"
    
    print(f"üìù –ü—Ä–æ–º–ø—Ç: {prompt}")
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
    providers = ["local", "ollama", "huggingface"]
    
    for provider_name in providers:
        if provider_name in provider_manager.get_available_providers():
            print(f"ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {provider_name}...")
            
            start_time = asyncio.get_event_loop().time()
            response = await provider_manager.generate_response(prompt, provider_name=provider_name)
            end_time = asyncio.get_event_loop().time()
            
            if response.get("success"):
                print(f"‚úÖ {provider_name}: {response['result'][:100]}...")
                print(f"‚è±Ô∏è –í—Ä–µ–º—è: {(end_time - start_time):.2f}—Å")
            else:
                print(f"‚ùå {provider_name}: {response.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        else:
            print(f"‚ö†Ô∏è {provider_name}: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        print()


async def demo_system_stats(ai_manager, task_executor):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
    print("-" * 50)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤
    agents = await ai_manager.get_active_agents()
    print(f"ü§ñ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤: {len(agents)}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á
    task_stats = await task_executor.get_system_stats()
    print(f"üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á:")
    print(f"   - –ê–∫—Ç–∏–≤–Ω—ã—Ö: {task_stats.get('active_tasks', 0)}")
    print(f"   - –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {task_stats.get('completed_tasks', 0)}")
    print(f"   - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {task_stats.get('average_execution_time', 0):.2f}—Å")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    health_status = await provider_manager.get_provider_health()
    print(f"üîå AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã:")
    for name, status in health_status.items():
        status_icon = "‚úÖ" if status["available"] else "‚ùå"
        print(f"   - {status_icon} {name}: {status['status']}")
    
    print()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        print("üéØ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ AI Manager —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏")
        print("–°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Ollama, Hugging Face –∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏")
        print()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        task_analyzer, ai_manager, task_executor = await demo_free_ai_providers()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
        await demo_text_processing_with_ai(task_analyzer, ai_manager, task_executor)
        await demo_code_generation_with_ai(task_analyzer, ai_manager, task_executor)
        await demo_creative_writing_with_ai(task_analyzer, ai_manager, task_executor)
        await demo_translation_with_ai(task_analyzer, ai_manager, task_executor)
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        await demo_provider_comparison()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        await demo_system_stats(ai_manager, task_executor)
        
        print("üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüí° –î–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:")
        print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./deploy.sh")
        print("   2. –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:8000")
        print("   3. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏ AI –∞–≥–µ–Ω—Ç–∞–º–∏!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        logger.logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
        await provider_manager.close_all()


if __name__ == "__main__":
    asyncio.run(main())
