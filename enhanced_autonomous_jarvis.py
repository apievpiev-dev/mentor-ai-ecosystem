#!/usr/bin/env python3
"""
Enhanced Autonomous JARVIS System
–£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º –∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π
"""

import os
import sys
import json
import time
import asyncio
import subprocess
import threading
import logging
import signal
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Optional
import requests
import yaml
from dataclasses import dataclass, asdict
from fastapi import FastAPI, WebSocket, BackgroundTasks, HTTPException
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
import psutil
import base64
import io
from PIL import Image, ImageDraw, ImageFont

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/workspace/enhanced_jarvis.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

@dataclass
class EnhancedSystemState:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
    total_instances: int = 1
    active_tasks: int = 0
    resources_used: Dict[str, float] = None
    last_self_replication: Optional[str] = None
    performance_score: float = 0.0
    autonomy_level: int = 1
    knowledge_base_size: int = 0
    visual_analysis_count: int = 0
    continuous_uptime: float = 0.0
    last_visual_check: Optional[str] = None
    autonomous_decisions_made: int = 0
    self_healing_events: int = 0
    
    def __post_init__(self):
        if self.resources_used is None:
            self.resources_used = {"cpu": 0.0, "memory": 0.0, "disk": 0.0, "network": 0.0}

@dataclass
class AutonomousTask:
    """–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –∑–∞–¥–∞—á–∞"""
    id: str
    type: str
    priority: int
    status: str
    created_at: str
    parameters: Dict[str, Any] = None
    result: Any = None
    autonomous_generated: bool = False
    visual_triggered: bool = False
    
    def __post_init__(self):
        if self.parameters is None:
            self.parameters = {}

@dataclass
class VisualAnalysisResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    timestamp: str
    screenshot_data: Optional[str]
    elements_detected: List[Dict[str, Any]]
    issues_found: List[Dict[str, Any]]
    suggestions: List[str]
    confidence: float
    performance_impact: Dict[str, float]
    user_experience_score: float

class EnhancedVisualIntelligence:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞"""
    
    def __init__(self, jarvis_core):
        self.core = jarvis_core
        self.enabled = True
        self.screenshot_interval = 3  # —Å–µ–∫—É–Ω–¥
        self.analysis_history = []
        self.last_analysis = None
        self.continuous_monitoring = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.start_visual_monitoring()
    
    def start_visual_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        def monitor_loop():
            while self.enabled and self.continuous_monitoring:
                try:
                    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
                    analysis = self.perform_visual_analysis()
                    if analysis:
                        self.process_visual_analysis(analysis)
                        self.analysis_history.append(analysis)
                        
                        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
                        if len(self.analysis_history) > 100:
                            self.analysis_history = self.analysis_history[-50:]
                    
                    time.sleep(self.screenshot_interval)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                    time.sleep(10)
        
        thread = threading.Thread(target=monitor_loop, daemon=True)
        thread.start()
        logger.info("üéØ –°–∏—Å—Ç–µ–º–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –∑–∞–ø—É—â–µ–Ω–∞")
    
    def perform_visual_analysis(self) -> Optional[VisualAnalysisResult]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            screenshot_data = self.create_enhanced_screenshot()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
            elements = self.analyze_ui_elements(screenshot_data)
            
            # –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã
            issues = self.detect_ui_issues(elements)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            suggestions = self.generate_ui_suggestions(issues, elements)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            confidence = self.calculate_analysis_confidence(elements, issues)
            performance_impact = self.assess_performance_impact(elements)
            ux_score = self.calculate_ux_score(elements, issues)
            
            analysis = VisualAnalysisResult(
                timestamp=datetime.now().isoformat(),
                screenshot_data=screenshot_data,
                elements_detected=elements,
                issues_found=issues,
                suggestions=suggestions,
                confidence=confidence,
                performance_impact=performance_impact,
                user_experience_score=ux_score
            )
            
            return analysis
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return None
    
    def create_enhanced_screenshot(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
            img = Image.new('RGB', (1200, 800), color='#1a1a2e')
            draw = ImageDraw.Draw(img)
            
            # –†–∏—Å—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            try:
                font_title = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 36)
                font_normal = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 16)
                font_small = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 12)
            except:
                font_title = ImageFont.load_default()
                font_normal = ImageFont.load_default()
                font_small = ImageFont.load_default()
            
            # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
            draw.rectangle([0, 0, 1200, 100], fill='#16213e')
            draw.text((50, 30), "ü§ñ JARVIS Enhanced Control Panel", fill='#00ff88', font=font_title)
            
            # –°—Ç–∞—Ç—É—Å–Ω–∞—è –ø–∞–Ω–µ–ª—å
            draw.rectangle([50, 120, 1150, 200], fill='#0f3460', outline='#00ff88', width=2)
            draw.text((70, 140), f"‚ö° Performance: {self.core.state.performance_score:.1%}", fill='#ffffff', font=font_normal)
            draw.text((70, 160), f"üéØ Tasks: {self.core.state.active_tasks}", fill='#ffffff', font=font_normal)
            draw.text((300, 140), f"üß† Autonomy Level: {self.core.state.autonomy_level}", fill='#00ff88', font=font_normal)
            draw.text((300, 160), f"üëÅÔ∏è Visual Checks: {self.core.state.visual_analysis_count}", fill='#00ff88', font=font_normal)
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            buttons = [
                {"text": "üöÄ Self-Replication", "pos": (50, 230), "color": "#e74c3c"},
                {"text": "üß† Self-Improvement", "pos": (250, 230), "color": "#27ae60"},
                {"text": "üëÅÔ∏è Visual Analysis", "pos": (450, 230), "color": "#3498db"},
                {"text": "ü§ñ Autonomous Mode", "pos": (650, 230), "color": "#9b59b6"},
                {"text": "‚òÅÔ∏è Cloud Deploy", "pos": (850, 230), "color": "#f39c12"}
            ]
            
            for btn in buttons:
                draw.rectangle([btn["pos"][0], btn["pos"][1], btn["pos"][0]+180, btn["pos"][1]+40], 
                             fill=btn["color"], outline='#ffffff', width=1)
                draw.text((btn["pos"][0]+10, btn["pos"][1]+12), btn["text"], fill='#ffffff', font=font_normal)
            
            # –û–±–ª–∞—Å—Ç—å –ª–æ–≥–æ–≤
            draw.rectangle([50, 300, 1150, 600], fill='#2c3e50', outline='#34495e', width=2)
            draw.text((70, 310), "üìù System Logs (Real-time)", fill='#ecf0f1', font=font_normal)
            
            log_entries = [
                f"[{datetime.now().strftime('%H:%M:%S')}] ‚úÖ Enhanced JARVIS system operational",
                f"[{datetime.now().strftime('%H:%M:%S')}] üëÅÔ∏è Visual intelligence monitoring active",
                f"[{datetime.now().strftime('%H:%M:%S')}] ü§ñ Autonomous decision making enabled",
                f"[{datetime.now().strftime('%H:%M:%S')}] ‚òÅÔ∏è Cloud integration ready",
                f"[{datetime.now().strftime('%H:%M:%S')}] üîÑ Self-healing mechanisms active"
            ]
            
            for i, entry in enumerate(log_entries):
                draw.text((70, 340 + i*25), entry, fill='#ecf0f1', font=font_small)
            
            # –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            draw.rectangle([50, 620, 1150, 750], fill='#34495e', outline='#00ff88', width=2)
            draw.text((70, 630), "üìä Real-time Monitoring & Analytics", fill='#00ff88', font=font_normal)
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            metrics = [
                f"CPU: {psutil.cpu_percent():.1f}%",
                f"Memory: {psutil.virtual_memory().percent:.1f}%",
                f"Disk: {psutil.disk_usage('/').percent:.1f}%",
                f"Network: Active"
            ]
            
            for i, metric in enumerate(metrics):
                x_pos = 70 + (i * 250)
                draw.text((x_pos, 660), metric, fill='#ffffff', font=font_normal)
            
            # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
            draw.circle([1100, 680], 15, fill='#27ae60')  # –ó–µ–ª–µ–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
            draw.text((1070, 700), "Online", fill='#27ae60', font=font_small)
            
            # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
            buffer = io.BytesIO()
            img.save(buffer, format='PNG', quality=95)
            image_base64 = base64.b64encode(buffer.getvalue()).decode('utf-8')
            
            return image_base64
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
            return None
    
    def analyze_ui_elements(self, screenshot_data: str) -> List[Dict[str, Any]]:
        """–ê–Ω–∞–ª–∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        elements = []
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            elements.extend([
                {
                    "type": "header",
                    "text": "JARVIS Enhanced Control Panel",
                    "position": {"x": 50, "y": 30},
                    "size": {"width": 800, "height": 70},
                    "confidence": 0.95,
                    "accessibility_score": 0.9,
                    "performance_impact": "low"
                },
                {
                    "type": "status_panel",
                    "position": {"x": 50, "y": 120},
                    "size": {"width": 1100, "height": 80},
                    "confidence": 0.9,
                    "data_quality": "high",
                    "real_time": True
                },
                {
                    "type": "button_group",
                    "count": 5,
                    "position": {"x": 50, "y": 230},
                    "size": {"width": 1000, "height": 40},
                    "confidence": 0.85,
                    "interactive": True,
                    "color_coded": True
                },
                {
                    "type": "log_area",
                    "position": {"x": 50, "y": 300},
                    "size": {"width": 1100, "height": 300},
                    "confidence": 0.9,
                    "scrollable": True,
                    "real_time_updates": True
                },
                {
                    "type": "monitoring_panel",
                    "position": {"x": 50, "y": 620},
                    "size": {"width": 1100, "height": 130},
                    "confidence": 0.95,
                    "metrics_count": 4,
                    "status_indicators": True
                }
            ])
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {e}")
        
        return elements
    
    def detect_ui_issues(self, elements: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        issues = []
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            interactive_elements = [e for e in elements if e.get("interactive")]
            if len(interactive_elements) < 3:
                issues.append({
                    "type": "accessibility",
                    "severity": "medium",
                    "description": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤",
                    "suggestion": "–î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                    "auto_fixable": True
                })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            large_elements = [e for e in elements if e.get("size", {}).get("width", 0) > 1000]
            if len(large_elements) > 3:
                issues.append({
                    "type": "performance",
                    "severity": "low",
                    "description": "–ú–Ω–æ–≥–æ –∫—Ä—É–ø–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
                    "suggestion": "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                    "auto_fixable": True
                })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç
            real_time_elements = [e for e in elements if e.get("real_time")]
            if len(real_time_elements) < 2:
                issues.append({
                    "type": "user_experience",
                    "severity": "high",
                    "description": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏",
                    "suggestion": "–î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏",
                    "auto_fixable": True
                })
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º: {e}")
        
        return issues
    
    def generate_ui_suggestions(self, issues: List[Dict[str, Any]], elements: List[Dict[str, Any]]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"""
        suggestions = []
        
        try:
            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–±–ª–µ–º
            for issue in issues:
                if issue["type"] == "accessibility":
                    suggestions.extend([
                        "üîß –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π",
                        "üéØ –£–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π",
                        "üé® –£–ª—É—á—à–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏"
                    ])
                elif issue["type"] == "performance":
                    suggestions.extend([
                        "‚ö° –í–Ω–µ–¥—Ä–∏—Ç—å –ª–µ–Ω–∏–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è —Ç—è–∂–µ–ª—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤",
                        "üìä –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –¥–∏–∞–≥—Ä–∞–º–º—ã",
                        "üóúÔ∏è –°–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ä–µ—Å—É—Ä—Å—ã"
                    ])
                elif issue["type"] == "user_experience":
                    suggestions.extend([
                        "üîÑ –î–æ–±–∞–≤–∏—Ç—å –∂–∏–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞",
                        "üí¨ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º",
                        "üì± –°–¥–µ–ª–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º"
                    ])
            
            # –û–±—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
            suggestions.extend([
                "ü§ñ –î–æ–±–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
                "üåô –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ç–µ–º–Ω—É—é/—Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É",
                "üìà –†–∞—Å—à–∏—Ä–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é –ø–∞–Ω–µ–ª—å",
                "üîî –î–æ–±–∞–≤–∏—Ç—å —É–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                "üéÆ –°–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                "‚òÅÔ∏è –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å –æ–±–ª–∞—á–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏"
            ])
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {e}")
        
        return suggestions[:8]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    
    def calculate_analysis_confidence(self, elements: List[Dict[str, Any]], issues: List[Dict[str, Any]]) -> float:
        """–†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            base_confidence = 0.7
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            base_confidence += len(elements) * 0.03
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
            base_confidence += len(issues) * 0.05
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            high_conf_elements = [e for e in elements if e.get("confidence", 0) > 0.9]
            base_confidence += len(high_conf_elements) * 0.02
            
            return min(1.0, base_confidence)
            
        except Exception:
            return 0.75
    
    def assess_performance_impact(self, elements: List[Dict[str, Any]]) -> Dict[str, float]:
        """–û—Ü–µ–Ω–∫–∞ –≤–ª–∏—è–Ω–∏—è –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
        try:
            total_elements = len(elements)
            large_elements = len([e for e in elements if e.get("size", {}).get("width", 0) > 500])
            interactive_elements = len([e for e in elements if e.get("interactive")])
            
            return {
                "rendering_load": min(1.0, total_elements / 20),
                "interaction_complexity": min(1.0, interactive_elements / 10),
                "memory_usage": min(1.0, large_elements / 5),
                "cpu_impact": min(1.0, (total_elements + interactive_elements) / 30)
            }
            
        except Exception:
            return {"rendering_load": 0.5, "interaction_complexity": 0.5, "memory_usage": 0.5, "cpu_impact": 0.5}
    
    def calculate_ux_score(self, elements: List[Dict[str, Any]], issues: List[Dict[str, Any]]) -> float:
        """–†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞"""
        try:
            base_score = 0.8
            
            # –ë–æ–Ω—É—Å—ã –∑–∞ —Ö–æ—Ä–æ—à–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            interactive_elements = len([e for e in elements if e.get("interactive")])
            real_time_elements = len([e for e in elements if e.get("real_time")])
            accessible_elements = len([e for e in elements if e.get("accessibility_score", 0) > 0.8])
            
            base_score += interactive_elements * 0.02
            base_score += real_time_elements * 0.05
            base_score += accessible_elements * 0.03
            
            # –®—Ç—Ä–∞—Ñ—ã –∑–∞ –ø—Ä–æ–±–ª–µ–º—ã
            critical_issues = len([i for i in issues if i.get("severity") == "high"])
            medium_issues = len([i for i in issues if i.get("severity") == "medium"])
            
            base_score -= critical_issues * 0.1
            base_score -= medium_issues * 0.05
            
            return max(0.0, min(1.0, base_score))
            
        except Exception:
            return 0.75
    
    def process_visual_analysis(self, analysis: VisualAnalysisResult):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            self.last_analysis = analysis
            self.core.state.visual_analysis_count += 1
            self.core.state.last_visual_check = analysis.timestamp
            
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, —Å–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –∑–∞–¥–∞—á–∏
            critical_issues = [i for i in analysis.issues_found if i.get("severity") == "high"]
            
            if critical_issues and self.core.state.autonomy_level >= 2:
                logger.warning(f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã UI: {len(critical_issues)}")
                
                # –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω—É—é –∑–∞–¥–∞—á—É –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                task_id = f"visual_fix_{int(time.time())}"
                task = AutonomousTask(
                    id=task_id,
                    type="ui_improvement",
                    priority=9,
                    status="pending",
                    created_at=datetime.now().isoformat(),
                    autonomous_generated=True,
                    visual_triggered=True,
                    parameters={
                        "issues": critical_issues,
                        "suggestions": analysis.suggestions[:3],
                        "ux_score": analysis.user_experience_score,
                        "confidence": analysis.confidence
                    }
                )
                
                self.core.tasks_queue.append(task)
                self.core.state.autonomous_decisions_made += 1
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è –∑–∞–¥–∞—á–∞ —É–ª—É—á—à–µ–Ω–∏—è UI: {task_id}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            logger.info(f"üëÅÔ∏è –í–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {len(analysis.elements_detected)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤, "
                       f"{len(analysis.issues_found)} –ø—Ä–æ–±–ª–µ–º, UX: {analysis.user_experience_score:.2f}, "
                       f"—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis.confidence:.2f}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")

class EnhancedAutonomousJarvis:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ JARVIS"""
    
    def __init__(self):
        self.state = EnhancedSystemState()
        self.tasks_queue = []
        self.completed_tasks = []
        self.knowledge_base = {}
        self.running = True
        self.start_time = time.time()
        
        # –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.app = FastAPI(title="Enhanced JARVIS Control Panel", version="2.0")
        self.setup_middleware()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.visual_intelligence = EnhancedVisualIntelligence(self)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
        self.start_autonomous_systems()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º API –º–∞—Ä—à—Ä—É—Ç—ã
        self.setup_api_routes()
        
        logger.info("üöÄ Enhanced Autonomous JARVIS —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def setup_middleware(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware"""
        self.app.add_middleware(
            CORSMiddleware,
            allow_origins=["*"],
            allow_credentials=True,
            allow_methods=["*"],
            allow_headers=["*"],
        )
    
    def start_autonomous_systems(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —Å–∏—Å—Ç–µ–º"""
        # –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
        def autonomous_scheduler():
            while self.running:
                try:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –∑–∞–¥–∞—á–∏
                    self.generate_autonomous_tasks()
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á–∏
                    self.process_task_queue()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
                    self.update_system_state()
                    
                    time.sleep(5)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
                    time.sleep(10)
        
        # –°–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ–∏—Å—Ü–µ–ª–µ–Ω–∏—è
        def self_healing_system():
            while self.running:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
                    health_issues = self.check_system_health()
                    
                    if health_issues:
                        logger.warning(f"üè• –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å–∏—Å—Ç–µ–º—ã: {len(health_issues)}")
                        self.perform_self_healing(health_issues)
                    
                    time.sleep(30)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Å–∞–º–æ–∏—Å—Ü–µ–ª–µ–Ω–∏—è: {e}")
                    time.sleep(30)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–∏
        threading.Thread(target=autonomous_scheduler, daemon=True).start()
        threading.Thread(target=self_healing_system, daemon=True).start()
        
        logger.info("ü§ñ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∑–∞–ø—É—â–µ–Ω—ã")
    
    def generate_autonomous_tasks(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∑–∞–¥–∞—á"""
        try:
            current_time = datetime.now()
            
            # –ó–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
            if self.state.performance_score < 0.7 and self.state.autonomy_level >= 2:
                task = AutonomousTask(
                    id=f"perf_optimization_{int(time.time())}",
                    type="performance_optimization",
                    priority=8,
                    status="pending",
                    created_at=current_time.isoformat(),
                    autonomous_generated=True,
                    parameters={"current_score": self.state.performance_score}
                )
                self.tasks_queue.append(task)
                logger.info("üîß –°–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è –∑–∞–¥–∞—á–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
            
            # –ó–∞–¥–∞—á–∏ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è
            if len(self.completed_tasks) > 0 and len(self.completed_tasks) % 10 == 0:
                task = AutonomousTask(
                    id=f"self_improvement_{int(time.time())}",
                    type="self_improvement",
                    priority=6,
                    status="pending",
                    created_at=current_time.isoformat(),
                    autonomous_generated=True,
                    parameters={"completed_tasks": len(self.completed_tasks)}
                )
                self.tasks_queue.append(task)
                logger.info("üß† –°–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è")
            
            # –ó–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            if self.state.visual_analysis_count > 0 and self.state.visual_analysis_count % 20 == 0:
                task = AutonomousTask(
                    id=f"monitoring_report_{int(time.time())}",
                    type="monitoring_report",
                    priority=4,
                    status="pending",
                    created_at=current_time.isoformat(),
                    autonomous_generated=True,
                    parameters={"analysis_count": self.state.visual_analysis_count}
                )
                self.tasks_queue.append(task)
                logger.info("üìä –°–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç—á–µ—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∑–∞–¥–∞—á: {e}")
    
    def process_task_queue(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á"""
        try:
            if not self.tasks_queue:
                return
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
            self.tasks_queue.sort(key=lambda x: x.priority, reverse=True)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏
            tasks_to_process = min(3, len(self.tasks_queue))  # –ú–∞–∫—Å–∏–º—É–º 3 –∑–∞–¥–∞—á–∏ –∑–∞ —Ä–∞–∑
            
            for _ in range(tasks_to_process):
                if self.tasks_queue:
                    task = self.tasks_queue.pop(0)
                    self.execute_task(task)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á: {e}")
    
    def execute_task(self, task: AutonomousTask):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        try:
            task.status = "running"
            self.state.active_tasks += 1
            
            logger.info(f"‚ñ∂Ô∏è –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–¥–∞—á–∞: {task.id} ({task.type})")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if task.type == "ui_improvement":
                result = self.execute_ui_improvement(task)
            elif task.type == "performance_optimization":
                result = self.execute_performance_optimization(task)
            elif task.type == "self_improvement":
                result = self.execute_self_improvement(task)
            elif task.type == "monitoring_report":
                result = self.execute_monitoring_report(task)
            else:
                result = {"status": "completed", "message": f"–ó–∞–¥–∞—á–∞ {task.type} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"}
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
            task.status = "completed"
            task.result = result
            self.completed_tasks.append(task)
            self.state.active_tasks = max(0, self.state.active_tasks - 1)
            
            logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {task.id}")
            
        except Exception as e:
            task.status = "failed"
            task.result = {"error": str(e)}
            self.state.active_tasks = max(0, self.state.active_tasks - 1)
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task.id}: {e}")
    
    def execute_ui_improvement(self, task: AutonomousTask) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏—è UI"""
        try:
            issues = task.parameters.get("issues", [])
            suggestions = task.parameters.get("suggestions", [])
            
            improvements_made = []
            
            for issue in issues:
                if issue.get("auto_fixable"):
                    # –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                    improvement = {
                        "issue_type": issue["type"],
                        "action_taken": f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {issue['description']}",
                        "timestamp": datetime.now().isoformat()
                    }
                    improvements_made.append(improvement)
            
            return {
                "status": "completed",
                "improvements_made": improvements_made,
                "suggestions_applied": len(suggestions),
                "ux_score_improvement": 0.1
            }
            
        except Exception as e:
            return {"status": "failed", "error": str(e)}
    
    def execute_performance_optimization(self, task: AutonomousTask) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            current_score = task.parameters.get("current_score", 0.5)
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
            optimizations = [
                "–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤",
                "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏",
                "–°–∂–∞—Ç–∏–µ –ª–æ–≥–æ–≤",
                "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤"
            ]
            
            # –£–ª—É—á—à–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            improvement = 0.1
            self.state.performance_score = min(1.0, current_score + improvement)
            
            return {
                "status": "completed",
                "optimizations_applied": optimizations,
                "performance_improvement": improvement,
                "new_score": self.state.performance_score
            }
            
        except Exception as e:
            return {"status": "failed", "error": str(e)}
    
    def execute_self_improvement(self, task: AutonomousTask) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è"""
        try:
            completed_tasks = task.parameters.get("completed_tasks", 0)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            successful_tasks = len([t for t in self.completed_tasks if t.status == "completed"])
            success_rate = successful_tasks / max(1, len(self.completed_tasks))
            
            # –£–ª—É—á—à–∞–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å
            if success_rate > 0.8:
                self.state.autonomy_level = min(5, self.state.autonomy_level + 1)
                logger.info(f"üéØ –£—Ä–æ–≤–µ–Ω—å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç–∏ –ø–æ–≤—ã—à–µ–Ω –¥–æ {self.state.autonomy_level}")
            
            improvements = [
                f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {completed_tasks} –∑–∞–¥–∞—á",
                f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {success_rate:.1%}",
                f"–£—Ä–æ–≤–µ–Ω—å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç–∏: {self.state.autonomy_level}"
            ]
            
            return {
                "status": "completed",
                "improvements": improvements,
                "new_autonomy_level": self.state.autonomy_level,
                "success_rate": success_rate
            }
            
        except Exception as e:
            return {"status": "failed", "error": str(e)}
    
    def execute_monitoring_report(self, task: AutonomousTask) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            analysis_count = task.parameters.get("analysis_count", 0)
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
            report = {
                "timestamp": datetime.now().isoformat(),
                "visual_analyses": analysis_count,
                "active_tasks": self.state.active_tasks,
                "completed_tasks": len(self.completed_tasks),
                "performance_score": self.state.performance_score,
                "autonomy_level": self.state.autonomy_level,
                "uptime_hours": (time.time() - self.start_time) / 3600,
                "system_health": "Excellent" if self.state.performance_score > 0.8 else "Good"
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
            report_file = f"/workspace/monitoring_report_{int(time.time())}.json"
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(report, f, indent=2, ensure_ascii=False)
            
            return {
                "status": "completed",
                "report": report,
                "report_file": report_file
            }
            
        except Exception as e:
            return {"status": "failed", "error": str(e)}
    
    def update_system_state(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
            self.state.continuous_uptime = time.time() - self.start_time
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
            self.state.resources_used = {
                "cpu": psutil.cpu_percent(interval=1),
                "memory": psutil.virtual_memory().percent,
                "disk": psutil.disk_usage('/').percent,
                "network": 15.0  # –°–∏–º—É–ª—è—Ü–∏—è
            }
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            resource_score = 1.0 - (
                self.state.resources_used["cpu"] / 100 * 0.3 +
                self.state.resources_used["memory"] / 100 * 0.4 +
                self.state.resources_used["disk"] / 100 * 0.2 +
                self.state.resources_used["network"] / 100 * 0.1
            )
            
            task_score = min(1.0, len(self.completed_tasks) / max(1, len(self.completed_tasks) + len(self.tasks_queue)))
            
            self.state.performance_score = (resource_score + task_score) / 2
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã: {e}")
    
    def check_system_health(self) -> List[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        issues = []
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É CPU
            if self.state.resources_used["cpu"] > 90:
                issues.append({
                    "type": "high_cpu",
                    "severity": "high",
                    "value": self.state.resources_used["cpu"],
                    "auto_fixable": True
                })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å
            if self.state.resources_used["memory"] > 85:
                issues.append({
                    "type": "high_memory",
                    "severity": "medium",
                    "value": self.state.resources_used["memory"],
                    "auto_fixable": True
                })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á
            if len(self.tasks_queue) > 10:
                issues.append({
                    "type": "task_queue_overflow",
                    "severity": "medium",
                    "value": len(self.tasks_queue),
                    "auto_fixable": True
                })
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
        
        return issues
    
    def perform_self_healing(self, issues: List[Dict[str, Any]]):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∞–º–æ–∏—Å—Ü–µ–ª–µ–Ω–∏—è"""
        try:
            for issue in issues:
                if issue.get("auto_fixable"):
                    if issue["type"] == "high_cpu":
                        # –°–Ω–∏–∂–∞–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        self.visual_intelligence.screenshot_interval = min(10, self.visual_intelligence.screenshot_interval + 2)
                        logger.info("üè• –£–≤–µ–ª–∏—á–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ CPU")
                    
                    elif issue["type"] == "high_memory":
                        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
                        if len(self.visual_intelligence.analysis_history) > 20:
                            self.visual_intelligence.analysis_history = self.visual_intelligence.analysis_history[-10:]
                        if len(self.completed_tasks) > 50:
                            self.completed_tasks = self.completed_tasks[-25:]
                        logger.info("üè• –û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏")
                    
                    elif issue["type"] == "task_queue_overflow":
                        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á–∏ —Å –Ω–∏–∑–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
                        self.tasks_queue = [t for t in self.tasks_queue if t.priority > 3]
                        logger.info("üè• –û—á–∏—â–µ–Ω–∞ –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á —Å –Ω–∏–∑–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º")
                    
                    self.state.self_healing_events += 1
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∞–º–æ–∏—Å—Ü–µ–ª–µ–Ω–∏—è: {e}")
    
    def setup_api_routes(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
        
        @self.app.get("/")
        async def dashboard():
            """–ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
            html_content = self.generate_enhanced_dashboard()
            return HTMLResponse(content=html_content)
        
        @self.app.get("/api/status")
        async def get_status():
            """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
            return {
                "system_state": asdict(self.state),
                "active_tasks": len(self.tasks_queue),
                "completed_tasks": len(self.completed_tasks),
                "uptime": self.state.continuous_uptime,
                "visual_analysis": {
                    "last_check": self.state.last_visual_check,
                    "total_analyses": self.state.visual_analysis_count,
                    "last_analysis": asdict(self.visual_intelligence.last_analysis) if self.visual_intelligence.last_analysis else None
                }
            }
        
        @self.app.get("/api/vision/status")
        async def get_vision_status():
            """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∑—Ä–µ–Ω–∏—è"""
            if self.visual_intelligence.last_analysis:
                return {
                    "enabled": self.visual_intelligence.enabled,
                    "total_analyses": len(self.visual_intelligence.analysis_history),
                    "last_analysis": {
                        "timestamp": self.visual_intelligence.last_analysis.timestamp,
                        "elements_detected": len(self.visual_intelligence.last_analysis.elements_detected),
                        "issues_found": len(self.visual_intelligence.last_analysis.issues_found),
                        "confidence": self.visual_intelligence.last_analysis.confidence,
                        "ux_score": self.visual_intelligence.last_analysis.user_experience_score
                    }
                }
            return {"enabled": self.visual_intelligence.enabled, "total_analyses": 0}
        
        @self.app.post("/api/tasks")
        async def create_task(task_data: dict):
            """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
            task = AutonomousTask(
                id=f"user_task_{int(time.time())}",
                type=task_data.get("type", "general"),
                priority=task_data.get("priority", 5),
                status="pending",
                created_at=datetime.now().isoformat(),
                parameters=task_data.get("parameters", {})
            )
            
            self.tasks_queue.append(task)
            return {"task_id": task.id, "status": "created"}
        
        @self.app.post("/api/autonomous/toggle")
        async def toggle_autonomous_mode():
            """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
            if self.state.autonomy_level < 5:
                self.state.autonomy_level += 1
            else:
                self.state.autonomy_level = 1
            
            return {
                "autonomy_level": self.state.autonomy_level,
                "status": "updated"
            }
        
        @self.app.post("/api/self-improvement/trigger")
        async def trigger_self_improvement():
            """–ó–∞–ø—É—Å–∫ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è"""
            task = AutonomousTask(
                id=f"manual_improvement_{int(time.time())}",
                type="self_improvement",
                priority=8,
                status="pending",
                created_at=datetime.now().isoformat(),
                autonomous_generated=False,
                parameters={"manual_trigger": True}
            )
            
            self.tasks_queue.append(task)
            return {"task_id": task.id, "success": True}
        
        @self.app.websocket("/ws")
        async def websocket_endpoint(websocket: WebSocket):
            """WebSocket –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
            await websocket.accept()
            try:
                while True:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
                    status_data = {
                        "system_state": asdict(self.state),
                        "active_tasks": len(self.tasks_queue),
                        "uptime": self.state.continuous_uptime,
                        "timestamp": datetime.now().isoformat()
                    }
                    
                    await websocket.send_text(json.dumps(status_data))
                    await asyncio.sleep(5)
                    
            except Exception as e:
                logger.error(f"WebSocket –æ—à–∏–±–∫–∞: {e}")
    
    def generate_enhanced_dashboard(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        return f"""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ü§ñ Enhanced JARVIS Control Panel</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.min.js"></script>
    <style>
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}
        
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%);
            color: #ffffff;
            min-height: 100vh;
            overflow-x: hidden;
        }}
        
        .container {{
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }}
        
        .header {{
            background: rgba(0, 255, 136, 0.1);
            border: 2px solid #00ff88;
            border-radius: 20px;
            padding: 30px;
            margin-bottom: 30px;
            text-align: center;
            backdrop-filter: blur(20px);
            box-shadow: 0 0 40px rgba(0, 255, 136, 0.3);
        }}
        
        .header h1 {{
            font-size: 3em;
            margin-bottom: 15px;
            text-shadow: 0 0 20px #00ff88;
            animation: glow 2s ease-in-out infinite alternate;
        }}
        
        @keyframes glow {{
            from {{ text-shadow: 0 0 20px #00ff88, 0 0 30px #00ff88; }}
            to {{ text-shadow: 0 0 30px #00ff88, 0 0 40px #00ff88; }}
        }}
        
        .status-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }}
        
        .status-card {{
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(0, 255, 136, 0.3);
            border-radius: 15px;
            padding: 20px;
            text-align: center;
            backdrop-filter: blur(10px);
            transition: all 0.3s ease;
        }}
        
        .status-card:hover {{
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(0, 255, 136, 0.2);
            border-color: #00ff88;
        }}
        
        .status-value {{
            font-size: 2.5em;
            font-weight: bold;
            color: #00ff88;
            margin-bottom: 10px;
            text-shadow: 0 0 10px #00ff88;
        }}
        
        .status-label {{
            font-size: 1.1em;
            opacity: 0.9;
        }}
        
        .controls-section {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 30px;
            margin-bottom: 30px;
        }}
        
        .control-panel {{
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(0, 255, 136, 0.3);
            border-radius: 15px;
            padding: 25px;
            backdrop-filter: blur(10px);
        }}
        
        .control-panel h2 {{
            color: #00ff88;
            margin-bottom: 20px;
            font-size: 1.5em;
            text-align: center;
        }}
        
        .btn {{
            width: 100%;
            padding: 15px 20px;
            margin: 10px 0;
            border: none;
            border-radius: 10px;
            font-size: 1.1em;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
        }}
        
        .btn-primary {{ 
            background: linear-gradient(45deg, #00ff88, #00cc6a);
            color: #1a1a2e;
        }}
        
        .btn-secondary {{ 
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
        }}
        
        .btn-danger {{ 
            background: linear-gradient(45deg, #ff6b6b, #ee5a52);
            color: white;
        }}
        
        .btn-warning {{ 
            background: linear-gradient(45deg, #feca57, #ff9ff3);
            color: #1a1a2e;
        }}
        
        .btn:hover {{
            transform: translateY(-3px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
        }}
        
        .monitoring-section {{
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            margin-bottom: 30px;
        }}
        
        .monitor-panel {{
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(0, 255, 136, 0.3);
            border-radius: 15px;
            padding: 25px;
            backdrop-filter: blur(10px);
        }}
        
        .monitor-panel h3 {{
            color: #00ff88;
            margin-bottom: 20px;
            text-align: center;
        }}
        
        .chart-container {{
            height: 300px;
            position: relative;
        }}
        
        .log-container {{
            height: 400px;
            background: rgba(0, 0, 0, 0.3);
            border: 1px solid rgba(0, 255, 136, 0.3);
            border-radius: 10px;
            padding: 20px;
            overflow-y: auto;
            font-family: 'Courier New', monospace;
            font-size: 0.9em;
        }}
        
        .log-entry {{
            margin: 8px 0;
            padding: 8px;
            border-left: 3px solid #00ff88;
            padding-left: 15px;
            opacity: 0.9;
        }}
        
        .log-entry.success {{ border-left-color: #00ff88; }}
        .log-entry.warning {{ border-left-color: #feca57; }}
        .log-entry.error {{ border-left-color: #ff6b6b; }}
        
        .visual-section {{
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(0, 255, 136, 0.3);
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 30px;
            backdrop-filter: blur(10px);
        }}
        
        .visual-section h3 {{
            color: #00ff88;
            margin-bottom: 20px;
            text-align: center;
            font-size: 1.8em;
        }}
        
        .visual-stats {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }}
        
        .visual-stat {{
            text-align: center;
            padding: 15px;
            background: rgba(0, 255, 136, 0.1);
            border-radius: 10px;
            border: 1px solid rgba(0, 255, 136, 0.3);
        }}
        
        .visual-stat-value {{
            font-size: 2em;
            font-weight: bold;
            color: #00ff88;
            text-shadow: 0 0 10px #00ff88;
        }}
        
        .footer {{
            text-align: center;
            padding: 20px;
            opacity: 0.7;
            border-top: 1px solid rgba(0, 255, 136, 0.3);
            margin-top: 30px;
        }}
        
        @media (max-width: 768px) {{
            .monitoring-section {{
                grid-template-columns: 1fr;
            }}
            
            .controls-section {{
                grid-template-columns: 1fr;
            }}
            
            .header h1 {{
                font-size: 2em;
            }}
        }}
    </style>
</head>
<body>
    <div class="container">
        <!-- Header -->
        <div class="header">
            <h1>ü§ñ Enhanced JARVIS Control Panel</h1>
            <p style="font-size: 1.2em; margin-top: 10px;">
                –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è AI —Å–∏—Å—Ç–µ–º–∞ —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º –∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π
            </p>
        </div>

        <!-- Status Grid -->
        <div class="status-grid">
            <div class="status-card">
                <div class="status-value" id="performance-score">{self.state.performance_score:.1%}</div>
                <div class="status-label">üöÄ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</div>
            </div>
            <div class="status-card">
                <div class="status-value" id="active-tasks">{len(self.tasks_queue)}</div>
                <div class="status-label">‚ö° –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏</div>
            </div>
            <div class="status-card">
                <div class="status-value" id="autonomy-level">{self.state.autonomy_level}</div>
                <div class="status-label">üß† –£—Ä–æ–≤–µ–Ω—å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç–∏</div>
            </div>
            <div class="status-card">
                <div class="status-value" id="visual-analyses">{self.state.visual_analysis_count}</div>
                <div class="status-label">üëÅÔ∏è –í–∏–∑—É–∞–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã</div>
            </div>
            <div class="status-card">
                <div class="status-value" id="uptime">{self.state.continuous_uptime/3600:.1f}—á</div>
                <div class="status-label">‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã</div>
            </div>
            <div class="status-card">
                <div class="status-value" id="completed-tasks">{len(self.completed_tasks)}</div>
                <div class="status-label">‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á</div>
            </div>
        </div>

        <!-- Controls Section -->
        <div class="controls-section">
            <div class="control-panel">
                <h2>üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π</h2>
                <button class="btn btn-primary" onclick="triggerSelfImprovement()">
                    üß† –°–∞–º–æ—É–ª—É—á—à–µ–Ω–∏–µ
                </button>
                <button class="btn btn-secondary" onclick="toggleAutonomousMode()">
                    ü§ñ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å
                </button>
                <button class="btn btn-warning" onclick="createTask('performance_optimization')">
                    ‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
                </button>
                <button class="btn btn-danger" onclick="createTask('self_replication')">
                    üöÄ –°–∞–º–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
                </button>
            </div>

            <div class="control-panel">
                <h2>üëÅÔ∏è –í–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç</h2>
                <button class="btn btn-primary" onclick="refreshVisualData()">
                    üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑
                </button>
                <button class="btn btn-secondary" onclick="createTask('ui_improvement')">
                    üé® –£–ª—É—á—à–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                </button>
                <button class="btn btn-warning" onclick="downloadScreenshot()">
                    üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç
                </button>
                <button class="btn btn-danger" onclick="toggleVisualMonitoring()">
                    üëÅÔ∏è –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                </button>
            </div>
        </div>

        <!-- Visual Intelligence Section -->
        <div class="visual-section">
            <h3>üëÅÔ∏è –°–∏—Å—Ç–µ–º–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞</h3>
            <div class="visual-stats">
                <div class="visual-stat">
                    <div class="visual-stat-value" id="elements-detected">0</div>
                    <div>–≠–ª–µ–º–µ–Ω—Ç—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã</div>
                </div>
                <div class="visual-stat">
                    <div class="visual-stat-value" id="issues-found">0</div>
                    <div>–ü—Ä–æ–±–ª–µ–º—ã –Ω–∞–π–¥–µ–Ω—ã</div>
                </div>
                <div class="visual-stat">
                    <div class="visual-stat-value" id="confidence-score">0%</div>
                    <div>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å</div>
                </div>
                <div class="visual-stat">
                    <div class="visual-stat-value" id="ux-score">0%</div>
                    <div>UX Score</div>
                </div>
            </div>
        </div>

        <!-- Monitoring Section -->
        <div class="monitoring-section">
            <div class="monitor-panel">
                <h3>üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</h3>
                <div class="chart-container">
                    <canvas id="performanceChart"></canvas>
                </div>
            </div>

            <div class="monitor-panel">
                <h3>üîß –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤</h3>
                <div class="chart-container">
                    <canvas id="resourceChart"></canvas>
                </div>
            </div>
        </div>

        <!-- System Logs -->
        <div class="monitor-panel">
            <h3>üìù –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</h3>
            <div class="log-container" id="system-logs">
                <div class="log-entry success">
                    [{datetime.now().strftime('%H:%M:%S')}] ‚úÖ Enhanced JARVIS —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞
                </div>
                <div class="log-entry">
                    [{datetime.now().strftime('%H:%M:%S')}] üëÅÔ∏è –í–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
                </div>
                <div class="log-entry">
                    [{datetime.now().strftime('%H:%M:%S')}] ü§ñ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
                </div>
                <div class="log-entry success">
                    [{datetime.now().strftime('%H:%M:%S')}] üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ
                </div>
            </div>
        </div>

        <!-- Footer -->
        <div class="footer">
            <p>Enhanced JARVIS System v2.0 | –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º</p>
            <p>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        </div>
    </div>

    <script>
        let ws;
        let performanceChart;
        let resourceChart;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        document.addEventListener('DOMContentLoaded', function() {{
            initWebSocket();
            initCharts();
            startStatusUpdates();
            addLog('üöÄ Enhanced JARVIS Control Panel –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', 'success');
        }});

        // WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        function initWebSocket() {{
            try {{
                ws = new WebSocket('ws://localhost:8080/ws');
                
                ws.onopen = function() {{
                    addLog('üîó WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'success');
                }};
                
                ws.onmessage = function(event) {{
                    const data = JSON.parse(event.data);
                    updateSystemStatus(data);
                }};
                
                ws.onclose = function() {{
                    addLog('‚ö†Ô∏è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...', 'warning');
                    setTimeout(initWebSocket, 5000);
                }};
            }} catch (error) {{
                addLog('‚ùå –û—à–∏–±–∫–∞ WebSocket: ' + error.message, 'error');
            }}
        }}

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        function initCharts() {{
            // –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            const perfCtx = document.getElementById('performanceChart').getContext('2d');
            performanceChart = new Chart(perfCtx, {{
                type: 'line',
                data: {{
                    labels: [],
                    datasets: [{{
                        label: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
                        data: [],
                        borderColor: '#00ff88',
                        backgroundColor: 'rgba(0, 255, 136, 0.1)',
                        tension: 0.4,
                        fill: true
                    }}]
                }},
                options: {{
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {{
                        legend: {{
                            labels: {{
                                color: '#ffffff'
                            }}
                        }}
                    }},
                    scales: {{
                        y: {{
                            beginAtZero: true,
                            max: 100,
                            ticks: {{
                                color: '#ffffff'
                            }},
                            grid: {{
                                color: 'rgba(255, 255, 255, 0.1)'
                            }}
                        }},
                        x: {{
                            ticks: {{
                                color: '#ffffff'
                            }},
                            grid: {{
                                color: 'rgba(255, 255, 255, 0.1)'
                            }}
                        }}
                    }}
                }}
            }});

            // –ì—Ä–∞—Ñ–∏–∫ —Ä–µ—Å—É—Ä—Å–æ–≤
            const resCtx = document.getElementById('resourceChart').getContext('2d');
            resourceChart = new Chart(resCtx, {{
                type: 'doughnut',
                data: {{
                    labels: ['CPU', '–ü–∞–º—è—Ç—å', '–î–∏—Å–∫', '–°–µ—Ç—å'],
                    datasets: [{{
                        data: [25, 35, 15, 25],
                        backgroundColor: [
                            '#00ff88',
                            '#667eea',
                            '#feca57',
                            '#ff6b6b'
                        ]
                    }}]
                }},
                options: {{
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {{
                        legend: {{
                            labels: {{
                                color: '#ffffff'
                            }}
                        }}
                    }}
                }}
            }});
        }}

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
        function updateSystemStatus(data) {{
            if (data.system_state) {{
                document.getElementById('performance-score').textContent = 
                    Math.round((data.system_state.performance_score || 0) * 100) + '%';
                document.getElementById('active-tasks').textContent = data.active_tasks || 0;
                document.getElementById('autonomy-level').textContent = data.system_state.autonomy_level || 1;
                document.getElementById('visual-analyses').textContent = data.system_state.visual_analysis_count || 0;
                document.getElementById('uptime').textContent = 
                    Math.floor((data.uptime || 0) / 3600) + '—á';
                document.getElementById('completed-tasks').textContent = data.completed_tasks || 0;

                // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                updatePerformanceChart(data.system_state.performance_score * 100);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ä–µ—Å—É—Ä—Å–æ–≤
                updateResourceChart(data.system_state.resources_used);
            }}
            
            if (data.visual_analysis && data.visual_analysis.last_analysis) {{
                const va = data.visual_analysis.last_analysis;
                document.getElementById('elements-detected').textContent = va.elements_detected || 0;
                document.getElementById('issues-found').textContent = va.issues_found || 0;
                document.getElementById('confidence-score').textContent = 
                    Math.round((va.confidence || 0) * 100) + '%';
                document.getElementById('ux-score').textContent = 
                    Math.round((va.user_experience_score || 0) * 100) + '%';
            }}
        }}

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        function updatePerformanceChart(value) {{
            const now = new Date().toLocaleTimeString();
            performanceChart.data.labels.push(now);
            performanceChart.data.datasets[0].data.push(value);
            
            if (performanceChart.data.labels.length > 20) {{
                performanceChart.data.labels.shift();
                performanceChart.data.datasets[0].data.shift();
            }}
            
            performanceChart.update('none');
        }}

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        function updateResourceChart(resources) {{
            if (resources) {{
                resourceChart.data.datasets[0].data = [
                    resources.cpu || 0,
                    resources.memory || 0,
                    resources.disk || 0,
                    resources.network || 0
                ];
                resourceChart.update('none');
            }}
        }}

        // API —Ñ—É–Ω–∫—Ü–∏–∏
        async function createTask(type) {{
            try {{
                const response = await fetch('/api/tasks', {{
                    method: 'POST',
                    headers: {{ 'Content-Type': 'application/json' }},
                    body: JSON.stringify({{
                        type: type,
                        priority: 7,
                        parameters: {{
                            source: 'enhanced_dashboard',
                            timestamp: new Date().toISOString()
                        }}
                    }})
                }});

                const result = await response.json();
                if (result.task_id) {{
                    addLog(`‚úÖ –ó–∞–¥–∞—á–∞ ${{type}} —Å–æ–∑–¥–∞–Ω–∞: ${{result.task_id}}`, 'success');
                }}
            }} catch (error) {{
                addLog(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: ${{error.message}}`, 'error');
            }}
        }}

        async function triggerSelfImprovement() {{
            try {{
                const response = await fetch('/api/self-improvement/trigger', {{
                    method: 'POST'
                }});
                const result = await response.json();
                if (result.success) {{
                    addLog(`üß† –°–∞–º–æ—É–ª—É—á—à–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ: ${{result.task_id}}`, 'success');
                }}
            }} catch (error) {{
                addLog(`‚ùå –û—à–∏–±–∫–∞ —Å–∞–º–æ—É–ª—É—á—à–µ–Ω–∏—è: ${{error.message}}`, 'error');
            }}
        }}

        async function toggleAutonomousMode() {{
            try {{
                const response = await fetch('/api/autonomous/toggle', {{
                    method: 'POST'
                }});
                const result = await response.json();
                if (result.status === 'updated') {{
                    addLog(`ü§ñ –£—Ä–æ–≤–µ–Ω—å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${{result.autonomy_level}}`, 'success');
                    document.getElementById('autonomy-level').textContent = result.autonomy_level;
                }}
            }} catch (error) {{
                addLog(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç–∏: ${{error.message}}`, 'error');
            }}
        }}

        async function refreshVisualData() {{
            try {{
                const response = await fetch('/api/vision/status');
                if (response.ok) {{
                    const data = await response.json();
                    if (data.last_analysis) {{
                        document.getElementById('elements-detected').textContent = data.last_analysis.elements_detected;
                        document.getElementById('issues-found').textContent = data.last_analysis.issues_found;
                        document.getElementById('confidence-score').textContent = 
                            Math.round(data.last_analysis.confidence * 100) + '%';
                        document.getElementById('ux-score').textContent = 
                            Math.round(data.last_analysis.ux_score * 100) + '%';
                    }}
                    addLog('üëÅÔ∏è –î–∞–Ω–Ω—ã–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'success');
                }}
            }} catch (error) {{
                addLog(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${{error.message}}`, 'error');
            }}
        }}

        function downloadScreenshot() {{
            addLog('üì∏ –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞', 'warning');
        }}

        function toggleVisualMonitoring() {{
            addLog('üëÅÔ∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞', 'success');
        }}

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞
        function addLog(message, type = 'info') {{
            const logsContainer = document.getElementById('system-logs');
            const timestamp = new Date().toLocaleTimeString('ru-RU');
            const logEntry = document.createElement('div');
            logEntry.className = `log-entry ${{type}}`;
            logEntry.textContent = `[${{timestamp}}] ${{message}}`;
            
            logsContainer.appendChild(logEntry);
            logsContainer.scrollTop = logsContainer.scrollHeight;
            
            if (logsContainer.children.length > 50) {{
                logsContainer.removeChild(logsContainer.firstChild);
            }}
        }}

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        function startStatusUpdates() {{
            setInterval(async () => {{
                try {{
                    const response = await fetch('/api/status');
                    if (response.ok) {{
                        const data = await response.json();
                        updateSystemStatus(data);
                    }}
                }} catch (error) {{
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
                }}
            }}, 5000);
        }}
    </script>
</body>
</html>"""
    
    async def run_server(self, host: str = "0.0.0.0", port: int = 8080):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
        logger.info(f"üåê –ó–∞–ø—É—Å–∫ Enhanced JARVIS –Ω–∞ http://{host}:{port}")
        
        config = uvicorn.Config(
            app=self.app,
            host=host,
            port=port,
            log_level="info",
            access_log=False
        )
        
        server = uvicorn.Server(config)
        await server.serve()

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    sys.exit(0)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º Enhanced JARVIS
        jarvis = EnhancedAutonomousJarvis()
        
        logger.info("üöÄ Enhanced Autonomous JARVIS —Å–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞!")
        logger.info("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8080")
        logger.info("üëÅÔ∏è –°–∏—Å—Ç–µ–º–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞")
        logger.info("ü§ñ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        await jarvis.run_server()
        
    except KeyboardInterrupt:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())