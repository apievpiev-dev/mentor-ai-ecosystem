#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ Neural Network Creator
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ AI –∞–≥–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π
"""

import asyncio
import json
import logging
import time
import uuid
from typing import Dict, List, Any, Optional
from datetime import datetime
from pathlib import Path

from multi_agent_system import BaseAgent, AgentType, AgentCoordinator
from ai_engine import ai_engine, generate_ai_response
from ai_manager_agent import ai_manager
from neural_network_creator_agent import neural_network_creator
from neural_network_web_interface import web_interface

logger = logging.getLogger(__name__)

class IntegratedNeuralNetworkSystem:
    """–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π"""
    
    def __init__(self):
        self.system_id = str(uuid.uuid4())
        self.coordinator = AgentCoordinator()
        self.agents = {}
        self.active_projects = {}
        self.system_status = "initializing"
        self._setup_agents()
        self._setup_coordination()
    
    def _setup_agents(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–≥–µ–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º—É
        self.agents = {
            "ai_manager": ai_manager,
            "neural_network_creator": neural_network_creator,
            "coordinator": self.coordinator
        }
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–æ–≤ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–µ
        for agent_id, agent in self.agents.items():
            self.coordinator.register_agent(agent)
        
        logger.info(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(self.agents)} –∞–≥–µ–Ω—Ç–æ–≤")
    
    def _setup_coordination(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏
        self.coordinator.add_agent_connection(
            "neural_network_creator", 
            "ai_manager",
            "model_management"
        )
        
        self.coordinator.add_agent_connection(
            "ai_manager",
            "neural_network_creator", 
            "ai_optimization"
        )
        
        logger.info("üîó –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
    
    async def create_neural_network_project(self, project_description: str, 
                                          project_name: str = None) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–µ–π –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        try:
            project_id = str(uuid.uuid4())
            project_name = project_name or f"project_{project_id[:8]}"
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
            project = {
                "id": project_id,
                "name": project_name,
                "description": project_description,
                "status": "planning",
                "created_at": datetime.now().isoformat(),
                "agents_involved": [],
                "tasks": [],
                "results": {}
            }
            
            self.active_projects[project_id] = project
            
            # –≠—Ç–∞–ø 1: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å AI Manager
            logger.info("üìã –≠—Ç–∞–ø 1: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...")
            planning_result = await self._plan_project(project_description)
            project["results"]["planning"] = planning_result
            project["agents_involved"].append("ai_manager")
            
            # –≠—Ç–∞–ø 2: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
            logger.info("üß† –≠—Ç–∞–ø 2: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...")
            network_result = await self._create_network_for_project(planning_result)
            project["results"]["network_creation"] = network_result
            project["agents_involved"].append("neural_network_creator")
            
            # –≠—Ç–∞–ø 3: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å AI Manager
            logger.info("‚ö° –≠—Ç–∞–ø 3: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è...")
            optimization_result = await self._optimize_network(network_result)
            project["results"]["optimization"] = optimization_result
            
            # –≠—Ç–∞–ø 4: –û–±—É—á–µ–Ω–∏–µ
            logger.info("üéì –≠—Ç–∞–ø 4: –û–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...")
            training_result = await self._train_network_for_project(network_result)
            project["results"]["training"] = training_result
            
            # –≠—Ç–∞–ø 5: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
            logger.info("üìä –≠—Ç–∞–ø 5: –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")
            visualization_result = await self._create_visualization(network_result)
            project["results"]["visualization"] = visualization_result
            
            project["status"] = "completed"
            project["completed_at"] = datetime.now().isoformat()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            await self._notify_web_interface(project)
            
            return {
                "message": f"–ü—Ä–æ–µ–∫—Ç '{project_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω",
                "project_id": project_id,
                "project": project
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {e}")
            if project_id in self.active_projects:
                self.active_projects[project_id]["status"] = "error"
                self.active_projects[project_id]["error"] = str(e)
            return {"error": str(e)}
    
    async def _plan_project(self, description: str) -> Dict[str, Any]:
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å –ø–æ–º–æ—â—å—é AI Manager"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            planning_prompt = f"""
            –°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {description}
            
            –í–µ—Ä–Ω–∏ JSON —Å –ø–æ–ª—è–º–∏:
            - network_type: —Ç–∏–ø –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ (classification/regression/generation)
            - input_size: —Ä–∞–∑–º–µ—Ä –≤—Ö–æ–¥–∞
            - output_size: —Ä–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–∞
            - hidden_layers: —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–º–µ—Ä–æ–≤ —Å–∫—Ä—ã—Ç—ã—Ö —Å–ª–æ–µ–≤
            - activation_functions: —Ñ—É–Ω–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            - optimizer: –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä
            - loss_function: —Ñ—É–Ω–∫—Ü–∏—è –ø–æ—Ç–µ—Ä—å
            - learning_rate: —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è
            - batch_size: —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
            - epochs: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö
            - data_requirements: —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–∞–Ω–Ω—ã–º
            - performance_targets: —Ü–µ–ª–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            """
            
            ai_response = await generate_ai_response(planning_prompt)
            
            try:
                plan = json.loads(ai_response)
            except json.JSONDecodeError:
                # Fallback –ø–ª–∞–Ω
                plan = {
                    "network_type": "classification",
                    "input_size": 784,
                    "output_size": 10,
                    "hidden_layers": [128, 64],
                    "activation_functions": ["relu", "relu"],
                    "optimizer": "adam",
                    "loss_function": "cross_entropy",
                    "learning_rate": 0.001,
                    "batch_size": 32,
                    "epochs": 10,
                    "data_requirements": "–ù—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è",
                    "performance_targets": "–¢–æ—á–Ω–æ—Å—Ç—å > 90%"
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å AI –º–æ–¥–µ–ª–µ–π
            ai_status = await ai_manager._handle_list_models({})
            plan["ai_models_available"] = ai_status.get("total_models", 0)
            
            return {
                "plan": plan,
                "ai_suggestion": ai_response,
                "planning_time": datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return {"error": str(e)}
    
    async def _create_network_for_project(self, planning_result: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞–Ω–∞"""
        try:
            plan = planning_result.get("plan", {})
            
            # –°–æ–∑–¥–∞–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç—å
            network_config = {
                "name": f"project_network_{uuid.uuid4().hex[:8]}",
                "type": plan.get("network_type", "classification"),
                "input_size": plan.get("input_size", 784),
                "output_size": plan.get("output_size", 10),
                "hidden_layers": plan.get("hidden_layers", [128, 64])
            }
            
            result = await neural_network_creator._handle_create_network(network_config)
            
            if result.get("error"):
                raise Exception(result["error"])
            
            return {
                "network_creation": result,
                "network_name": result["network_name"],
                "creation_time": datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–∏: {e}")
            return {"error": str(e)}
    
    async def _optimize_network(self, network_result: Dict[str, Any]) -> Dict[str, Any]:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"""
        try:
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º AI –º–æ–¥–µ–ª–∏
            optimization_result = await ai_manager._handle_optimize_models({})
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            performance_result = await ai_manager._handle_monitor_performance({})
            
            return {
                "ai_optimization": optimization_result,
                "performance_metrics": performance_result,
                "optimization_time": datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
            return {"error": str(e)}
    
    async def _train_network_for_project(self, network_result: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"""
        try:
            network_name = network_result.get("network_name")
            if not network_name:
                raise Exception("–ò–º—è —Å–µ—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            # –û–±—É—á–∞–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç—å
            training_result = await neural_network_creator._handle_train_network({
                "network_name": network_name
            })
            
            if training_result.get("error"):
                raise Exception(training_result["error"])
            
            return {
                "training": training_result,
                "training_time": datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
            return {"error": str(e)}
    
    async def _create_visualization(self, network_result: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
        try:
            network_name = network_result.get("network_name")
            if not network_name:
                raise Exception("–ò–º—è —Å–µ—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
            viz_result = await neural_network_creator._handle_visualize_network({
                "network_name": network_name
            })
            
            if viz_result.get("error"):
                raise Exception(viz_result["error"])
            
            return {
                "visualization": viz_result,
                "visualization_time": datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return {"error": str(e)}
    
    async def _notify_web_interface(self, project: Dict[str, Any]):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            if hasattr(web_interface, 'broadcast_update'):
                await web_interface.broadcast_update({
                    "type": "project_completed",
                    "project": project
                })
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
    
    async def get_system_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –°—Ç–∞—Ç—É—Å AI Manager
            ai_status = await ai_manager._handle_list_models({})
            
            # –°—Ç–∞—Ç—É—Å Neural Network Creator
            networks_status = await neural_network_creator._handle_list_networks({})
            
            # –°—Ç–∞—Ç—É—Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
            coordinator_status = self.coordinator.get_status()
            
            return {
                "system_id": self.system_id,
                "status": self.system_status,
                "agents": {
                    "ai_manager": {
                        "status": "active",
                        "models_count": ai_status.get("total_models", 0)
                    },
                    "neural_network_creator": {
                        "status": "active", 
                        "networks_count": networks_status.get("total_networks", 0)
                    },
                    "coordinator": coordinator_status
                },
                "active_projects": len(self.active_projects),
                "timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {"error": str(e)}
    
    async def auto_create_network_with_ai(self, task_description: str) -> Dict[str, Any]:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ—Ö AI –∞–≥–µ–Ω—Ç–æ–≤"""
        try:
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è: {task_description}")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
            result = await self.create_neural_network_project(task_description)
            
            if result.get("error"):
                return result
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å AI
            project = result["project"]
            network_name = project["results"]["network_creation"]["network_name"]
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            optimization_prompt = f"""
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–∑–¥–∞–Ω–Ω—É—é –Ω–µ–π—Ä–æ—Å–µ—Ç—å –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è:
            –ó–∞–¥–∞—á–∞: {task_description}
            –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {json.dumps(project['results']['network_creation']['architecture'], indent=2)}
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è: {json.dumps(project['results']['training'], indent=2)}
            
            –ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã, –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ª–∏ –º–µ—Ç–æ–¥–æ–≤ –æ–±—É—á–µ–Ω–∏—è.
            """
            
            ai_suggestions = await generate_ai_response(optimization_prompt)
            
            return {
                "message": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
                "project": project,
                "ai_suggestions": ai_suggestions,
                "total_agents_used": len(project["agents_involved"])
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è: {e}")
            return {"error": str(e)}
    
    async def start_system(self):
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        try:
            self.system_status = "starting"
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            web_runner = await web_interface.start_server()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI Manager
            await ai_manager._handle_setup_ai_environment({})
            
            self.system_status = "running"
            
            logger.info("üéâ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ Neural Network Creator –∑–∞–ø—É—â–µ–Ω–∞!")
            logger.info("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:8081")
            logger.info("ü§ñ AI –∞–≥–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ")
            
            return web_runner
            
        except Exception as e:
            self.system_status = "error"
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
            raise

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã
integrated_system = IntegratedNeuralNetworkSystem()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
        runner = await integrated_system.start_system()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –Ω–µ–π—Ä–æ—Å–µ—Ç—å
        test_result = await integrated_system.auto_create_network_with_ai(
            "–°–æ–∑–¥–∞–π –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä—É–∫–æ–ø–∏—Å–Ω—ã—Ö —Ü–∏—Ñ—Ä (MNIST)"
        )
        
        if test_result.get("error"):
            logger.error(f"‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {test_result['error']}")
        else:
            logger.info("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
            logger.info(f"üìä –°–æ–∑–¥–∞–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(integrated_system.active_projects)}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ
        while True:
            await asyncio.sleep(1)
            
    except KeyboardInterrupt:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())