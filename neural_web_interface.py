#!/usr/bin/env python3
"""
Neural Network Web Interface
–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
"""

import asyncio
import json
import logging
import time
from datetime import datetime
from typing import Dict, List, Any, Optional
import threading

from fastapi import FastAPI, WebSocket, WebSocketDisconnect, HTTPException, BackgroundTasks
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.middleware.cors import CORSMiddleware
import uvicorn

from enhanced_neural_system import enhanced_neural_system, NeuralTask
from ai_engine import ai_engine
from visual_monitor import VisualMonitor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="Enhanced Neural Network System",
    description="–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º",
    version="2.0.0"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
connected_clients: List[WebSocket] = []
visual_monitor = None

class ConnectionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    
    def __init__(self):
        self.active_connections: List[WebSocket] = []
    
    async def connect(self, websocket: WebSocket):
        await websocket.accept()
        self.active_connections.append(websocket)
        logger.info(f"üîå –ù–æ–≤–æ–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ. –í—Å–µ–≥–æ: {len(self.active_connections)}")
    
    def disconnect(self, websocket: WebSocket):
        if websocket in self.active_connections:
            self.active_connections.remove(websocket)
        logger.info(f"üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ. –û—Å—Ç–∞–ª–æ—Å—å: {len(self.active_connections)}")
    
    async def send_personal_message(self, message: str, websocket: WebSocket):
        try:
            await websocket.send_text(message)
        except:
            self.disconnect(websocket)
    
    async def broadcast(self, message: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
        if self.active_connections:
            message_str = json.dumps(message, ensure_ascii=False)
            disconnected = []
            
            for connection in self.active_connections:
                try:
                    await connection.send_text(message_str)
                except:
                    disconnected.append(connection)
            
            # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            for connection in disconnected:
                self.disconnect(connection)

manager = ConnectionManager()

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    global visual_monitor
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    try:
        visual_monitor = VisualMonitor()
        logger.info("üëÅÔ∏è –í–∏–∑—É–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    asyncio.create_task(background_monitoring())
    
    logger.info("‚úÖ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

@app.on_event("shutdown")
async def shutdown_event():
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
    logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
    
    if visual_monitor:
        visual_monitor.stop_monitoring()
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    for connection in manager.active_connections:
        try:
            await connection.close()
        except:
            pass

async def background_monitoring():
    """–§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"""
    while True:
        try:
            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
            system_stats = {
                "type": "system_update",
                "timestamp": datetime.now().isoformat(),
                "neural_system": enhanced_neural_system.get_system_status(),
                "ai_engine": ai_engine.get_status(),
                "visual_monitor": visual_monitor.get_vision_status() if visual_monitor else None
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
            await manager.broadcast(system_stats)
            
            await asyncio.sleep(30)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            await asyncio.sleep(60)

@app.get("/", response_class=HTMLResponse)
async def get_main_page():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    html_content = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Enhanced Neural Network System</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            min-height: 100vh;
        }
        
        .header {
            background: rgba(0, 0, 0, 0.3);
            padding: 20px;
            text-align: center;
            backdrop-filter: blur(10px);
        }
        
        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        
        .header p {
            font-size: 1.2rem;
            opacity: 0.9;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 30px 20px;
        }
        
        .dashboard {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .card {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 25px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: transform 0.3s ease;
        }
        
        .card:hover {
            transform: translateY(-5px);
        }
        
        .card h3 {
            font-size: 1.5rem;
            margin-bottom: 15px;
            color: #fff;
        }
        
        .status {
            display: inline-block;
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 0.9rem;
            font-weight: bold;
            margin-bottom: 15px;
        }
        
        .status.healthy {
            background: #27ae60;
        }
        
        .status.warning {
            background: #f39c12;
        }
        
        .status.error {
            background: #e74c3c;
        }
        
        .metric {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
            padding: 8px 0;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .metric:last-child {
            border-bottom: none;
        }
        
        .metric-label {
            opacity: 0.8;
        }
        
        .metric-value {
            font-weight: bold;
        }
        
        .neural-controls {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 30px;
        }
        
        .control-group {
            margin-bottom: 20px;
        }
        
        .control-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
        }
        
        .control-group input, .control-group select, .control-group textarea {
            width: 100%;
            padding: 10px;
            border: none;
            border-radius: 8px;
            background: rgba(255, 255, 255, 0.2);
            color: white;
            font-size: 1rem;
        }
        
        .control-group input::placeholder, .control-group textarea::placeholder {
            color: rgba(255, 255, 255, 0.7);
        }
        
        .btn {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-right: 10px;
            margin-bottom: 10px;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }
        
        .btn.danger {
            background: linear-gradient(45deg, #e74c3c, #c0392b);
        }
        
        .btn.success {
            background: linear-gradient(45deg, #27ae60, #2ecc71);
        }
        
        .log-area {
            background: rgba(0, 0, 0, 0.5);
            border-radius: 10px;
            padding: 20px;
            height: 300px;
            overflow-y: auto;
            font-family: 'Courier New', monospace;
            font-size: 0.9rem;
            line-height: 1.4;
        }
        
        .log-entry {
            margin-bottom: 5px;
            padding: 5px;
            border-radius: 3px;
        }
        
        .log-entry.info {
            background: rgba(52, 152, 219, 0.2);
        }
        
        .log-entry.warning {
            background: rgba(243, 156, 18, 0.2);
        }
        
        .log-entry.error {
            background: rgba(231, 76, 60, 0.2);
        }
        
        .visual-preview {
            max-width: 100%;
            border-radius: 10px;
            margin-top: 15px;
        }
        
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.7; }
            100% { opacity: 1; }
        }
        
        .loading {
            animation: pulse 2s infinite;
        }
        
        @media (max-width: 768px) {
            .header h1 {
                font-size: 2rem;
            }
            
            .dashboard {
                grid-template-columns: 1fr;
            }
            
            .container {
                padding: 20px 10px;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>üß† Enhanced Neural Network System</h1>
        <p>–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º</p>
    </div>
    
    <div class="container">
        <div class="dashboard">
            <div class="card">
                <h3>üß† –ù–µ–π—Ä–æ–Ω–Ω–∞—è –°–∏—Å—Ç–µ–º–∞</h3>
                <div class="status healthy" id="neural-status">–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...</div>
                <div class="metric">
                    <span class="metric-label">–ó–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏:</span>
                    <span class="metric-value" id="neural-queue">-</span>
                </div>
                <div class="metric">
                    <span class="metric-label">–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á:</span>
                    <span class="metric-value" id="neural-completed">-</span>
                </div>
                <div class="metric">
                    <span class="metric-label">–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:</span>
                    <span class="metric-value" id="neural-success-rate">-</span>
                </div>
                <div class="metric">
                    <span class="metric-label">–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è:</span>
                    <span class="metric-value" id="neural-avg-time">-</span>
                </div>
            </div>
            
            <div class="card">
                <h3>ü§ñ AI –î–≤–∏–∂–æ–∫</h3>
                <div class="status healthy" id="ai-status">–ü—Ä–æ–≤–µ—Ä–∫–∞...</div>
                <div class="metric">
                    <span class="metric-label">–ê–∫—Ç–∏–≤–Ω—ã–π –¥–≤–∏–∂–æ–∫:</span>
                    <span class="metric-value" id="ai-engine">-</span>
                </div>
                <div class="metric">
                    <span class="metric-label">–î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π:</span>
                    <span class="metric-value" id="ai-models">-</span>
                </div>
                <div class="metric">
                    <span class="metric-label">–†–∞–∑–º–µ—Ä –∫—ç—à–∞:</span>
                    <span class="metric-value" id="ai-cache">-</span>
                </div>
            </div>
            
            <div class="card">
                <h3>üëÅÔ∏è –í–∏–∑—É–∞–ª—å–Ω—ã–π –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç</h3>
                <div class="status healthy" id="visual-status">–ê–∫—Ç–∏–≤–µ–Ω</div>
                <div class="metric">
                    <span class="metric-label">–ê–Ω–∞–ª–∏–∑–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:</span>
                    <span class="metric-value" id="visual-analyses">-</span>
                </div>
                <div class="metric">
                    <span class="metric-label">–≠–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ:</span>
                    <span class="metric-value" id="visual-elements">-</span>
                </div>
                <div class="metric">
                    <span class="metric-label">–ü—Ä–æ–±–ª–µ–º –Ω–∞–π–¥–µ–Ω–æ:</span>
                    <span class="metric-value" id="visual-issues">-</span>
                </div>
                <div class="metric">
                    <span class="metric-label">–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</span>
                    <span class="metric-value" id="visual-confidence">-</span>
                </div>
            </div>
        </div>
        
        <div class="neural-controls">
            <h3>üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ù–µ–π—Ä–æ–Ω–Ω–æ–π –°–∏—Å—Ç–µ–º–æ–π</h3>
            
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px;">
                <div>
                    <div class="control-group">
                        <label for="task-type">–¢–∏–ø –∑–∞–¥–∞—á–∏:</label>
                        <select id="task-type">
                            <option value="neural_processing">–ù–µ–π—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞</option>
                            <option value="data_analysis">–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö</option>
                            <option value="pattern_recognition">–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤</option>
                            <option value="model_training">–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏</option>
                        </select>
                    </div>
                    
                    <div class="control-group">
                        <label for="task-priority">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1-10):</label>
                        <input type="number" id="task-priority" min="1" max="10" value="5">
                    </div>
                    
                    <div class="control-group">
                        <label for="task-data">–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (JSON):</label>
                        <textarea id="task-data" rows="4" placeholder='{"data": [1, 2, 3], "analysis_type": "statistical"}'></textarea>
                    </div>
                    
                    <button class="btn success" onclick="addNeuralTask()">üöÄ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É</button>
                    <button class="btn" onclick="clearQueue()">üßπ –û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å</button>
                </div>
                
                <div>
                    <div class="control-group">
                        <label>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</label>
                        <button class="btn" onclick="analyzeData()">üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö</button>
                        <button class="btn" onclick="recognizePatterns()">üîç –ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤</button>
                        <button class="btn" onclick="trainModel()">üß† –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å</button>
                        <button class="btn" onclick="autonomousLearning()">ü§ñ –ê–≤—Ç–æ–æ–±—É—á–µ–Ω–∏–µ</button>
                    </div>
                    
                    <div class="control-group">
                        <label>–°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</label>
                        <button class="btn" onclick="optimizeSystem()">‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è</button>
                        <button class="btn" onclick="clearCache()">üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à</button>
                        <button class="btn danger" onclick="restartSystem()">üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫</button>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card">
            <h3>üìã –°–∏—Å—Ç–µ–º–Ω—ã–µ –õ–æ–≥–∏</h3>
            <div class="log-area" id="system-logs">
                <div class="log-entry info">üöÄ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...</div>
            </div>
        </div>
    </div>
    
    <script>
        // WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        const ws = new WebSocket(`ws://${window.location.host}/ws`);
        
        ws.onopen = function(event) {
            addLog('üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'info');
        };
        
        ws.onmessage = function(event) {
            const data = JSON.parse(event.data);
            
            if (data.type === 'system_update') {
                updateSystemStatus(data);
            } else if (data.type === 'log') {
                addLog(data.message, data.level);
            } else if (data.type === 'task_result') {
                handleTaskResult(data);
            }
        };
        
        ws.onclose = function(event) {
            addLog('üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ', 'warning');
            // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                location.reload();
            }, 5000);
        };
        
        function updateSystemStatus(data) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
            if (data.neural_system) {
                const ns = data.neural_system;
                document.getElementById('neural-queue').textContent = ns.task_queue_size || 0;
                document.getElementById('neural-completed').textContent = ns.completed_tasks || 0;
                
                if (ns.performance_metrics) {
                    const total = ns.performance_metrics.total_tasks || 1;
                    const success = ns.performance_metrics.successful_tasks || 0;
                    const successRate = ((success / total) * 100).toFixed(1);
                    document.getElementById('neural-success-rate').textContent = successRate + '%';
                    document.getElementById('neural-avg-time').textContent = (ns.performance_metrics.average_processing_time || 0).toFixed(2) + 's';
                }
                
                const statusEl = document.getElementById('neural-status');
                statusEl.textContent = ns.running ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
                statusEl.className = 'status ' + (ns.running ? 'healthy' : 'error');
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å AI –¥–≤–∏–∂–∫–∞
            if (data.ai_engine) {
                const ai = data.ai_engine;
                document.getElementById('ai-engine').textContent = ai.default_engine || 'none';
                
                let modelCount = 0;
                if (ai.available_models) {
                    for (const engine in ai.available_models) {
                        modelCount += ai.available_models[engine].length;
                    }
                }
                document.getElementById('ai-models').textContent = modelCount;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –¥–ª—è Ollama
                if (ai.ollama_available && ai.available_models.ollama) {
                    document.getElementById('ai-cache').textContent = 'N/A';
                }
                
                const statusEl = document.getElementById('ai-status');
                const isHealthy = ai.default_engine !== 'none';
                statusEl.textContent = isHealthy ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
                statusEl.className = 'status ' + (isHealthy ? 'healthy' : 'error');
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            if (data.visual_monitor) {
                const vm = data.visual_monitor;
                document.getElementById('visual-analyses').textContent = vm.total_analyses || 0;
                
                if (vm.last_analysis) {
                    document.getElementById('visual-elements').textContent = vm.last_analysis.elements_detected || 0;
                    document.getElementById('visual-issues').textContent = vm.last_analysis.issues_found || 0;
                    document.getElementById('visual-confidence').textContent = ((vm.last_analysis.confidence || 0) * 100).toFixed(1) + '%';
                }
            }
        }
        
        function addLog(message, level = 'info') {
            const logArea = document.getElementById('system-logs');
            const timestamp = new Date().toLocaleTimeString();
            const logEntry = document.createElement('div');
            logEntry.className = `log-entry ${level}`;
            logEntry.textContent = `[${timestamp}] ${message}`;
            
            logArea.appendChild(logEntry);
            logArea.scrollTop = logArea.scrollHeight;
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤
            while (logArea.children.length > 100) {
                logArea.removeChild(logArea.firstChild);
            }
        }
        
        function addNeuralTask() {
            const taskType = document.getElementById('task-type').value;
            const priority = parseInt(document.getElementById('task-priority').value);
            const taskDataStr = document.getElementById('task-data').value;
            
            let taskData;
            try {
                taskData = JSON.parse(taskDataStr || '{}');
            } catch (e) {
                addLog('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–∞–Ω–Ω—ã—Ö', 'error');
                return;
            }
            
            fetch('/api/neural/add_task', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    task_type: taskType,
                    priority: priority,
                    input_data: taskData
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    addLog(`‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: ${data.task_id}`, 'info');
                    document.getElementById('task-data').value = '';
                } else {
                    addLog(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: ${data.error}`, 'error');
                }
            })
            .catch(error => {
                addLog(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error}`, 'error');
            });
        }
        
        function analyzeData() {
            const sampleData = {
                data: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 18, 20, 22],
                analysis_type: "statistical"
            };
            
            document.getElementById('task-type').value = 'data_analysis';
            document.getElementById('task-data').value = JSON.stringify(sampleData, null, 2);
            addNeuralTask();
        }
        
        function recognizePatterns() {
            const samplePatterns = {
                patterns: ["ABAB", "CDCD", "EFEF", "ABAB", "GHGH", "CDCD"]
            };
            
            document.getElementById('task-type').value = 'pattern_recognition';
            document.getElementById('task-data').value = JSON.stringify(samplePatterns, null, 2);
            addNeuralTask();
        }
        
        function trainModel() {
            const trainingData = {
                model_name: "test_model",
                training_data: [
                    {"input": [1, 2], "output": 3},
                    {"input": [2, 3], "output": 5},
                    {"input": [3, 4], "output": 7}
                ]
            };
            
            document.getElementById('task-type').value = 'model_training';
            document.getElementById('task-data').value = JSON.stringify(trainingData, null, 2);
            addNeuralTask();
        }
        
        function autonomousLearning() {
            fetch('/api/neural/autonomous_learning', {
                method: 'POST'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    addLog(`üß† –ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ: ${data.message}`, 'info');
                } else {
                    addLog(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è: ${data.error}`, 'error');
                }
            });
        }
        
        function clearQueue() {
            fetch('/api/neural/clear_queue', {
                method: 'POST'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    addLog('üßπ –û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á –æ—á–∏—â–µ–Ω–∞', 'info');
                } else {
                    addLog(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏: ${data.error}`, 'error');
                }
            });
        }
        
        function optimizeSystem() {
            fetch('/api/system/optimize', {
                method: 'POST'
            })
            .then(response => response.json())
            .then(data => {
                addLog('‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∑–∞–ø—É—â–µ–Ω–∞', 'info');
            });
        }
        
        function clearCache() {
            fetch('/api/system/clear_cache', {
                method: 'POST'
            })
            .then(response => response.json())
            .then(data => {
                addLog('üßπ –ö—ç—à –æ—á–∏—â–µ–Ω', 'info');
            });
        }
        
        function restartSystem() {
            if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É?')) {
                fetch('/api/system/restart', {
                    method: 'POST'
                })
                .then(response => response.json())
                .then(data => {
                    addLog('üîÑ –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...', 'warning');
                });
            }
        }
        
        function handleTaskResult(data) {
            const message = `‚úÖ –ó–∞–¥–∞—á–∞ ${data.task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${data.processing_time.toFixed(2)}—Å`;
            addLog(message, 'info');
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        addLog('üöÄ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–≥—Ä—É–∂–µ–Ω', 'info');
    </script>
</body>
</html>
"""
    return html_content

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """WebSocket endpoint –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    await manager.connect(websocket)
    try:
        while True:
            # –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            data = await websocket.receive_text()
            
            # –ú–æ–∂–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            try:
                message = json.loads(data)
                if message.get("type") == "ping":
                    await websocket.send_text(json.dumps({
                        "type": "pong",
                        "timestamp": datetime.now().isoformat()
                    }))
            except:
                pass
                
    except WebSocketDisconnect:
        manager.disconnect(websocket)

@app.get("/api/status")
async def get_system_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    try:
        status = {
            "neural_system": enhanced_neural_system.get_system_status(),
            "ai_engine": ai_engine.get_status(),
            "visual_monitor": visual_monitor.get_vision_status() if visual_monitor else None,
            "timestamp": datetime.now().isoformat()
        }
        return JSONResponse(status)
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/neural/add_task")
async def add_neural_task(task_data: Dict[str, Any]):
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–µ–π—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É"""
    try:
        task_type = task_data.get("task_type", "neural_processing")
        priority = task_data.get("priority", 5)
        input_data = task_data.get("input_data", {})
        
        task_id = enhanced_neural_system.add_neural_task(task_type, input_data, priority)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        await manager.broadcast({
            "type": "task_added",
            "task_id": task_id,
            "task_type": task_type,
            "priority": priority
        })
        
        return JSONResponse({
            "success": True,
            "task_id": task_id,
            "message": "–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å"
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/neural/clear_queue")
async def clear_task_queue():
    """–û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á"""
    try:
        cleared_count = len(enhanced_neural_system.task_queue)
        enhanced_neural_system.task_queue.clear()
        
        await manager.broadcast({
            "type": "queue_cleared",
            "cleared_count": cleared_count
        })
        
        return JSONResponse({
            "success": True,
            "cleared_count": cleared_count,
            "message": f"–û—á–∏—â–µ–Ω–æ {cleared_count} –∑–∞–¥–∞—á"
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/neural/autonomous_learning")
async def trigger_autonomous_learning():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"""
    try:
        result = await enhanced_neural_system.neural_agent._handle_autonomous_learning({})
        
        await manager.broadcast({
            "type": "autonomous_learning",
            "result": result
        })
        
        return JSONResponse({
            "success": result.get("status") == "success",
            "message": result.get("summary", "–ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"),
            "result": result
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/system/optimize")
async def optimize_system():
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É"""
    try:
        await enhanced_neural_system._optimize_system()
        
        await manager.broadcast({
            "type": "system_optimized",
            "timestamp": datetime.now().isoformat()
        })
        
        return JSONResponse({
            "success": True,
            "message": "–°–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/system/clear_cache")
async def clear_system_cache():
    """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à —Å–∏—Å—Ç–µ–º—ã"""
    try:
        if hasattr(ai_engine.ollama, 'clear_cache'):
            ai_engine.ollama.clear_cache()
        
        return JSONResponse({
            "success": True,
            "message": "–ö—ç—à –æ—á–∏—â–µ–Ω"
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/system/restart")
async def restart_system(background_tasks: BackgroundTasks):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"""
    try:
        background_tasks.add_task(restart_system_background)
        
        return JSONResponse({
            "success": True,
            "message": "–°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è..."
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

async def restart_system_background():
    """–§–æ–Ω–æ–≤—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        await manager.broadcast({
            "type": "system_restarting",
            "timestamp": datetime.now().isoformat()
        })
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É
        enhanced_neural_system.stop()
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
        await asyncio.sleep(3)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–Ω–æ–≤–æ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å)
        logger.info("üîÑ –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return JSONResponse({
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "neural_system_running": enhanced_neural_system.running,
        "ai_engine_available": ai_engine.get_status().get("default_engine") != "none"
    })

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=8081,
        log_level="info",
        access_log=True
    )