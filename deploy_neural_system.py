#!/usr/bin/env python3
"""
Deployment Script for Enhanced Neural Network System
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≤ –æ–±–ª–∞–∫–µ
"""

import asyncio
import json
import logging
import os
import subprocess
import sys
import time
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class NeuralSystemDeployer:
    """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.project_root = Path("/workspace")
        self.deployment_config = {
            "server_ip": "5.129.198.210",
            "server_port": 8080,
            "neural_port": 8081,
            "visual_port": 8082,
            "ollama_port": 11434
        }
        self.required_packages = [
            "torch",
            "transformers",
            "ollama",
            "fastapi",
            "uvicorn",
            "websockets",
            "pillow",
            "opencv-python",
            "numpy",
            "pandas",
            "scikit-learn",
            "matplotlib",
            "seaborn",
            "requests",
            "aiohttp",
            "asyncio",
            "schedule"
        ]
        self.services = []
        
    async def deploy_full_system(self):
        """–ü–æ–ª–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("üöÄ –ù–∞—á–∏–Ω–∞—é –ø–æ–ª–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
            
            # –≠—Ç–∞–ø 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ä–µ–¥—ã
            await self._prepare_environment()
            
            # –≠—Ç–∞–ø 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            await self._install_dependencies()
            
            # –≠—Ç–∞–ø 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Ollama –∏ –º–æ–¥–µ–ª–µ–π
            await self._setup_ollama()
            
            # –≠—Ç–∞–ø 4: –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
            await self._create_services()
            
            # –≠—Ç–∞–ø 5: –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
            await self._start_system()
            
            # –≠—Ç–∞–ø 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
            await self._health_check()
            
            # –≠—Ç–∞–ø 7: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
            await self._setup_autostart()
            
            logger.info("‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            await self._print_deployment_summary()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: {e}")
            await self._cleanup_on_error()
            raise
    
    async def _prepare_environment(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ä–µ–¥—ã"""
        logger.info("üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ä–µ–¥—ã...")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        directories = [
            "/workspace/neural_data",
            "/workspace/neural_models",
            "/workspace/neural_logs",
            "/workspace/neural_cache",
            "/workspace/visual_screenshots",
            "/workspace/visual_reports"
        ]
        
        for directory in directories:
            Path(directory).mkdir(parents=True, exist_ok=True)
            logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        os.environ["NEURAL_SYSTEM_ROOT"] = str(self.project_root)
        os.environ["PYTHONPATH"] = f"{os.environ.get('PYTHONPATH', '')}:{self.project_root}"
        
        logger.info("‚úÖ –°—Ä–µ–¥–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞")
    
    async def _install_dependencies(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        logger.info("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º pip
            subprocess.run([sys.executable, "-m", "pip", "install", "--upgrade", "pip"], check=True)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞–∫–µ—Ç—ã
            for package in self.required_packages:
                try:
                    logger.info(f"üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é {package}...")
                    subprocess.run([
                        sys.executable, "-m", "pip", "install", package, "--quiet"
                    ], check=True, timeout=300)
                    logger.info(f"‚úÖ {package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                except subprocess.TimeoutExpired:
                    logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}, –ø—Ä–æ–ø—É—Å–∫–∞—é...")
                except subprocess.CalledProcessError as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {package}: {e}")
            
            logger.info("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
            raise
    
    async def _setup_ollama(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Ollama –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π"""
        logger.info("ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Ollama...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Ollama
            try:
                result = subprocess.run(["ollama", "--version"], capture_output=True, text=True, timeout=10)
                if result.returncode == 0:
                    logger.info(f"‚úÖ Ollama —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {result.stdout.strip()}")
                else:
                    await self._install_ollama()
            except FileNotFoundError:
                await self._install_ollama()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Ollama —Å–µ—Ä–≤–µ—Ä
            await self._start_ollama_server()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω—É–∂–Ω—ã–µ –º–æ–¥–µ–ª–∏
            models_to_download = [
                "llama3.2:latest",
                "codellama:latest",
                "mistral:latest"
            ]
            
            for model in models_to_download:
                await self._download_model(model)
            
            logger.info("‚úÖ Ollama –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Ollama: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ Ollama, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ OpenAI API
            logger.info("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ Ollama, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ OpenAI API")
    
    async def _install_ollama(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Ollama"""
        logger.info("üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Ollama...")
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Ollama
            install_script = """
            curl -fsSL https://ollama.ai/install.sh | sh
            """
            
            process = subprocess.Popen(
                install_script,
                shell=True,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            stdout, stderr = process.communicate(timeout=300)
            
            if process.returncode == 0:
                logger.info("‚úÖ Ollama —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Ollama: {stderr}")
                raise Exception(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Ollama –Ω–µ —É–¥–∞–ª–∞—Å—å: {stderr}")
                
        except subprocess.TimeoutExpired:
            logger.warning("‚è∞ –¢–∞–π–º–∞—É—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Ollama")
            raise Exception("–¢–∞–π–º–∞—É—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Ollama")
    
    async def _start_ollama_server(self):
        """–ó–∞–ø—É—Å–∫ Ollama —Å–µ—Ä–≤–µ—Ä–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Ollama —Å–µ—Ä–≤–µ—Ä–∞...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ —Å–µ—Ä–≤–µ—Ä
            try:
                import requests
                response = requests.get("http://localhost:11434/api/tags", timeout=5)
                if response.status_code == 200:
                    logger.info("‚úÖ Ollama —Å–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                    return
            except:
                pass
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
            subprocess.Popen(
                ["ollama", "serve"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
            for i in range(30):
                try:
                    import requests
                    response = requests.get("http://localhost:11434/api/tags", timeout=2)
                    if response.status_code == 200:
                        logger.info("‚úÖ Ollama —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
                        return
                except:
                    await asyncio.sleep(2)
            
            logger.warning("‚ö†Ô∏è Ollama —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Ollama —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    
    async def _download_model(self, model: str):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Ollama"""
        logger.info(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ {model}...")
        
        try:
            process = subprocess.Popen(
                ["ollama", "pull", model],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            try:
                stdout, stderr = process.communicate(timeout=600)  # 10 –º–∏–Ω—É—Ç –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É
                
                if process.returncode == 0:
                    logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å {model} –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å {model}: {stderr}")
                    
            except subprocess.TimeoutExpired:
                process.kill()
                logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ {model}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ {model}: {e}")
    
    async def _create_services(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        neural_service = self._create_neural_service()
        self.services.append(neural_service)
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        visual_service = self._create_visual_service()
        self.services.append(visual_service)
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ–±–ª–∞—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        cloud_service = self._create_cloud_service()
        self.services.append(cloud_service)
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(self.services)} —Å–µ—Ä–≤–∏—Å–æ–≤")
    
    def _create_neural_service(self) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        return {
            "name": "neural-system",
            "description": "Enhanced Neural Network System",
            "exec_start": f"{sys.executable} {self.project_root}/enhanced_neural_system.py",
            "working_directory": str(self.project_root),
            "environment": {
                "PYTHONPATH": str(self.project_root),
                "NEURAL_SYSTEM_ROOT": str(self.project_root)
            },
            "restart": "always",
            "port": self.deployment_config["neural_port"]
        }
    
    def _create_visual_service(self) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        return {
            "name": "visual-monitor",
            "description": "Visual Intelligence Monitor",
            "exec_start": f"{sys.executable} {self.project_root}/visual_monitor.py",
            "working_directory": str(self.project_root),
            "environment": {
                "PYTHONPATH": str(self.project_root),
                "DISPLAY": ":99"
            },
            "restart": "always",
            "port": self.deployment_config["visual_port"]
        }
    
    def _create_cloud_service(self) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–∞—á–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
        return {
            "name": "cloud-agent-system",
            "description": "Cloud Agent System",
            "exec_start": f"{sys.executable} {self.project_root}/cloud_agent_system.py",
            "working_directory": str(self.project_root),
            "environment": {
                "PYTHONPATH": str(self.project_root)
            },
            "restart": "always",
            "port": self.deployment_config["server_port"]
        }
    
    async def _start_system(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—ã–π —Å–µ—Ä–≤–∏—Å
        for service in self.services:
            await self._start_service(service)
        
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")
    
    async def _start_service(self, service: Dict[str, Any]):
        """–ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ {service['name']}...")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            env = os.environ.copy()
            env.update(service.get("environment", {}))
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            process = subprocess.Popen(
                service["exec_start"].split(),
                cwd=service["working_directory"],
                env=env,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
            
            service["process"] = process
            service["pid"] = process.pid
            
            logger.info(f"‚úÖ –°–µ—Ä–≤–∏—Å {service['name']} –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
            await asyncio.sleep(2)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ {service['name']}: {e}")
    
    async def _health_check(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üíö –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–µ—Ä–≤–∏—Å
        healthy_services = 0
        
        for service in self.services:
            if await self._check_service_health(service):
                healthy_services += 1
        
        logger.info(f"üíö –ó–¥–æ—Ä–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: {healthy_services}/{len(self.services)}")
        
        if healthy_services == len(self.services):
            logger.info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            logger.warning(f"‚ö†Ô∏è {len(self.services) - healthy_services} —Å–µ—Ä–≤–∏—Å–æ–≤ –∏–º–µ—é—Ç –ø—Ä–æ–±–ª–µ–º—ã")
    
    async def _check_service_health(self, service: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            process = service.get("process")
            if not process:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            if process.poll() is not None:
                logger.warning(f"‚ö†Ô∏è –°–µ—Ä–≤–∏—Å {service['name']} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ –ø–æ—Ä—Ç—É (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
            port = service.get("port")
            if port:
                try:
                    import requests
                    response = requests.get(f"http://localhost:{port}/health", timeout=5)
                    if response.status_code == 200:
                        logger.info(f"‚úÖ –°–µ—Ä–≤–∏—Å {service['name']} –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É {port}")
                        return True
                except:
                    pass
            
            # –ï—Å–ª–∏ –ø–æ—Ä—Ç –Ω–µ —É–∫–∞–∑–∞–Ω, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤–æ–π
            logger.info(f"‚úÖ –°–µ—Ä–≤–∏—Å {service['name']} —Ä–∞–±–æ—Ç–∞–µ—Ç (PID: {process.pid})")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ {service['name']}: {e}")
            return False
    
    async def _setup_autostart(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞"""
        logger.info("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º startup —Å–∫—Ä–∏–ø—Ç
            startup_script = self._create_startup_script()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç
            script_path = self.project_root / "start_neural_system.sh"
            with open(script_path, "w") as f:
                f.write(startup_script)
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
            script_path.chmod(0o755)
            
            logger.info(f"‚úÖ Startup —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω: {script_path}")
            
            # –°–æ–∑–¥–∞–µ–º systemd —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
            await self._create_systemd_service()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞: {e}")
    
    def _create_startup_script(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ startup —Å–∫—Ä–∏–ø—Ç–∞"""
        return f"""#!/bin/bash

# Enhanced Neural Network System Startup Script
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã

export PYTHONPATH="{self.project_root}:$PYTHONPATH"
export NEURAL_SYSTEM_ROOT="{self.project_root}"

cd {self.project_root}

echo "üöÄ –ó–∞–ø—É—Å–∫ Enhanced Neural Network System..."

# –ó–∞–ø—É—Å–∫ Ollama —Å–µ—Ä–≤–µ—Ä–∞
if command -v ollama &> /dev/null; then
    echo "ü§ñ –ó–∞–ø—É—Å–∫ Ollama —Å–µ—Ä–≤–µ—Ä–∞..."
    ollama serve &
    sleep 5
fi

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
echo "üß† –ó–∞–ø—É—Å–∫ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã..."
{sys.executable} enhanced_neural_system.py &

echo "üëÅÔ∏è –ó–∞–ø—É—Å–∫ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
{sys.executable} visual_monitor.py &

echo "‚òÅÔ∏è –ó–∞–ø—É—Å–∫ –æ–±–ª–∞—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã..."
{sys.executable} cloud_agent_system.py &

echo "‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"

# –û–∂–∏–¥–∞–Ω–∏–µ
wait
"""
    
    async def _create_systemd_service(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            service_content = f"""[Unit]
Description=Enhanced Neural Network System
After=network.target
Wants=network.target

[Service]
Type=forking
User=root
WorkingDirectory={self.project_root}
ExecStart={self.project_root}/start_neural_system.sh
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
"""
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Ä–≤–∏—Å
            service_path = Path("/etc/systemd/system/neural-system.service")
            try:
                with open(service_path, "w") as f:
                    f.write(service_content)
                
                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º systemd –∏ –≤–∫–ª—é—á–∞–µ–º —Å–µ—Ä–≤–∏—Å
                subprocess.run(["systemctl", "daemon-reload"], check=True)
                subprocess.run(["systemctl", "enable", "neural-system"], check=True)
                
                logger.info("‚úÖ Systemd —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω –∏ –≤–∫–ª—é—á–µ–Ω")
                
            except PermissionError:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è systemd —Å–µ—Ä–≤–∏—Å–∞")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è systemd —Å–µ—Ä–≤–∏—Å–∞: {e}")
    
    async def _cleanup_on_error(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        for service in self.services:
            process = service.get("process")
            if process and process.poll() is None:
                try:
                    process.terminate()
                    logger.info(f"üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–µ—Ä–≤–∏—Å {service['name']}")
                except:
                    pass
    
    async def _print_deployment_summary(self):
        """–ü–µ—á–∞—Ç—å —Å–≤–æ–¥–∫–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        summary = f"""
üéâ –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!

üìä –°–≤–æ–¥–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üß† Enhanced Neural Network System
   ‚îú‚îÄ‚îÄ –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: http://localhost:{self.deployment_config['neural_port']}
   ‚îú‚îÄ‚îÄ –í–∏–∑—É–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: http://localhost:{self.deployment_config['visual_port']}
   ‚îú‚îÄ‚îÄ –û–±–ª–∞—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: http://localhost:{self.deployment_config['server_port']}
   ‚îî‚îÄ‚îÄ Ollama API: http://localhost:{self.deployment_config['ollama_port']}

üöÄ –ó–∞–ø—É—â–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:
"""
        
        for service in self.services:
            status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if service.get("process") and service["process"].poll() is None else "üî¥ –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
            summary += f"   ‚îú‚îÄ‚îÄ {service['name']}: {status}\n"
        
        summary += f"""
üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:
   ‚îú‚îÄ‚îÄ –î–∞–Ω–Ω—ã–µ: /workspace/neural_data
   ‚îú‚îÄ‚îÄ –ú–æ–¥–µ–ª–∏: /workspace/neural_models
   ‚îú‚îÄ‚îÄ –õ–æ–≥–∏: /workspace/neural_logs
   ‚îú‚îÄ‚îÄ –ö—ç—à: /workspace/neural_cache
   ‚îî‚îÄ‚îÄ –°–∫—Ä–∏–Ω—à–æ—Ç—ã: /workspace/visual_screenshots

üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π:
   ‚îú‚îÄ‚îÄ –ó–∞–ø—É—Å–∫: ./start_neural_system.sh
   ‚îú‚îÄ‚îÄ –°—Ç–∞—Ç—É—Å: systemctl status neural-system
   ‚îî‚îÄ‚îÄ –õ–æ–≥–∏: journalctl -u neural-system -f

üåê –î–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ:
   ‚îú‚îÄ‚îÄ –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:{self.deployment_config['server_port']}
   ‚îú‚îÄ‚îÄ –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: http://localhost:{self.deployment_config['neural_port']}
   ‚îî‚îÄ‚îÄ –í–∏–∑—É–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: http://localhost:{self.deployment_config['visual_port']}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚ú® –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ! –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.
üß† –ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –æ–±—É—á–∞—é—Ç—Å—è –∏ –∞–¥–∞–ø—Ç–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
üëÅÔ∏è –í–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
‚òÅÔ∏è –û–±–ª–∞—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç 24/7 —Ä–∞–±–æ—Ç—É.

üéØ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ê–í–¢–û–ù–û–ú–ù–û –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è!
"""
        
        print(summary)
        logger.info("üìã –°–≤–æ–¥–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤—ã–≤–µ–¥–µ–Ω–∞")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
    deployer = NeuralSystemDeployer()
    
    try:
        await deployer.deploy_full_system()
        
        # –û–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        logger.info("üí§ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        while True:
            await asyncio.sleep(60)
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
            await deployer._health_check()
            
    except KeyboardInterrupt:
        logger.info("üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        await deployer._cleanup_on_error()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: {e}")
        await deployer._cleanup_on_error()
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())