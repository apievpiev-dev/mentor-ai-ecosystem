#!/usr/bin/env python3
"""
Unified AI Ecosystem - API Gateway
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ —Ç—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É
"""

from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse, JSONResponse
import httpx
import asyncio
import logging
from typing import Dict, Any
import uvicorn

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="Unified AI Ecosystem",
    description="–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞ AI –ø—Ä–æ–µ–∫—Ç–æ–≤: MENTOR + AI Manager + JARVIS",
    version="1.0.0"
)

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# URL —Å–µ—Ä–≤–∏—Å–æ–≤
SERVICES = {
    "mentor": "http://localhost:8080",
    "ai_manager": "http://localhost:8000", 
    "jarvis": "http://localhost:8081"  # –ò–∑–º–µ–Ω—è–µ–º –ø–æ—Ä—Ç JARVIS
}

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
request_stats = {
    "mentor": 0,
    "ai_manager": 0,
    "jarvis": 0,
    "total": 0
}

@app.get("/", response_class=HTMLResponse)
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏—Å—Ç–µ–º–µ"""
    html_content = """
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Unified AI Ecosystem</title>
        <style>
            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                margin: 0;
                padding: 20px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                min-height: 100vh;
            }
            .container {
                max-width: 1200px;
                margin: 0 auto;
            }
            .header {
                text-align: center;
                margin-bottom: 40px;
            }
            .ecosystem-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                gap: 20px;
                margin-bottom: 40px;
            }
            .service-card {
                background: rgba(255, 255, 255, 0.1);
                border-radius: 15px;
                padding: 30px;
                text-align: center;
                backdrop-filter: blur(10px);
                border: 1px solid rgba(255, 255, 255, 0.2);
                transition: transform 0.3s ease;
            }
            .service-card:hover {
                transform: translateY(-5px);
            }
            .mentor-card { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); }
            .ai-manager-card { background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); }
            .jarvis-card { background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%); }
            .btn {
                background: rgba(255, 255, 255, 0.2);
                border: none;
                padding: 12px 24px;
                border-radius: 25px;
                color: white;
                cursor: pointer;
                font-size: 16px;
                margin: 10px;
                transition: all 0.3s ease;
            }
            .btn:hover {
                background: rgba(255, 255, 255, 0.3);
                transform: scale(1.05);
            }
            .stats {
                background: rgba(255, 255, 255, 0.1);
                border-radius: 15px;
                padding: 20px;
                margin-top: 20px;
            }
            .stats-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 15px;
            }
            .stat-item {
                text-align: center;
                padding: 15px;
                background: rgba(255, 255, 255, 0.1);
                border-radius: 10px;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üåê Unified AI Ecosystem</h1>
                <p>–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞ AI –ø—Ä–æ–µ–∫—Ç–æ–≤</p>
            </div>
            
            <div class="ecosystem-grid">
                <div class="service-card mentor-card">
                    <h2>ü§ñ MENTOR</h2>
                    <p>–ú–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á</p>
                    <p><strong>–ü–æ—Ä—Ç:</strong> 8080</p>
                    <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span id="mentor-status">–ü—Ä–æ–≤–µ—Ä–∫–∞...</span></p>
                    <button class="btn" onclick="openService('mentor')">–û—Ç–∫—Ä—ã—Ç—å MENTOR</button>
                    <button class="btn" onclick="checkService('mentor')">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å</button>
                </div>
                
                <div class="service-card ai-manager-card">
                    <h2>üè≠ AI MANAGER</h2>
                    <p>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AI –∞–≥–µ–Ω—Ç–∞–º–∏</p>
                    <p><strong>–ü–æ—Ä—Ç:</strong> 8000</p>
                    <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span id="ai-manager-status">–ü—Ä–æ–≤–µ—Ä–∫–∞...</span></p>
                    <button class="btn" onclick="openService('ai_manager')">–û—Ç–∫—Ä—ã—Ç—å AI Manager</button>
                    <button class="btn" onclick="checkService('ai_manager')">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å</button>
                </div>
                
                <div class="service-card jarvis-card">
                    <h2>üß† JARVIS DATA</h2>
                    <p>–°–∏—Å—Ç–µ–º–∞ –∑–Ω–∞–Ω–∏–π –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏</p>
                    <p><strong>–ü–æ—Ä—Ç:</strong> 8081</p>
                    <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span id="jarvis-status">–ü—Ä–æ–≤–µ—Ä–∫–∞...</span></p>
                    <button class="btn" onclick="openService('jarvis')">–û—Ç–∫—Ä—ã—Ç—å JARVIS</button>
                    <button class="btn" onclick="checkService('jarvis')">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å</button>
                </div>
            </div>
            
            <div class="stats">
                <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤</h3>
                <div class="stats-grid">
                    <div class="stat-item">
                        <h4>MENTOR</h4>
                        <p id="mentor-requests">0</p>
                    </div>
                    <div class="stat-item">
                        <h4>AI Manager</h4>
                        <p id="ai-manager-requests">0</p>
                    </div>
                    <div class="stat-item">
                        <h4>JARVIS</h4>
                        <p id="jarvis-requests">0</p>
                    </div>
                    <div class="stat-item">
                        <h4>–í—Å–µ–≥–æ</h4>
                        <p id="total-requests">0</p>
                    </div>
                </div>
            </div>
        </div>
        
        <script>
            const services = {
                'mentor': 'http://localhost:8080',
                'ai_manager': 'http://localhost:8000',
                'jarvis': 'http://localhost:8081'
            };
            
            function openService(serviceName) {
                const url = services[serviceName];
                window.open(url, '_blank');
            }
            
            async function checkService(serviceName) {
                const statusElement = document.getElementById(serviceName + '-status');
                statusElement.textContent = '–ü—Ä–æ–≤–µ—Ä–∫–∞...';
                
                try {
                    const response = await fetch(`/api/status/${serviceName}`);
                    const data = await response.json();
                    statusElement.textContent = data.status;
                    statusElement.style.color = data.status === 'online' ? '#4CAF50' : '#F44336';
                } catch (error) {
                    statusElement.textContent = 'offline';
                    statusElement.style.color = '#F44336';
                }
            }
            
            async function updateStats() {
                try {
                    const response = await fetch('/api/stats');
                    const stats = await response.json();
                    
                    document.getElementById('mentor-requests').textContent = stats.mentor;
                    document.getElementById('ai-manager-requests').textContent = stats.ai_manager;
                    document.getElementById('jarvis-requests').textContent = stats.jarvis;
                    document.getElementById('total-requests').textContent = stats.total;
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
            document.addEventListener('DOMContentLoaded', function() {
                Object.keys(services).forEach(checkService);
                updateStats();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                setInterval(updateStats, 5000);
            });
        </script>
    </body>
    </html>
    """
    return HTMLResponse(content=html_content)

@app.get("/api/status/{service_name}")
async def check_service_status(service_name: str):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
    if service_name not in SERVICES:
        raise HTTPException(status_code=404, detail="–°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    service_url = SERVICES[service_name]
    
    try:
        async with httpx.AsyncClient(timeout=5.0) as client:
            response = await client.get(f"{service_url}/api/system/status")
            if response.status_code == 200:
                return {"status": "online", "url": service_url}
            else:
                return {"status": "error", "url": service_url}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ {service_name}: {e}")
        return {"status": "offline", "url": service_url}

@app.get("/api/stats")
async def get_request_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤"""
    return request_stats

@app.get("/api/services")
async def get_services_info():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö"""
    return {
        "services": SERVICES,
        "gateway_port": 9000,
        "description": "Unified AI Ecosystem Gateway"
    }

# –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ MENTOR
@app.api_route("/mentor/{path:path}", methods=["GET", "POST", "PUT", "DELETE", "PATCH"])
async def mentor_proxy(path: str, request: Request):
    """–ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ MENTOR"""
    return await proxy_request("mentor", path, request)

# –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ AI Manager
@app.api_route("/ai-manager/{path:path}", methods=["GET", "POST", "PUT", "DELETE", "PATCH"])
async def ai_manager_proxy(path: str, request: Request):
    """–ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ AI Manager"""
    return await proxy_request("ai_manager", path, request)

# –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ JARVIS
@app.api_route("/jarvis/{path:path}", methods=["GET", "POST", "PUT", "DELETE", "PATCH"])
async def jarvis_proxy(path: str, request: Request):
    """–ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ JARVIS"""
    return await proxy_request("jarvis", path, request)

async def proxy_request(service_name: str, path: str, request: Request):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if service_name not in SERVICES:
        raise HTTPException(status_code=404, detail="–°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    service_url = SERVICES[service_name]
    target_url = f"{service_url}/{path}"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    request_stats[service_name] += 1
    request_stats["total"] += 1
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
            headers = dict(request.headers)
            # –£–¥–∞–ª—è–µ–º host –∑–∞–≥–æ–ª–æ–≤–æ–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
            headers.pop("host", None)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = await client.request(
                method=request.method,
                url=target_url,
                headers=headers,
                content=await request.body(),
                params=request.query_params
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç
            return JSONResponse(
                content=response.json() if response.headers.get("content-type", "").startswith("application/json") else {"data": response.text},
                status_code=response.status_code,
                headers=dict(response.headers)
            )
            
    except httpx.TimeoutException:
        logger.error(f"–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ {service_name}: {target_url}")
        raise HTTPException(status_code=504, detail="–¢–∞–π–º–∞—É—Ç —Å–µ—Ä–≤–∏—Å–∞")
    except httpx.ConnectError:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {service_name}: {target_url}")
        raise HTTPException(status_code=503, detail="–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è –∫ {service_name}: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ API endpoints
@app.post("/api/integration/create-agent")
async def create_agent_integration(agent_config: Dict[str, Any]):
    """–°–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–æ–≤"""
    try:
        # 1. –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ AI Manager
        async with httpx.AsyncClient() as client:
            ai_manager_response = await client.post(
                f"{SERVICES['ai_manager']}/api/agents/create",
                json=agent_config
            )
            
            if ai_manager_response.status_code != 200:
                raise HTTPException(status_code=400, detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ –≤ AI Manager")
            
            agent_data = ai_manager_response.json()
            
            # 2. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞ –≤ MENTOR
            mentor_response = await client.post(
                f"{SERVICES['mentor']}/api/agents/register",
                json=agent_data
            )
            
            if mentor_response.status_code != 200:
                raise HTTPException(status_code=400, detail="–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞ –≤ MENTOR")
            
            # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞–Ω–∏—è –≤ JARVIS
            jarvis_response = await client.post(
                f"{SERVICES['jarvis']}/api/knowledge/store",
                json={
                    "type": "agent",
                    "data": agent_data,
                    "source": "ai_manager"
                }
            )
            
            return {
                "success": True,
                "agent": agent_data,
                "mentor_registration": mentor_response.json(),
                "jarvis_storage": jarvis_response.json() if jarvis_response.status_code == 200 else None
            }
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/integration/execute-task")
async def execute_task_integration(task_config: Dict[str, Any]):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    try:
        async with httpx.AsyncClient() as client:
            # 1. –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞–Ω–∏—è –∏–∑ JARVIS
            knowledge_response = await client.get(
                f"{SERVICES['jarvis']}/api/knowledge/search",
                params={"query": task_config.get("description", "")}
            )
            
            knowledge = knowledge_response.json() if knowledge_response.status_code == 200 else {}
            
            # 2. –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ AI Manager
            agent_config = {
                "task_type": task_config.get("type", "general"),
                "knowledge": knowledge,
                "requirements": task_config.get("requirements", [])
            }
            
            agent_response = await client.post(
                f"{SERVICES['ai_manager']}/api/agents/create-for-task",
                json=agent_config
            )
            
            if agent_response.status_code != 200:
                raise HTTPException(status_code=400, detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á–∏")
            
            agent_data = agent_response.json()
            
            # 3. –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ MENTOR
            task_response = await client.post(
                f"{SERVICES['mentor']}/api/tasks/execute",
                json={
                    "task": task_config,
                    "agent": agent_data
                }
            )
            
            if task_response.status_code != 200:
                raise HTTPException(status_code=400, detail="–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏")
            
            result = task_response.json()
            
            # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JARVIS
            await client.post(
                f"{SERVICES['jarvis']}/api/knowledge/store",
                json={
                    "type": "task_result",
                    "data": result,
                    "source": "mentor"
                }
            )
            
            return {
                "success": True,
                "task": task_config,
                "agent": agent_data,
                "result": result,
                "knowledge_used": knowledge
            }
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Unified AI Ecosystem Gateway...")
    logger.info(f"üì° –°–µ—Ä–≤–∏—Å—ã: {SERVICES}")
    logger.info("üåê –î–æ—Å—Ç—É–ø: http://localhost:9000")
    
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=9000,
        reload=True,
        log_level="info"
    )

